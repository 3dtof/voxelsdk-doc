<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.7"/>
<title>Voxel: ELFIO::dump Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Voxel
   &#160;<span id="projectnumber">0.5.6</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.7 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceELFIO.xhtml">ELFIO</a></li><li class="navelem"><a class="el" href="classELFIO_1_1dump.xhtml">dump</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-static-methods">Static Public Member Functions</a> &#124;
<a href="#pri-static-methods">Static Private Member Functions</a> &#124;
<a href="classELFIO_1_1dump-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">ELFIO::dump Class Reference</div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="elfio__dump_8hpp_source.xhtml">elfio_dump.hpp</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-static-methods"></a>
Static Public Member Functions</h2></td></tr>
<tr class="memitem:a16ee3f884fdff1bfd87d2513543b4d39"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classELFIO_1_1dump.xhtml#a16ee3f884fdff1bfd87d2513543b4d39">header</a> (std::ostream &amp;out, const <a class="el" href="classELFIO_1_1elfio.xhtml">elfio</a> &amp;reader)</td></tr>
<tr class="separator:a16ee3f884fdff1bfd87d2513543b4d39"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aee9c2e17dc9c709b78401f7a38a31c8e"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classELFIO_1_1dump.xhtml#aee9c2e17dc9c709b78401f7a38a31c8e">section_headers</a> (std::ostream &amp;out, const <a class="el" href="classELFIO_1_1elfio.xhtml">elfio</a> &amp;reader)</td></tr>
<tr class="separator:aee9c2e17dc9c709b78401f7a38a31c8e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5a8ef9b856de2e1b0447ee6a74fd98d9"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classELFIO_1_1dump.xhtml#a5a8ef9b856de2e1b0447ee6a74fd98d9">section_header</a> (std::ostream &amp;out, <a class="el" href="namespaceELFIO.xhtml#a1cbef4f0d8fabbb57ce3507f3ee06e1a">Elf_Half</a> no, const <a class="el" href="classELFIO_1_1section.xhtml">section</a> *sec, unsigned char elf_class)</td></tr>
<tr class="separator:a5a8ef9b856de2e1b0447ee6a74fd98d9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad1a6efd3db614d85b0c50a54451e696a"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classELFIO_1_1dump.xhtml#ad1a6efd3db614d85b0c50a54451e696a">segment_headers</a> (std::ostream &amp;out, const <a class="el" href="classELFIO_1_1elfio.xhtml">elfio</a> &amp;reader)</td></tr>
<tr class="separator:ad1a6efd3db614d85b0c50a54451e696a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3e837ae64e7c733dfd0d1bc004b53529"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classELFIO_1_1dump.xhtml#a3e837ae64e7c733dfd0d1bc004b53529">segment_header</a> (std::ostream &amp;out, <a class="el" href="namespaceELFIO.xhtml#a1cbef4f0d8fabbb57ce3507f3ee06e1a">Elf_Half</a> no, const <a class="el" href="classELFIO_1_1segment.xhtml">segment</a> *seg, unsigned <a class="el" href="classint.xhtml">int</a> elf_class)</td></tr>
<tr class="separator:a3e837ae64e7c733dfd0d1bc004b53529"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac2fee2fccc29233d6839b39a84805637"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classELFIO_1_1dump.xhtml#ac2fee2fccc29233d6839b39a84805637">symbol_tables</a> (std::ostream &amp;out, const <a class="el" href="classELFIO_1_1elfio.xhtml">elfio</a> &amp;reader)</td></tr>
<tr class="separator:ac2fee2fccc29233d6839b39a84805637"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8bc5912b0f4138ccf89b0e46ce8781e8"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classELFIO_1_1dump.xhtml#a8bc5912b0f4138ccf89b0e46ce8781e8">symbol_table</a> (std::ostream &amp;out, <a class="el" href="namespaceELFIO.xhtml#a1cbef4f0d8fabbb57ce3507f3ee06e1a">Elf_Half</a> no, std::string &amp;name, <a class="el" href="namespaceELFIO.xhtml#a10b98acc49bab16ded42171fb3431f83">Elf64_Addr</a> value, <a class="el" href="namespaceELFIO.xhtml#ad0fe06bd63d957a8fa08a227dc0dd9e3">Elf_Xword</a> size, unsigned char bind, unsigned char type, <a class="el" href="namespaceELFIO.xhtml#a1cbef4f0d8fabbb57ce3507f3ee06e1a">Elf_Half</a> <a class="el" href="classELFIO_1_1section.xhtml">section</a>, unsigned <a class="el" href="classint.xhtml">int</a> elf_class)</td></tr>
<tr class="separator:a8bc5912b0f4138ccf89b0e46ce8781e8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9f3f44fe3ed3d5d88efd6f7229baa0e0"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classELFIO_1_1dump.xhtml#a9f3f44fe3ed3d5d88efd6f7229baa0e0">notes</a> (std::ostream &amp;out, const <a class="el" href="classELFIO_1_1elfio.xhtml">elfio</a> &amp;reader)</td></tr>
<tr class="separator:a9f3f44fe3ed3d5d88efd6f7229baa0e0"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a056b95608d0bf7b982c5601713e7ad52"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classELFIO_1_1dump.xhtml#a056b95608d0bf7b982c5601713e7ad52">note</a> (std::ostream &amp;out, <a class="el" href="classint.xhtml">int</a> no, <a class="el" href="namespaceELFIO.xhtml#a7dfc604e0cf71b4a1f80a46af67d57fc">Elf_Word</a> type, const std::string &amp;name)</td></tr>
<tr class="separator:a056b95608d0bf7b982c5601713e7ad52"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a86b6fd3d926ec4ffd27e266836adf600"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classELFIO_1_1dump.xhtml#a86b6fd3d926ec4ffd27e266836adf600">dynamic_tags</a> (std::ostream &amp;out, const <a class="el" href="classELFIO_1_1elfio.xhtml">elfio</a> &amp;reader)</td></tr>
<tr class="separator:a86b6fd3d926ec4ffd27e266836adf600"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3950958d72a3b5249d8a176e90fbfd10"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classELFIO_1_1dump.xhtml#a3950958d72a3b5249d8a176e90fbfd10">dynamic_tag</a> (std::ostream &amp;out, <a class="el" href="classint.xhtml">int</a> no, <a class="el" href="namespaceELFIO.xhtml#ad0fe06bd63d957a8fa08a227dc0dd9e3">Elf_Xword</a> tag, <a class="el" href="namespaceELFIO.xhtml#ad0fe06bd63d957a8fa08a227dc0dd9e3">Elf_Xword</a> value, std::string str, unsigned <a class="el" href="classint.xhtml">int</a>)</td></tr>
<tr class="separator:a3950958d72a3b5249d8a176e90fbfd10"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a97b27bf46ba4ac7addf47f32cc35af96"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classELFIO_1_1dump.xhtml#a97b27bf46ba4ac7addf47f32cc35af96">section_data</a> (std::ostream &amp;out, const <a class="el" href="classELFIO_1_1section.xhtml">section</a> *sec)</td></tr>
<tr class="separator:a97b27bf46ba4ac7addf47f32cc35af96"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7174e9f611a14c0b561a5c2ca7a9d340"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classELFIO_1_1dump.xhtml#a7174e9f611a14c0b561a5c2ca7a9d340">section_datas</a> (std::ostream &amp;out, const <a class="el" href="classELFIO_1_1elfio.xhtml">elfio</a> &amp;reader)</td></tr>
<tr class="separator:a7174e9f611a14c0b561a5c2ca7a9d340"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3185bd59b2f1eadd79528beb99baa4d6"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classELFIO_1_1dump.xhtml#a3185bd59b2f1eadd79528beb99baa4d6">segment_data</a> (std::ostream &amp;out, <a class="el" href="namespaceELFIO.xhtml#a1cbef4f0d8fabbb57ce3507f3ee06e1a">Elf_Half</a> no, const <a class="el" href="classELFIO_1_1segment.xhtml">segment</a> *seg)</td></tr>
<tr class="separator:a3185bd59b2f1eadd79528beb99baa4d6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a057132b6114ffffe9cf5266307727af1"><td class="memItemLeft" align="right" valign="top">static void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classELFIO_1_1dump.xhtml#a057132b6114ffffe9cf5266307727af1">segment_datas</a> (std::ostream &amp;out, const <a class="el" href="classELFIO_1_1elfio.xhtml">elfio</a> &amp;reader)</td></tr>
<tr class="separator:a057132b6114ffffe9cf5266307727af1"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-static-methods"></a>
Static Private Member Functions</h2></td></tr>
<tr class="memitem:afd3f40445fb3ece41e3e8b276c4f4073"><td class="memTemplParams" colspan="2">template&lt;typename T , typename K &gt; </td></tr>
<tr class="memitem:afd3f40445fb3ece41e3e8b276c4f4073"><td class="memTemplItemLeft" align="right" valign="top">static std::string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classELFIO_1_1dump.xhtml#afd3f40445fb3ece41e3e8b276c4f4073">find_value_in_table</a> (const T &amp;table, const K &amp;key)</td></tr>
<tr class="separator:afd3f40445fb3ece41e3e8b276c4f4073"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a31fa8d3df5e328ae55a15aebf2dbd4b2"><td class="memTemplParams" colspan="2">template&lt;typename T , typename K &gt; </td></tr>
<tr class="memitem:a31fa8d3df5e328ae55a15aebf2dbd4b2"><td class="memTemplItemLeft" align="right" valign="top">static std::string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classELFIO_1_1dump.xhtml#a31fa8d3df5e328ae55a15aebf2dbd4b2">format_assoc</a> (const T &amp;table, const K &amp;key)</td></tr>
<tr class="separator:a31fa8d3df5e328ae55a15aebf2dbd4b2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a71a5e807d51756c402a5ec46743b15d3"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:a71a5e807d51756c402a5ec46743b15d3"><td class="memTemplItemLeft" align="right" valign="top">static std::string&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classELFIO_1_1dump.xhtml#a71a5e807d51756c402a5ec46743b15d3">format_assoc</a> (const T &amp;table, const char key)</td></tr>
<tr class="separator:a71a5e807d51756c402a5ec46743b15d3"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a9f52208b5882183d479572c55960525f"><td class="memItemLeft" align="right" valign="top">static std::string&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classELFIO_1_1dump.xhtml#a9f52208b5882183d479572c55960525f">section_flags</a> (<a class="el" href="namespaceELFIO.xhtml#ad0fe06bd63d957a8fa08a227dc0dd9e3">Elf_Xword</a> flags)</td></tr>
<tr class="separator:a9f52208b5882183d479572c55960525f"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p>Definition at line <a class="el" href="elfio__dump_8hpp_source.xhtml#l00419">419</a> of file <a class="el" href="elfio__dump_8hpp_source.xhtml">elfio_dump.hpp</a>.</p>
</div><h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a3950958d72a3b5249d8a176e90fbfd10"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void ELFIO::dump::dynamic_tag </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classint.xhtml">int</a>&#160;</td>
          <td class="paramname"><em>no</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceELFIO.xhtml#ad0fe06bd63d957a8fa08a227dc0dd9e3">Elf_Xword</a>&#160;</td>
          <td class="paramname"><em>tag</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceELFIO.xhtml#ad0fe06bd63d957a8fa08a227dc0dd9e3">Elf_Xword</a>&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string&#160;</td>
          <td class="paramname"><em>str</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned&#160;</td>
          <td class="paramname"><em>int</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="elfio__dump_8hpp_source.xhtml#l00749">749</a> of file <a class="el" href="elfio__dump_8hpp_source.xhtml">elfio_dump.hpp</a>.</p>

<p>References <a class="el" href="elfio__dump_8hpp_source.xhtml#l00421">DUMP_DEC_FORMAT</a>, <a class="el" href="elfio__dump_8hpp_source.xhtml#l00423">DUMP_HEX_FORMAT</a>, and <a class="el" href="elfio__dump_8hpp_source.xhtml#l00425">DUMP_STR_FORMAT</a>.</p>

<p>Referenced by <a class="el" href="elfio__dump_8hpp_source.xhtml#l00718">dynamic_tags()</a>.</p>
<div class="fragment"><div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;    {</div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;            out &lt;&lt; <span class="stringliteral">&quot;[&quot;</span> </div>
<div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;                &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#a49feaad2b9222b8f6af410cb90f1c5eb">DUMP_DEC_FORMAT</a>(  5 ) &lt;&lt; no</div>
<div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;                &lt;&lt; <span class="stringliteral">&quot;] &quot;</span></div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;                &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#ac81f0355957e4378321330a3d20ec6e5">DUMP_STR_FORMAT</a>( 16 ) &lt;&lt; str_dynamic_tag( tag ) &lt;&lt; <span class="stringliteral">&quot; &quot;</span>;</div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;            <span class="keywordflow">if</span> ( str.empty() ) {</div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;                out &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#a9f8a0f482303ac55de390c0e22bb932d">DUMP_HEX_FORMAT</a>( 16 ) &lt;&lt; value                  &lt;&lt; <span class="stringliteral">&quot; &quot;</span>;</div>
<div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;            }</div>
<div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;            <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;                out &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#ac81f0355957e4378321330a3d20ec6e5">DUMP_STR_FORMAT</a>( 32 ) &lt;&lt; str                    &lt;&lt; <span class="stringliteral">&quot; &quot;</span>;</div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;            }</div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;            out &lt;&lt; std::endl;</div>
<div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;    }</div>
<div class="ttc" id="elfio__dump_8hpp_xhtml_ac81f0355957e4378321330a3d20ec6e5"><div class="ttname"><a href="elfio__dump_8hpp.xhtml#ac81f0355957e4378321330a3d20ec6e5">DUMP_STR_FORMAT</a></div><div class="ttdeci">#define DUMP_STR_FORMAT(width)</div><div class="ttdef"><b>Definition:</b> <a href="elfio__dump_8hpp_source.xhtml#l00425">elfio_dump.hpp:425</a></div></div>
<div class="ttc" id="elfio__dump_8hpp_xhtml_a9f8a0f482303ac55de390c0e22bb932d"><div class="ttname"><a href="elfio__dump_8hpp.xhtml#a9f8a0f482303ac55de390c0e22bb932d">DUMP_HEX_FORMAT</a></div><div class="ttdeci">#define DUMP_HEX_FORMAT(width)</div><div class="ttdef"><b>Definition:</b> <a href="elfio__dump_8hpp_source.xhtml#l00423">elfio_dump.hpp:423</a></div></div>
<div class="ttc" id="elfio__dump_8hpp_xhtml_a49feaad2b9222b8f6af410cb90f1c5eb"><div class="ttname"><a href="elfio__dump_8hpp.xhtml#a49feaad2b9222b8f6af410cb90f1c5eb">DUMP_DEC_FORMAT</a></div><div class="ttdeci">#define DUMP_DEC_FORMAT(width)</div><div class="ttdef"><b>Definition:</b> <a href="elfio__dump_8hpp_source.xhtml#l00421">elfio_dump.hpp:421</a></div></div>
</div><!-- fragment -->
<p><div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classELFIO_1_1dump_a3950958d72a3b5249d8a176e90fbfd10_icgraph.svg" width="432" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</p>

</div>
</div>
<a class="anchor" id="a86b6fd3d926ec4ffd27e266836adf600"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void ELFIO::dump::dynamic_tags </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classELFIO_1_1elfio.xhtml">elfio</a> &amp;&#160;</td>
          <td class="paramname"><em>reader</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="elfio__dump_8hpp_source.xhtml#l00718">718</a> of file <a class="el" href="elfio__dump_8hpp_source.xhtml">elfio_dump.hpp</a>.</p>

<p>References <a class="el" href="elf__types_8hpp_source.xhtml#l00497">DT_NULL</a>, <a class="el" href="elfio__dump_8hpp_source.xhtml#l00749">dynamic_tag()</a>, <a class="el" href="elfio__dynamic_8hpp_source.xhtml#l00041">ELFIO::dynamic_section_accessor::get_entries_num()</a>, <a class="el" href="elfio__dynamic_8hpp_source.xhtml#l00054">ELFIO::dynamic_section_accessor::get_entry()</a>, <a class="el" href="classELFIO_1_1elfio.xhtml#ac3304298a71603a89af5676c6bbce9de">ELFIO::elfio::sections</a>, <a class="el" href="elf__types_8hpp_source.xhtml#l00355">SHT_DYNAMIC</a>, and <a class="el" href="elfio_8hpp_source.xhtml#l00711">ELFIO::elfio::Sections::size()</a>.</p>
<div class="fragment"><div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;    {</div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;        <a class="code" href="namespaceELFIO.xhtml#a1cbef4f0d8fabbb57ce3507f3ee06e1a">Elf_Half</a> n = reader.sections.size();</div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;        <span class="keywordflow">for</span> ( <a class="code" href="namespaceELFIO.xhtml#a1cbef4f0d8fabbb57ce3507f3ee06e1a">Elf_Half</a> i = 0; i &lt; n; ++i ) {    <span class="comment">// For all sections</span></div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;            section* sec = reader.sections[i];</div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;            <span class="keywordflow">if</span> ( <a class="code" href="elf__types_8hpp.xhtml#a3a9278d12cf2c9e7eaca87688d0a6e37">SHT_DYNAMIC</a> == sec-&gt;get_type() ) {</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;                dynamic_section_accessor dynamic( reader, sec );</div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;</div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;                <a class="code" href="namespaceELFIO.xhtml#ad0fe06bd63d957a8fa08a227dc0dd9e3">Elf_Xword</a> dyn_no = dynamic.get_entries_num();</div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;                <span class="keywordflow">if</span> ( dyn_no &gt; 0 ) {</div>
<div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;                    out &lt;&lt; <span class="stringliteral">&quot;Dynamic section (&quot;</span> &lt;&lt; sec-&gt;get_name() &lt;&lt; <span class="stringliteral">&quot;)&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;                    out &lt;&lt; <span class="stringliteral">&quot;[  Nr ] Tag              Name/Value&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;                    <span class="keywordflow">for</span> ( <span class="keywordtype">int</span> i = 0; i &lt; dyn_no; ++i ) {</div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;                        <a class="code" href="namespaceELFIO.xhtml#ad0fe06bd63d957a8fa08a227dc0dd9e3">Elf_Xword</a>   tag   = 0;</div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;                        <a class="code" href="namespaceELFIO.xhtml#ad0fe06bd63d957a8fa08a227dc0dd9e3">Elf_Xword</a>   value = 0;</div>
<div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;                        std::string str;</div>
<div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;                        dynamic.get_entry( i, tag, value, str );</div>
<div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;                        <a class="code" href="classELFIO_1_1dump.xhtml#a3950958d72a3b5249d8a176e90fbfd10">dynamic_tag</a>( out, i, tag, value, str, reader.get_class() );</div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;                        <span class="keywordflow">if</span> ( <a class="code" href="elf__types_8hpp.xhtml#adeef14c6d411e415343fd616c16d1568">DT_NULL</a> == tag ) {</div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;                            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;                        }</div>
<div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;                    }</div>
<div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;</div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;                    out &lt;&lt; std::endl;</div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;                }</div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;            }</div>
<div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;        }</div>
<div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;    }</div>
<div class="ttc" id="namespaceELFIO_xhtml_ad0fe06bd63d957a8fa08a227dc0dd9e3"><div class="ttname"><a href="namespaceELFIO.xhtml#ad0fe06bd63d957a8fa08a227dc0dd9e3">ELFIO::Elf_Xword</a></div><div class="ttdeci">uint64_t Elf_Xword</div><div class="ttdef"><b>Definition:</b> <a href="elf__types_8hpp_source.xhtml#l00054">elf_types.hpp:54</a></div></div>
<div class="ttc" id="elf__types_8hpp_xhtml_adeef14c6d411e415343fd616c16d1568"><div class="ttname"><a href="elf__types_8hpp.xhtml#adeef14c6d411e415343fd616c16d1568">DT_NULL</a></div><div class="ttdeci">#define DT_NULL</div><div class="ttdef"><b>Definition:</b> <a href="elf__types_8hpp_source.xhtml#l00497">elf_types.hpp:497</a></div></div>
<div class="ttc" id="elf__types_8hpp_xhtml_a3a9278d12cf2c9e7eaca87688d0a6e37"><div class="ttname"><a href="elf__types_8hpp.xhtml#a3a9278d12cf2c9e7eaca87688d0a6e37">SHT_DYNAMIC</a></div><div class="ttdeci">#define SHT_DYNAMIC</div><div class="ttdef"><b>Definition:</b> <a href="elf__types_8hpp_source.xhtml#l00355">elf_types.hpp:355</a></div></div>
<div class="ttc" id="classELFIO_1_1dump_xhtml_a3950958d72a3b5249d8a176e90fbfd10"><div class="ttname"><a href="classELFIO_1_1dump.xhtml#a3950958d72a3b5249d8a176e90fbfd10">ELFIO::dump::dynamic_tag</a></div><div class="ttdeci">static void dynamic_tag(std::ostream &amp;out, int no, Elf_Xword tag, Elf_Xword value, std::string str, unsigned int)</div><div class="ttdef"><b>Definition:</b> <a href="elfio__dump_8hpp_source.xhtml#l00749">elfio_dump.hpp:749</a></div></div>
<div class="ttc" id="namespaceELFIO_xhtml_a1cbef4f0d8fabbb57ce3507f3ee06e1a"><div class="ttname"><a href="namespaceELFIO.xhtml#a1cbef4f0d8fabbb57ce3507f3ee06e1a">ELFIO::Elf_Half</a></div><div class="ttdeci">uint16_t Elf_Half</div><div class="ttdef"><b>Definition:</b> <a href="elf__types_8hpp_source.xhtml#l00051">elf_types.hpp:51</a></div></div>
</div><!-- fragment -->
<p><div id="dynsection-1" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="classELFIO_1_1dump_a86b6fd3d926ec4ffd27e266836adf600_cgraph.svg" width="100%" height="474"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>
</p>

</div>
</div>
<a class="anchor" id="afd3f40445fb3ece41e3e8b276c4f4073"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename K &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static std::string ELFIO::dump::find_value_in_table </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const K &amp;&#160;</td>
          <td class="paramname"><em>key</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="elfio__dump_8hpp_source.xhtml#l00875">875</a> of file <a class="el" href="elfio__dump_8hpp_source.xhtml">elfio_dump.hpp</a>.</p>

<p>Referenced by <a class="el" href="elfio__dump_8hpp_source.xhtml#l00893">format_assoc()</a>.</p>
<div class="fragment"><div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;    {</div>
<div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;        std::string res = <span class="stringliteral">&quot;?&quot;</span>;</div>
<div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;        <span class="keywordflow">for</span> ( <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i = 0; i &lt; <span class="keyword">sizeof</span>( table )/<span class="keyword">sizeof</span>( table[0] ); ++i ) {</div>
<div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;            <span class="keywordflow">if</span> ( table[i].key == key ) {</div>
<div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;                res = table[i].str;</div>
<div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;                <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;            }</div>
<div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;        }</div>
<div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;</div>
<div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;        <span class="keywordflow">return</span> res;</div>
<div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;    }</div>
</div><!-- fragment -->
<p><div id="dynsection-2" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-2-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-2-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-2-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classELFIO_1_1dump_afd3f40445fb3ece41e3e8b276c4f4073_icgraph.svg" width="568" height="51"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</p>

</div>
</div>
<a class="anchor" id="a31fa8d3df5e328ae55a15aebf2dbd4b2"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T , typename K &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static std::string ELFIO::dump::format_assoc </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const K &amp;&#160;</td>
          <td class="paramname"><em>key</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="elfio__dump_8hpp_source.xhtml#l00893">893</a> of file <a class="el" href="elfio__dump_8hpp_source.xhtml">elfio_dump.hpp</a>.</p>

<p>References <a class="el" href="elfio__dump_8hpp_source.xhtml#l00875">find_value_in_table()</a>.</p>

<p>Referenced by <a class="el" href="elfio__dump_8hpp_source.xhtml#l00910">format_assoc()</a>.</p>
<div class="fragment"><div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;    {</div>
<div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;        std::string str = <a class="code" href="classELFIO_1_1dump.xhtml#afd3f40445fb3ece41e3e8b276c4f4073">find_value_in_table</a>( table, key );</div>
<div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;        <span class="keywordflow">if</span> ( str == <span class="stringliteral">&quot;?&quot;</span> ) {</div>
<div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;            std::ostringstream oss;</div>
<div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;            oss &lt;&lt; str &lt;&lt; <span class="stringliteral">&quot; (0x&quot;</span> &lt;&lt; std::hex &lt;&lt; key &lt;&lt; <span class="stringliteral">&quot;)&quot;</span>;</div>
<div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;            str = oss.str();</div>
<div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;        }</div>
<div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;</div>
<div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;        <span class="keywordflow">return</span> str;</div>
<div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;    }</div>
<div class="ttc" id="classELFIO_1_1dump_xhtml_afd3f40445fb3ece41e3e8b276c4f4073"><div class="ttname"><a href="classELFIO_1_1dump.xhtml#afd3f40445fb3ece41e3e8b276c4f4073">ELFIO::dump::find_value_in_table</a></div><div class="ttdeci">static std::string find_value_in_table(const T &amp;table, const K &amp;key)</div><div class="ttdef"><b>Definition:</b> <a href="elfio__dump_8hpp_source.xhtml#l00875">elfio_dump.hpp:875</a></div></div>
</div><!-- fragment -->
<p><div id="dynsection-3" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-3-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-3-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-3-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classELFIO_1_1dump_a31fa8d3df5e328ae55a15aebf2dbd4b2_cgraph.svg" width="374" height="51"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</p>

<p><div id="dynsection-4" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-4-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-4-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-4-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classELFIO_1_1dump_a31fa8d3df5e328ae55a15aebf2dbd4b2_icgraph.svg" width="352" height="51"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</p>

</div>
</div>
<a class="anchor" id="a71a5e807d51756c402a5ec46743b15d3"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static std::string ELFIO::dump::format_assoc </td>
          <td>(</td>
          <td class="paramtype">const T &amp;&#160;</td>
          <td class="paramname"><em>table</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const char&#160;</td>
          <td class="paramname"><em>key</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="elfio__dump_8hpp_source.xhtml#l00910">910</a> of file <a class="el" href="elfio__dump_8hpp_source.xhtml">elfio_dump.hpp</a>.</p>

<p>References <a class="el" href="elfio__dump_8hpp_source.xhtml#l00893">format_assoc()</a>.</p>
<div class="fragment"><div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;    {</div>
<div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classELFIO_1_1dump.xhtml#a31fa8d3df5e328ae55a15aebf2dbd4b2">format_assoc</a>( table, (<span class="keyword">const</span> <span class="keywordtype">int</span>)key );</div>
<div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;    }</div>
<div class="ttc" id="classELFIO_1_1dump_xhtml_a31fa8d3df5e328ae55a15aebf2dbd4b2"><div class="ttname"><a href="classELFIO_1_1dump.xhtml#a31fa8d3df5e328ae55a15aebf2dbd4b2">ELFIO::dump::format_assoc</a></div><div class="ttdeci">static std::string format_assoc(const T &amp;table, const K &amp;key)</div><div class="ttdef"><b>Definition:</b> <a href="elfio__dump_8hpp_source.xhtml#l00893">elfio_dump.hpp:893</a></div></div>
</div><!-- fragment -->
<p><div id="dynsection-5" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-5-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-5-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-5-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classELFIO_1_1dump_a71a5e807d51756c402a5ec46743b15d3_cgraph.svg" width="568" height="51"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</p>

</div>
</div>
<a class="anchor" id="a16ee3f884fdff1bfd87d2513543b4d39"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void ELFIO::dump::header </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classELFIO_1_1elfio.xhtml">elfio</a> &amp;&#160;</td>
          <td class="paramname"><em>reader</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="elfio__dump_8hpp_source.xhtml#l00431">431</a> of file <a class="el" href="elfio__dump_8hpp_source.xhtml">elfio_dump.hpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;    {</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;        out &lt;&lt; <span class="stringliteral">&quot;ELF Header&quot;</span>     &lt;&lt; std::endl                               &lt;&lt; std::endl</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;            &lt;&lt; <span class="stringliteral">&quot;  Class:      &quot;</span> &lt;&lt; str_class( reader.get_class() )         &lt;&lt; std::endl</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;            &lt;&lt; <span class="stringliteral">&quot;  Encoding:   &quot;</span> &lt;&lt; str_endian( reader.get_encoding() )     &lt;&lt; std::endl</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;            &lt;&lt; <span class="stringliteral">&quot;  ELFVersion: &quot;</span> &lt;&lt; str_version( reader.get_elf_version() ) &lt;&lt; std::endl</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;            &lt;&lt; <span class="stringliteral">&quot;  Type:       &quot;</span> &lt;&lt; str_type( reader.get_type() )           &lt;&lt; std::endl</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;            &lt;&lt; <span class="stringliteral">&quot;  Machine:    &quot;</span> &lt;&lt; str_machine( reader.get_machine() )     &lt;&lt; std::endl</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;            &lt;&lt; <span class="stringliteral">&quot;  Version:    &quot;</span> &lt;&lt; str_version( reader.get_version() )     &lt;&lt; std::endl</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;            &lt;&lt; <span class="stringliteral">&quot;  Entry:      &quot;</span> &lt;&lt; <span class="stringliteral">&quot;0x&quot;</span> &lt;&lt; std::hex &lt;&lt; reader.get_entry()  &lt;&lt; std::endl</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;            &lt;&lt; <span class="stringliteral">&quot;  Flags:      &quot;</span> &lt;&lt; <span class="stringliteral">&quot;0x&quot;</span> &lt;&lt; std::hex &lt;&lt; reader.get_flags()  &lt;&lt; std::endl</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;            &lt;&lt; std::endl;</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    }</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a056b95608d0bf7b982c5601713e7ad52"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void ELFIO::dump::note </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classint.xhtml">int</a>&#160;</td>
          <td class="paramname"><em>no</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceELFIO.xhtml#a7dfc604e0cf71b4a1f80a46af67d57fc">Elf_Word</a>&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="elfio__dump_8hpp_source.xhtml#l00703">703</a> of file <a class="el" href="elfio__dump_8hpp_source.xhtml">elfio_dump.hpp</a>.</p>

<p>References <a class="el" href="elfio__dump_8hpp_source.xhtml#l00421">DUMP_DEC_FORMAT</a>, <a class="el" href="elfio__dump_8hpp_source.xhtml#l00423">DUMP_HEX_FORMAT</a>, and <a class="el" href="elfio__dump_8hpp_source.xhtml#l00425">DUMP_STR_FORMAT</a>.</p>

<p>Referenced by <a class="el" href="elfio__dump_8hpp_source.xhtml#l00671">notes()</a>.</p>
<div class="fragment"><div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;    {</div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;        out &lt;&lt; <span class="stringliteral">&quot;  [&quot;</span> </div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;            &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#a49feaad2b9222b8f6af410cb90f1c5eb">DUMP_DEC_FORMAT</a>( 2 ) &lt;&lt; no</div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;            &lt;&lt; <span class="stringliteral">&quot;] &quot;</span></div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;            &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#a9f8a0f482303ac55de390c0e22bb932d">DUMP_HEX_FORMAT</a>( 8 ) &lt;&lt; type &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;            &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#ac81f0355957e4378321330a3d20ec6e5">DUMP_STR_FORMAT</a>( 1 ) &lt;&lt; name</div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;            &lt;&lt; std::endl;</div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;    }</div>
<div class="ttc" id="elfio__dump_8hpp_xhtml_ac81f0355957e4378321330a3d20ec6e5"><div class="ttname"><a href="elfio__dump_8hpp.xhtml#ac81f0355957e4378321330a3d20ec6e5">DUMP_STR_FORMAT</a></div><div class="ttdeci">#define DUMP_STR_FORMAT(width)</div><div class="ttdef"><b>Definition:</b> <a href="elfio__dump_8hpp_source.xhtml#l00425">elfio_dump.hpp:425</a></div></div>
<div class="ttc" id="elfio__dump_8hpp_xhtml_a9f8a0f482303ac55de390c0e22bb932d"><div class="ttname"><a href="elfio__dump_8hpp.xhtml#a9f8a0f482303ac55de390c0e22bb932d">DUMP_HEX_FORMAT</a></div><div class="ttdeci">#define DUMP_HEX_FORMAT(width)</div><div class="ttdef"><b>Definition:</b> <a href="elfio__dump_8hpp_source.xhtml#l00423">elfio_dump.hpp:423</a></div></div>
<div class="ttc" id="elfio__dump_8hpp_xhtml_a49feaad2b9222b8f6af410cb90f1c5eb"><div class="ttname"><a href="elfio__dump_8hpp.xhtml#a49feaad2b9222b8f6af410cb90f1c5eb">DUMP_DEC_FORMAT</a></div><div class="ttdeci">#define DUMP_DEC_FORMAT(width)</div><div class="ttdef"><b>Definition:</b> <a href="elfio__dump_8hpp_source.xhtml#l00421">elfio_dump.hpp:421</a></div></div>
</div><!-- fragment -->
<p><div id="dynsection-6" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-6-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-6-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-6-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classELFIO_1_1dump_a056b95608d0bf7b982c5601713e7ad52_icgraph.svg" width="334" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</p>

</div>
</div>
<a class="anchor" id="a9f3f44fe3ed3d5d88efd6f7229baa0e0"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void ELFIO::dump::notes </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classELFIO_1_1elfio.xhtml">elfio</a> &amp;&#160;</td>
          <td class="paramname"><em>reader</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="elfio__dump_8hpp_source.xhtml#l00671">671</a> of file <a class="el" href="elfio__dump_8hpp_source.xhtml">elfio_dump.hpp</a>.</p>

<p>References <a class="el" href="elfio__note_8hpp_source.xhtml#l00048">ELFIO::note_section_accessor::get_note()</a>, <a class="el" href="elfio__note_8hpp_source.xhtml#l00041">ELFIO::note_section_accessor::get_notes_num()</a>, <a class="el" href="elfio__dump_8hpp_source.xhtml#l00703">note()</a>, <a class="el" href="classELFIO_1_1elfio.xhtml#ac3304298a71603a89af5676c6bbce9de">ELFIO::elfio::sections</a>, <a class="el" href="elf__types_8hpp_source.xhtml#l00356">SHT_NOTE</a>, and <a class="el" href="elfio_8hpp_source.xhtml#l00711">ELFIO::elfio::Sections::size()</a>.</p>
<div class="fragment"><div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;    {</div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;        <a class="code" href="namespaceELFIO.xhtml#a1cbef4f0d8fabbb57ce3507f3ee06e1a">Elf_Half</a> no = reader.sections.size();</div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;        <span class="keywordflow">for</span> ( <a class="code" href="namespaceELFIO.xhtml#a1cbef4f0d8fabbb57ce3507f3ee06e1a">Elf_Half</a> i = 0; i &lt; no; ++i ) {                 <span class="comment">// For all sections</span></div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;            section* sec = reader.sections[i];</div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;            <span class="keywordflow">if</span> ( <a class="code" href="elf__types_8hpp.xhtml#a65506a79f0e972c851851af7b1008d94">SHT_NOTE</a> == sec-&gt;get_type() ) {              <span class="comment">// Look at notes</span></div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;                note_section_accessor <a class="code" href="classELFIO_1_1dump.xhtml#a9f3f44fe3ed3d5d88efd6f7229baa0e0">notes</a>( reader, sec );</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;                <span class="keywordtype">int</span> no_notes = <a class="code" href="classELFIO_1_1dump.xhtml#a9f3f44fe3ed3d5d88efd6f7229baa0e0">notes</a>.get_notes_num();</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;                <span class="keywordflow">if</span> ( no &gt; 0 ) {</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;                    out &lt;&lt; <span class="stringliteral">&quot;Note section (&quot;</span> &lt;&lt; sec-&gt;get_name() &lt;&lt; <span class="stringliteral">&quot;)&quot;</span> &lt;&lt; std::endl</div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;                        &lt;&lt; <span class="stringliteral">&quot;    No Type     Name&quot;</span></div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;                        &lt;&lt; std::endl;</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;                    <span class="keywordflow">for</span> ( <span class="keywordtype">int</span> j = 0; j &lt; no_notes; ++j ) {    <span class="comment">// For all notes</span></div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;                        <a class="code" href="namespaceELFIO.xhtml#a7dfc604e0cf71b4a1f80a46af67d57fc">Elf_Word</a>    type;</div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;                        std::string name;</div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;                        <span class="keywordtype">void</span>*       desc;</div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;                        <a class="code" href="namespaceELFIO.xhtml#a7dfc604e0cf71b4a1f80a46af67d57fc">Elf_Word</a>    descsz;</div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;                    </div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;                        <a class="code" href="classELFIO_1_1dump.xhtml#a9f3f44fe3ed3d5d88efd6f7229baa0e0">notes</a>.get_note( j, type, name, desc, descsz );</div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;                        <span class="comment">// &#39;name&#39; usually contains \0 at the end. Try to fix it</span></div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;                        name = name.c_str();</div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;                        <a class="code" href="classELFIO_1_1dump.xhtml#a056b95608d0bf7b982c5601713e7ad52">note</a>( out, j, type, name );</div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;                    }</div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;                    </div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;                    out &lt;&lt; std::endl;</div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;                }</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;            }</div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;        }</div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;    }</div>
<div class="ttc" id="elf__types_8hpp_xhtml_a65506a79f0e972c851851af7b1008d94"><div class="ttname"><a href="elf__types_8hpp.xhtml#a65506a79f0e972c851851af7b1008d94">SHT_NOTE</a></div><div class="ttdeci">#define SHT_NOTE</div><div class="ttdef"><b>Definition:</b> <a href="elf__types_8hpp_source.xhtml#l00356">elf_types.hpp:356</a></div></div>
<div class="ttc" id="classELFIO_1_1dump_xhtml_a9f3f44fe3ed3d5d88efd6f7229baa0e0"><div class="ttname"><a href="classELFIO_1_1dump.xhtml#a9f3f44fe3ed3d5d88efd6f7229baa0e0">ELFIO::dump::notes</a></div><div class="ttdeci">static void notes(std::ostream &amp;out, const elfio &amp;reader)</div><div class="ttdef"><b>Definition:</b> <a href="elfio__dump_8hpp_source.xhtml#l00671">elfio_dump.hpp:671</a></div></div>
<div class="ttc" id="classELFIO_1_1dump_xhtml_a056b95608d0bf7b982c5601713e7ad52"><div class="ttname"><a href="classELFIO_1_1dump.xhtml#a056b95608d0bf7b982c5601713e7ad52">ELFIO::dump::note</a></div><div class="ttdeci">static void note(std::ostream &amp;out, int no, Elf_Word type, const std::string &amp;name)</div><div class="ttdef"><b>Definition:</b> <a href="elfio__dump_8hpp_source.xhtml#l00703">elfio_dump.hpp:703</a></div></div>
<div class="ttc" id="namespaceELFIO_xhtml_a7dfc604e0cf71b4a1f80a46af67d57fc"><div class="ttname"><a href="namespaceELFIO.xhtml#a7dfc604e0cf71b4a1f80a46af67d57fc">ELFIO::Elf_Word</a></div><div class="ttdeci">uint32_t Elf_Word</div><div class="ttdef"><b>Definition:</b> <a href="elf__types_8hpp_source.xhtml#l00052">elf_types.hpp:52</a></div></div>
<div class="ttc" id="namespaceELFIO_xhtml_a1cbef4f0d8fabbb57ce3507f3ee06e1a"><div class="ttname"><a href="namespaceELFIO.xhtml#a1cbef4f0d8fabbb57ce3507f3ee06e1a">ELFIO::Elf_Half</a></div><div class="ttdeci">uint16_t Elf_Half</div><div class="ttdef"><b>Definition:</b> <a href="elf__types_8hpp_source.xhtml#l00051">elf_types.hpp:51</a></div></div>
</div><!-- fragment -->
<p><div id="dynsection-7" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-7-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-7-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-7-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classELFIO_1_1dump_a9f3f44fe3ed3d5d88efd6f7229baa0e0_cgraph.svg" width="606" height="252"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</p>

</div>
</div>
<a class="anchor" id="a97b27bf46ba4ac7addf47f32cc35af96"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void ELFIO::dump::section_data </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classELFIO_1_1section.xhtml">section</a> *&#160;</td>
          <td class="paramname"><em>sec</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="elfio__dump_8hpp_source.xhtml#l00771">771</a> of file <a class="el" href="elfio__dump_8hpp_source.xhtml">elfio_dump.hpp</a>.</p>

<p>References <a class="el" href="elfio__dump_8hpp_source.xhtml#l00423">DUMP_HEX_FORMAT</a>, and <a class="el" href="classELFIO_1_1section.xhtml#accfaef20485ee803990b260130022bd2">ELFIO::section::get_data()</a>.</p>

<p>Referenced by <a class="el" href="elfio__dump_8hpp_source.xhtml#l00800">section_datas()</a>.</p>
<div class="fragment"><div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;    {</div>
<div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;        std::ios_base::fmtflags original_flags = out.flags();</div>
<div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;</div>
<div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;        out &lt;&lt; sec-&gt;get_name() &lt;&lt; std::endl;</div>
<div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">char</span>* pdata = sec-&gt;get_data();</div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;        <a class="code" href="namespaceELFIO.xhtml#ad0fe06bd63d957a8fa08a227dc0dd9e3">ELFIO::Elf_Xword</a> i;</div>
<div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;        <span class="keywordflow">for</span> ( i = 0; i &lt; std::min( sec-&gt;get_size(), MAX_DATA_ENTRIES ); ++i ) {</div>
<div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;            <span class="keywordflow">if</span> ( i % 16 == 0 ) {</div>
<div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;                out &lt;&lt; <span class="stringliteral">&quot;[&quot;</span> &lt;&lt;  <a class="code" href="elfio__dump_8hpp.xhtml#a9f8a0f482303ac55de390c0e22bb932d">DUMP_HEX_FORMAT</a>( 8 ) &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot;]&quot;</span>;</div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;            }</div>
<div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;</div>
<div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;            out &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#a9f8a0f482303ac55de390c0e22bb932d">DUMP_HEX_FORMAT</a>( 2 ) &lt;&lt; ( pdata[i] &amp; 0x000000FF );</div>
<div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;</div>
<div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;            <span class="keywordflow">if</span> ( i % 16 == 15 ) {</div>
<div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;                out &lt;&lt; std::endl;</div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;            }</div>
<div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;        }</div>
<div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;        <span class="keywordflow">if</span> ( i % 16 != 0 ) {</div>
<div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;            out &lt;&lt; std::endl;</div>
<div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;        }</div>
<div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;</div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;        out.flags(original_flags);</div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;</div>
<div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;        <span class="keywordflow">return</span>; </div>
<div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;    }</div>
<div class="ttc" id="elfio__dump_8hpp_xhtml_a9f8a0f482303ac55de390c0e22bb932d"><div class="ttname"><a href="elfio__dump_8hpp.xhtml#a9f8a0f482303ac55de390c0e22bb932d">DUMP_HEX_FORMAT</a></div><div class="ttdeci">#define DUMP_HEX_FORMAT(width)</div><div class="ttdef"><b>Definition:</b> <a href="elfio__dump_8hpp_source.xhtml#l00423">elfio_dump.hpp:423</a></div></div>
<div class="ttc" id="namespaceELFIO_xhtml_ad0fe06bd63d957a8fa08a227dc0dd9e3"><div class="ttname"><a href="namespaceELFIO.xhtml#ad0fe06bd63d957a8fa08a227dc0dd9e3">ELFIO::Elf_Xword</a></div><div class="ttdeci">uint64_t Elf_Xword</div><div class="ttdef"><b>Definition:</b> <a href="elf__types_8hpp_source.xhtml#l00054">elf_types.hpp:54</a></div></div>
</div><!-- fragment -->
<p><div id="dynsection-8" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-8-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-8-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-8-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classELFIO_1_1dump_a97b27bf46ba4ac7addf47f32cc35af96_cgraph.svg" width="411" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</p>

<p><div id="dynsection-9" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-9-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-9-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-9-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classELFIO_1_1dump_a97b27bf46ba4ac7addf47f32cc35af96_icgraph.svg" width="395" height="51"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</p>

</div>
</div>
<a class="anchor" id="a7174e9f611a14c0b561a5c2ca7a9d340"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void ELFIO::dump::section_datas </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classELFIO_1_1elfio.xhtml">elfio</a> &amp;&#160;</td>
          <td class="paramname"><em>reader</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="elfio__dump_8hpp_source.xhtml#l00800">800</a> of file <a class="el" href="elfio__dump_8hpp_source.xhtml">elfio_dump.hpp</a>.</p>

<p>References <a class="el" href="elfio__dump_8hpp_source.xhtml#l00771">section_data()</a>, <a class="el" href="classELFIO_1_1elfio.xhtml#ac3304298a71603a89af5676c6bbce9de">ELFIO::elfio::sections</a>, <a class="el" href="elf__types_8hpp_source.xhtml#l00357">SHT_NOBITS</a>, and <a class="el" href="elfio_8hpp_source.xhtml#l00711">ELFIO::elfio::Sections::size()</a>.</p>
<div class="fragment"><div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;    {</div>
<div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;        <a class="code" href="namespaceELFIO.xhtml#a1cbef4f0d8fabbb57ce3507f3ee06e1a">Elf_Half</a> n = reader.sections.size();</div>
<div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;</div>
<div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;        <span class="keywordflow">if</span> ( n == 0 ) {</div>
<div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;            <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;        }</div>
<div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;</div>
<div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;        out &lt;&lt; <span class="stringliteral">&quot;Section Data:&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;</div>
<div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;        <span class="keywordflow">for</span> ( <a class="code" href="namespaceELFIO.xhtml#a1cbef4f0d8fabbb57ce3507f3ee06e1a">Elf_Half</a> i = 1; i &lt; n; ++i ) { <span class="comment">// For all sections</span></div>
<div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;            section* sec = reader.sections[i];</div>
<div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;            <span class="keywordflow">if</span> ( sec-&gt;get_type() == <a class="code" href="elf__types_8hpp.xhtml#a820ff00317949be2ea1fd634a17dc13e">SHT_NOBITS</a> ) {</div>
<div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;                <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;            }</div>
<div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;            <a class="code" href="classELFIO_1_1dump.xhtml#a97b27bf46ba4ac7addf47f32cc35af96">section_data</a>( out, sec );</div>
<div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;        }</div>
<div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;</div>
<div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;        out &lt;&lt; std::endl;</div>
<div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;    }</div>
<div class="ttc" id="elf__types_8hpp_xhtml_a820ff00317949be2ea1fd634a17dc13e"><div class="ttname"><a href="elf__types_8hpp.xhtml#a820ff00317949be2ea1fd634a17dc13e">SHT_NOBITS</a></div><div class="ttdeci">#define SHT_NOBITS</div><div class="ttdef"><b>Definition:</b> <a href="elf__types_8hpp_source.xhtml#l00357">elf_types.hpp:357</a></div></div>
<div class="ttc" id="namespaceELFIO_xhtml_a1cbef4f0d8fabbb57ce3507f3ee06e1a"><div class="ttname"><a href="namespaceELFIO.xhtml#a1cbef4f0d8fabbb57ce3507f3ee06e1a">ELFIO::Elf_Half</a></div><div class="ttdeci">uint16_t Elf_Half</div><div class="ttdef"><b>Definition:</b> <a href="elf__types_8hpp_source.xhtml#l00051">elf_types.hpp:51</a></div></div>
<div class="ttc" id="classELFIO_1_1dump_xhtml_a97b27bf46ba4ac7addf47f32cc35af96"><div class="ttname"><a href="classELFIO_1_1dump.xhtml#a97b27bf46ba4ac7addf47f32cc35af96">ELFIO::dump::section_data</a></div><div class="ttdeci">static void section_data(std::ostream &amp;out, const section *sec)</div><div class="ttdef"><b>Definition:</b> <a href="elfio__dump_8hpp_source.xhtml#l00771">elfio_dump.hpp:771</a></div></div>
</div><!-- fragment -->
<p><div id="dynsection-10" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-10-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-10-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-10-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classELFIO_1_1dump_a7174e9f611a14c0b561a5c2ca7a9d340_cgraph.svg" width="611" height="103"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</p>

</div>
</div>
<a class="anchor" id="a9f52208b5882183d479572c55960525f"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static std::string ELFIO::dump::section_flags </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="namespaceELFIO.xhtml#ad0fe06bd63d957a8fa08a227dc0dd9e3">Elf_Xword</a>&#160;</td>
          <td class="paramname"><em>flags</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="elfio__dump_8hpp_source.xhtml#l00919">919</a> of file <a class="el" href="elfio__dump_8hpp_source.xhtml">elfio_dump.hpp</a>.</p>

<p>References <a class="el" href="elf__types_8hpp_source.xhtml#l00375">SHF_ALLOC</a>, <a class="el" href="elf__types_8hpp_source.xhtml#l00376">SHF_EXECINSTR</a>, and <a class="el" href="elf__types_8hpp_source.xhtml#l00374">SHF_WRITE</a>.</p>

<p>Referenced by <a class="el" href="elfio__dump_8hpp_source.xhtml#l00475">section_header()</a>.</p>
<div class="fragment"><div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;    {</div>
<div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;        std::string ret = <span class="stringliteral">&quot;&quot;</span>;</div>
<div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;        <span class="keywordflow">if</span> ( flags &amp; <a class="code" href="elf__types_8hpp.xhtml#a025c79223b0fee4676337d660f76b59b">SHF_WRITE</a> ) {</div>
<div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;            ret += <span class="stringliteral">&quot;W&quot;</span>;</div>
<div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;        }</div>
<div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;        <span class="keywordflow">if</span> ( flags &amp; <a class="code" href="elf__types_8hpp.xhtml#a38476fe4ed88ac83ba86a4e103199a86">SHF_ALLOC</a> ) {</div>
<div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;            ret += <span class="stringliteral">&quot;A&quot;</span>;</div>
<div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;        }</div>
<div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;        <span class="keywordflow">if</span> ( flags &amp; <a class="code" href="elf__types_8hpp.xhtml#ab3780594e35fbbc6e5028bcb921d0a76">SHF_EXECINSTR</a> ) {</div>
<div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;            ret += <span class="stringliteral">&quot;X&quot;</span>;</div>
<div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;        }</div>
<div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;</div>
<div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;        <span class="keywordflow">return</span> ret;</div>
<div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;    }</div>
<div class="ttc" id="elf__types_8hpp_xhtml_ab3780594e35fbbc6e5028bcb921d0a76"><div class="ttname"><a href="elf__types_8hpp.xhtml#ab3780594e35fbbc6e5028bcb921d0a76">SHF_EXECINSTR</a></div><div class="ttdeci">#define SHF_EXECINSTR</div><div class="ttdef"><b>Definition:</b> <a href="elf__types_8hpp_source.xhtml#l00376">elf_types.hpp:376</a></div></div>
<div class="ttc" id="elf__types_8hpp_xhtml_a38476fe4ed88ac83ba86a4e103199a86"><div class="ttname"><a href="elf__types_8hpp.xhtml#a38476fe4ed88ac83ba86a4e103199a86">SHF_ALLOC</a></div><div class="ttdeci">#define SHF_ALLOC</div><div class="ttdef"><b>Definition:</b> <a href="elf__types_8hpp_source.xhtml#l00375">elf_types.hpp:375</a></div></div>
<div class="ttc" id="elf__types_8hpp_xhtml_a025c79223b0fee4676337d660f76b59b"><div class="ttname"><a href="elf__types_8hpp.xhtml#a025c79223b0fee4676337d660f76b59b">SHF_WRITE</a></div><div class="ttdeci">#define SHF_WRITE</div><div class="ttdef"><b>Definition:</b> <a href="elf__types_8hpp_source.xhtml#l00374">elf_types.hpp:374</a></div></div>
</div><!-- fragment -->
<p><div id="dynsection-11" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-11-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-11-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-11-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classELFIO_1_1dump_a9f52208b5882183d479572c55960525f_icgraph.svg" width="563" height="51"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</p>

</div>
</div>
<a class="anchor" id="a5a8ef9b856de2e1b0447ee6a74fd98d9"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void ELFIO::dump::section_header </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceELFIO.xhtml#a1cbef4f0d8fabbb57ce3507f3ee06e1a">Elf_Half</a>&#160;</td>
          <td class="paramname"><em>no</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classELFIO_1_1section.xhtml">section</a> *&#160;</td>
          <td class="paramname"><em>sec</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned char&#160;</td>
          <td class="paramname"><em>elf_class</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="elfio__dump_8hpp_source.xhtml#l00475">475</a> of file <a class="el" href="elfio__dump_8hpp_source.xhtml">elfio_dump.hpp</a>.</p>

<p>References <a class="el" href="elfio__dump_8hpp_source.xhtml#l00421">DUMP_DEC_FORMAT</a>, <a class="el" href="elfio__dump_8hpp_source.xhtml#l00423">DUMP_HEX_FORMAT</a>, <a class="el" href="elfio__dump_8hpp_source.xhtml#l00425">DUMP_STR_FORMAT</a>, <a class="el" href="elf__types_8hpp_source.xhtml#l00305">ELFCLASS32</a>, and <a class="el" href="elfio__dump_8hpp_source.xhtml#l00919">section_flags()</a>.</p>

<p>Referenced by <a class="el" href="elfio__dump_8hpp_source.xhtml#l00447">section_headers()</a>.</p>
<div class="fragment"><div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;    {</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;        std::ios_base::fmtflags original_flags = out.flags();</div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;        <span class="keywordflow">if</span> ( elf_class == <a class="code" href="elf__types_8hpp.xhtml#a5f84b1bf6e07374d6289eab3d8c57f1c">ELFCLASS32</a> ) { <span class="comment">// Output for 32-bit</span></div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;            out &lt;&lt; <span class="stringliteral">&quot;[&quot;</span> </div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;                &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#a49feaad2b9222b8f6af410cb90f1c5eb">DUMP_DEC_FORMAT</a>(  5 ) &lt;&lt; no</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;                &lt;&lt; <span class="stringliteral">&quot;] &quot;</span></div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;                &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#ac81f0355957e4378321330a3d20ec6e5">DUMP_STR_FORMAT</a>( 17 ) &lt;&lt; str_section_type( sec-&gt;get_type() ) &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;                &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#a9f8a0f482303ac55de390c0e22bb932d">DUMP_HEX_FORMAT</a>(  8 ) &lt;&lt; sec-&gt;get_address()                  &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;                &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#a9f8a0f482303ac55de390c0e22bb932d">DUMP_HEX_FORMAT</a>(  8 ) &lt;&lt; sec-&gt;get_size()                     &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;                &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#a9f8a0f482303ac55de390c0e22bb932d">DUMP_HEX_FORMAT</a>(  2 ) &lt;&lt; sec-&gt;get_entry_size()               &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;                &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#ac81f0355957e4378321330a3d20ec6e5">DUMP_STR_FORMAT</a>(  3 ) &lt;&lt; <a class="code" href="classELFIO_1_1dump.xhtml#a9f52208b5882183d479572c55960525f">section_flags</a>( sec-&gt;get_flags() )   &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;                &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#a9f8a0f482303ac55de390c0e22bb932d">DUMP_HEX_FORMAT</a>(  2 ) &lt;&lt; sec-&gt;get_link()                     &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;                &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#a9f8a0f482303ac55de390c0e22bb932d">DUMP_HEX_FORMAT</a>(  3 ) &lt;&lt; sec-&gt;get_info()                     &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;                &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#a9f8a0f482303ac55de390c0e22bb932d">DUMP_HEX_FORMAT</a>(  2 ) &lt;&lt; sec-&gt;get_addr_align()               &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;                &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#ac81f0355957e4378321330a3d20ec6e5">DUMP_STR_FORMAT</a>( 17 ) &lt;&lt; sec-&gt;get_name()                     &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;                &lt;&lt; std::endl;</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;        }</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;        <span class="keywordflow">else</span> {                           <span class="comment">// Output for 64-bit</span></div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;            out &lt;&lt; <span class="stringliteral">&quot;[&quot;</span> </div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;                &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#a49feaad2b9222b8f6af410cb90f1c5eb">DUMP_DEC_FORMAT</a>(  5 ) &lt;&lt; no</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;                &lt;&lt; <span class="stringliteral">&quot;] &quot;</span></div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;                &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#ac81f0355957e4378321330a3d20ec6e5">DUMP_STR_FORMAT</a>( 17 ) &lt;&lt; str_section_type( sec-&gt;get_type() ) &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;                &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#a9f8a0f482303ac55de390c0e22bb932d">DUMP_HEX_FORMAT</a>( 16 ) &lt;&lt; sec-&gt;get_address()                  &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;                &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#a9f8a0f482303ac55de390c0e22bb932d">DUMP_HEX_FORMAT</a>( 16 ) &lt;&lt; sec-&gt;get_size()                     &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;                &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#a9f8a0f482303ac55de390c0e22bb932d">DUMP_HEX_FORMAT</a>(  4 ) &lt;&lt; sec-&gt;get_entry_size()               &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;                &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#ac81f0355957e4378321330a3d20ec6e5">DUMP_STR_FORMAT</a>(  3 ) &lt;&lt; <a class="code" href="classELFIO_1_1dump.xhtml#a9f52208b5882183d479572c55960525f">section_flags</a>( sec-&gt;get_flags() )   &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;                &lt;&lt; std::endl</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;                &lt;&lt; <span class="stringliteral">&quot;        &quot;</span></div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;                &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#a9f8a0f482303ac55de390c0e22bb932d">DUMP_HEX_FORMAT</a>(  4 ) &lt;&lt; sec-&gt;get_link()                     &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;                &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#a9f8a0f482303ac55de390c0e22bb932d">DUMP_HEX_FORMAT</a>(  4 ) &lt;&lt; sec-&gt;get_info()                     &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;                &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#a9f8a0f482303ac55de390c0e22bb932d">DUMP_HEX_FORMAT</a>(  4 ) &lt;&lt; sec-&gt;get_addr_align()               &lt;&lt; <span class="stringliteral">&quot;    &quot;</span></div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;                &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#ac81f0355957e4378321330a3d20ec6e5">DUMP_STR_FORMAT</a>( 17 ) &lt;&lt; sec-&gt;get_name()                     &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;                &lt;&lt; std::endl;</div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;        }</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;        out.flags(original_flags);</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;        <span class="keywordflow">return</span>; </div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;    }</div>
<div class="ttc" id="elfio__dump_8hpp_xhtml_ac81f0355957e4378321330a3d20ec6e5"><div class="ttname"><a href="elfio__dump_8hpp.xhtml#ac81f0355957e4378321330a3d20ec6e5">DUMP_STR_FORMAT</a></div><div class="ttdeci">#define DUMP_STR_FORMAT(width)</div><div class="ttdef"><b>Definition:</b> <a href="elfio__dump_8hpp_source.xhtml#l00425">elfio_dump.hpp:425</a></div></div>
<div class="ttc" id="elfio__dump_8hpp_xhtml_a9f8a0f482303ac55de390c0e22bb932d"><div class="ttname"><a href="elfio__dump_8hpp.xhtml#a9f8a0f482303ac55de390c0e22bb932d">DUMP_HEX_FORMAT</a></div><div class="ttdeci">#define DUMP_HEX_FORMAT(width)</div><div class="ttdef"><b>Definition:</b> <a href="elfio__dump_8hpp_source.xhtml#l00423">elfio_dump.hpp:423</a></div></div>
<div class="ttc" id="classELFIO_1_1dump_xhtml_a9f52208b5882183d479572c55960525f"><div class="ttname"><a href="classELFIO_1_1dump.xhtml#a9f52208b5882183d479572c55960525f">ELFIO::dump::section_flags</a></div><div class="ttdeci">static std::string section_flags(Elf_Xword flags)</div><div class="ttdef"><b>Definition:</b> <a href="elfio__dump_8hpp_source.xhtml#l00919">elfio_dump.hpp:919</a></div></div>
<div class="ttc" id="elf__types_8hpp_xhtml_a5f84b1bf6e07374d6289eab3d8c57f1c"><div class="ttname"><a href="elf__types_8hpp.xhtml#a5f84b1bf6e07374d6289eab3d8c57f1c">ELFCLASS32</a></div><div class="ttdeci">#define ELFCLASS32</div><div class="ttdef"><b>Definition:</b> <a href="elf__types_8hpp_source.xhtml#l00305">elf_types.hpp:305</a></div></div>
<div class="ttc" id="elfio__dump_8hpp_xhtml_a49feaad2b9222b8f6af410cb90f1c5eb"><div class="ttname"><a href="elfio__dump_8hpp.xhtml#a49feaad2b9222b8f6af410cb90f1c5eb">DUMP_DEC_FORMAT</a></div><div class="ttdeci">#define DUMP_DEC_FORMAT(width)</div><div class="ttdef"><b>Definition:</b> <a href="elfio__dump_8hpp_source.xhtml#l00421">elfio_dump.hpp:421</a></div></div>
</div><!-- fragment -->
<p><div id="dynsection-12" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-12-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-12-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-12-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classELFIO_1_1dump_a5a8ef9b856de2e1b0447ee6a74fd98d9_cgraph.svg" width="363" height="51"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</p>

<p><div id="dynsection-13" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-13-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-13-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-13-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classELFIO_1_1dump_a5a8ef9b856de2e1b0447ee6a74fd98d9_icgraph.svg" width="363" height="51"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</p>

</div>
</div>
<a class="anchor" id="aee9c2e17dc9c709b78401f7a38a31c8e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void ELFIO::dump::section_headers </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classELFIO_1_1elfio.xhtml">elfio</a> &amp;&#160;</td>
          <td class="paramname"><em>reader</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="elfio__dump_8hpp_source.xhtml#l00447">447</a> of file <a class="el" href="elfio__dump_8hpp_source.xhtml">elfio_dump.hpp</a>.</p>

<p>References <a class="el" href="elf__types_8hpp_source.xhtml#l00305">ELFCLASS32</a>, <a class="el" href="elfio__dump_8hpp_source.xhtml#l00475">section_header()</a>, <a class="el" href="classELFIO_1_1elfio.xhtml#ac3304298a71603a89af5676c6bbce9de">ELFIO::elfio::sections</a>, and <a class="el" href="elfio_8hpp_source.xhtml#l00711">ELFIO::elfio::Sections::size()</a>.</p>
<div class="fragment"><div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    {</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;        <a class="code" href="namespaceELFIO.xhtml#a1cbef4f0d8fabbb57ce3507f3ee06e1a">Elf_Half</a> n = reader.sections.size();</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;        <span class="keywordflow">if</span> ( n == 0 ) {</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;            <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;        }</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;        out &lt;&lt; <span class="stringliteral">&quot;Section Headers:&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;        <span class="keywordflow">if</span> ( reader.get_class() == <a class="code" href="elf__types_8hpp.xhtml#a5f84b1bf6e07374d6289eab3d8c57f1c">ELFCLASS32</a> ) { <span class="comment">// Output for 32-bit</span></div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;            out &lt;&lt; <span class="stringliteral">&quot;[  Nr ] Type              Addr     Size     ES Flg Lk Inf Al Name&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;        }</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;        <span class="keywordflow">else</span> {                                    <span class="comment">// Output for 64-bit</span></div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;            out &lt;&lt; <span class="stringliteral">&quot;[  Nr ] Type              Addr             Size             ES   Flg&quot;</span> &lt;&lt; std::endl</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;                &lt;&lt; <span class="stringliteral">&quot;        Lk   Inf  Al      Name&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;        }</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;            </div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;        <span class="keywordflow">for</span> ( <a class="code" href="namespaceELFIO.xhtml#a1cbef4f0d8fabbb57ce3507f3ee06e1a">Elf_Half</a> i = 0; i &lt; n; ++i ) { <span class="comment">// For all sections</span></div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;            section* sec = reader.sections[i];</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;            <a class="code" href="classELFIO_1_1dump.xhtml#a5a8ef9b856de2e1b0447ee6a74fd98d9">section_header</a>( out, i, sec, reader.get_class() );</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;        }</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;        </div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;        out &lt;&lt; <span class="stringliteral">&quot;Key to Flags: W (write), A (alloc), X (execute)\n\n&quot;</span></div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;            &lt;&lt; std::endl;</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;    }</div>
<div class="ttc" id="elf__types_8hpp_xhtml_a5f84b1bf6e07374d6289eab3d8c57f1c"><div class="ttname"><a href="elf__types_8hpp.xhtml#a5f84b1bf6e07374d6289eab3d8c57f1c">ELFCLASS32</a></div><div class="ttdeci">#define ELFCLASS32</div><div class="ttdef"><b>Definition:</b> <a href="elf__types_8hpp_source.xhtml#l00305">elf_types.hpp:305</a></div></div>
<div class="ttc" id="namespaceELFIO_xhtml_a1cbef4f0d8fabbb57ce3507f3ee06e1a"><div class="ttname"><a href="namespaceELFIO.xhtml#a1cbef4f0d8fabbb57ce3507f3ee06e1a">ELFIO::Elf_Half</a></div><div class="ttdeci">uint16_t Elf_Half</div><div class="ttdef"><b>Definition:</b> <a href="elf__types_8hpp_source.xhtml#l00051">elf_types.hpp:51</a></div></div>
<div class="ttc" id="classELFIO_1_1dump_xhtml_a5a8ef9b856de2e1b0447ee6a74fd98d9"><div class="ttname"><a href="classELFIO_1_1dump.xhtml#a5a8ef9b856de2e1b0447ee6a74fd98d9">ELFIO::dump::section_header</a></div><div class="ttdeci">static void section_header(std::ostream &amp;out, Elf_Half no, const section *sec, unsigned char elf_class)</div><div class="ttdef"><b>Definition:</b> <a href="elfio__dump_8hpp_source.xhtml#l00475">elfio_dump.hpp:475</a></div></div>
</div><!-- fragment -->
<p><div id="dynsection-14" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-14-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-14-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-14-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classELFIO_1_1dump_aee9c2e17dc9c709b78401f7a38a31c8e_cgraph.svg" width="563" height="116"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</p>

</div>
</div>
<a class="anchor" id="a3185bd59b2f1eadd79528beb99baa4d6"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void ELFIO::dump::segment_data </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceELFIO.xhtml#a1cbef4f0d8fabbb57ce3507f3ee06e1a">Elf_Half</a>&#160;</td>
          <td class="paramname"><em>no</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classELFIO_1_1segment.xhtml">segment</a> *&#160;</td>
          <td class="paramname"><em>seg</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="elfio__dump_8hpp_source.xhtml#l00823">823</a> of file <a class="el" href="elfio__dump_8hpp_source.xhtml">elfio_dump.hpp</a>.</p>

<p>References <a class="el" href="elfio__dump_8hpp_source.xhtml#l00423">DUMP_HEX_FORMAT</a>, and <a class="el" href="classELFIO_1_1segment.xhtml#a0e7c9e9da5d1df20f62117fd93607ddf">ELFIO::segment::get_data()</a>.</p>

<p>Referenced by <a class="el" href="elfio__dump_8hpp_source.xhtml#l00852">segment_datas()</a>.</p>
<div class="fragment"><div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;    {</div>
<div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;        std::ios_base::fmtflags original_flags = out.flags();</div>
<div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;</div>
<div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;        out &lt;&lt; <span class="stringliteral">&quot;Segment # &quot;</span> &lt;&lt; no &lt;&lt; std::endl;</div>
<div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">char</span>* pdata = seg-&gt;get_data();</div>
<div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;        <a class="code" href="namespaceELFIO.xhtml#ad0fe06bd63d957a8fa08a227dc0dd9e3">ELFIO::Elf_Xword</a> i;</div>
<div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;        <span class="keywordflow">for</span> ( i = 0; i &lt; std::min( seg-&gt;get_file_size(), MAX_DATA_ENTRIES ); ++i ) {</div>
<div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;            <span class="keywordflow">if</span> ( i % 16 == 0 ) {</div>
<div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;                out &lt;&lt; <span class="stringliteral">&quot;[&quot;</span> &lt;&lt;  <a class="code" href="elfio__dump_8hpp.xhtml#a9f8a0f482303ac55de390c0e22bb932d">DUMP_HEX_FORMAT</a>( 8 ) &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot;]&quot;</span>;</div>
<div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;            }</div>
<div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;</div>
<div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;            out &lt;&lt; <span class="stringliteral">&quot; &quot;</span> &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#a9f8a0f482303ac55de390c0e22bb932d">DUMP_HEX_FORMAT</a>( 2 ) &lt;&lt; ( pdata[i] &amp; 0x000000FF );</div>
<div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;</div>
<div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;            <span class="keywordflow">if</span> ( i % 16 == 15 ) {</div>
<div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;                out &lt;&lt; std::endl;</div>
<div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;            }</div>
<div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;        }</div>
<div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;        <span class="keywordflow">if</span> ( i % 16 != 0 ) {</div>
<div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;            out &lt;&lt; std::endl;</div>
<div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;        }</div>
<div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;</div>
<div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;        out.flags(original_flags);</div>
<div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;</div>
<div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;        <span class="keywordflow">return</span>; </div>
<div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;    }</div>
<div class="ttc" id="elfio__dump_8hpp_xhtml_a9f8a0f482303ac55de390c0e22bb932d"><div class="ttname"><a href="elfio__dump_8hpp.xhtml#a9f8a0f482303ac55de390c0e22bb932d">DUMP_HEX_FORMAT</a></div><div class="ttdeci">#define DUMP_HEX_FORMAT(width)</div><div class="ttdef"><b>Definition:</b> <a href="elfio__dump_8hpp_source.xhtml#l00423">elfio_dump.hpp:423</a></div></div>
<div class="ttc" id="namespaceELFIO_xhtml_ad0fe06bd63d957a8fa08a227dc0dd9e3"><div class="ttname"><a href="namespaceELFIO.xhtml#ad0fe06bd63d957a8fa08a227dc0dd9e3">ELFIO::Elf_Xword</a></div><div class="ttdeci">uint64_t Elf_Xword</div><div class="ttdef"><b>Definition:</b> <a href="elf__types_8hpp_source.xhtml#l00054">elf_types.hpp:54</a></div></div>
</div><!-- fragment -->
<p><div id="dynsection-15" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-15-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-15-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-15-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classELFIO_1_1dump_a3185bd59b2f1eadd79528beb99baa4d6_cgraph.svg" width="427" height="38"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</p>

<p><div id="dynsection-16" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-16-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-16-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-16-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classELFIO_1_1dump_a3185bd59b2f1eadd79528beb99baa4d6_icgraph.svg" width="411" height="51"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</p>

</div>
</div>
<a class="anchor" id="a057132b6114ffffe9cf5266307727af1"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void ELFIO::dump::segment_datas </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classELFIO_1_1elfio.xhtml">elfio</a> &amp;&#160;</td>
          <td class="paramname"><em>reader</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="elfio__dump_8hpp_source.xhtml#l00852">852</a> of file <a class="el" href="elfio__dump_8hpp_source.xhtml">elfio_dump.hpp</a>.</p>

<p>References <a class="el" href="elfio__dump_8hpp_source.xhtml#l00823">segment_data()</a>, <a class="el" href="classELFIO_1_1elfio.xhtml#acf8b907708e708153b95008eaa89c7be">ELFIO::elfio::segments</a>, and <a class="el" href="elfio_8hpp_source.xhtml#l00788">ELFIO::elfio::Segments::size()</a>.</p>
<div class="fragment"><div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;    {</div>
<div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;        <a class="code" href="namespaceELFIO.xhtml#a1cbef4f0d8fabbb57ce3507f3ee06e1a">Elf_Half</a> n = reader.segments.size();</div>
<div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;</div>
<div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;        <span class="keywordflow">if</span> ( n == 0 ) {</div>
<div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;            <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;        }</div>
<div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;</div>
<div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;        out &lt;&lt; <span class="stringliteral">&quot;Segment Data:&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;</div>
<div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;        <span class="keywordflow">for</span> ( <a class="code" href="namespaceELFIO.xhtml#a1cbef4f0d8fabbb57ce3507f3ee06e1a">Elf_Half</a> i = 0; i &lt; n; ++i ) { <span class="comment">// For all sections</span></div>
<div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;            segment* seg = reader.segments[i];</div>
<div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;            <a class="code" href="classELFIO_1_1dump.xhtml#a3185bd59b2f1eadd79528beb99baa4d6">segment_data</a>( out, i, seg );</div>
<div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;        }</div>
<div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;</div>
<div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;        out &lt;&lt; std::endl;</div>
<div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;    }</div>
<div class="ttc" id="classELFIO_1_1dump_xhtml_a3185bd59b2f1eadd79528beb99baa4d6"><div class="ttname"><a href="classELFIO_1_1dump.xhtml#a3185bd59b2f1eadd79528beb99baa4d6">ELFIO::dump::segment_data</a></div><div class="ttdeci">static void segment_data(std::ostream &amp;out, Elf_Half no, const segment *seg)</div><div class="ttdef"><b>Definition:</b> <a href="elfio__dump_8hpp_source.xhtml#l00823">elfio_dump.hpp:823</a></div></div>
<div class="ttc" id="namespaceELFIO_xhtml_a1cbef4f0d8fabbb57ce3507f3ee06e1a"><div class="ttname"><a href="namespaceELFIO.xhtml#a1cbef4f0d8fabbb57ce3507f3ee06e1a">ELFIO::Elf_Half</a></div><div class="ttdeci">uint16_t Elf_Half</div><div class="ttdef"><b>Definition:</b> <a href="elf__types_8hpp_source.xhtml#l00051">elf_types.hpp:51</a></div></div>
</div><!-- fragment -->
<p><div id="dynsection-17" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-17-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-17-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-17-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classELFIO_1_1dump_a057132b6114ffffe9cf5266307727af1_cgraph.svg" width="635" height="103"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</p>

</div>
</div>
<a class="anchor" id="a3e837ae64e7c733dfd0d1bc004b53529"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void ELFIO::dump::segment_header </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceELFIO.xhtml#a1cbef4f0d8fabbb57ce3507f3ee06e1a">Elf_Half</a>&#160;</td>
          <td class="paramname"><em>no</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classELFIO_1_1segment.xhtml">segment</a> *&#160;</td>
          <td class="paramname"><em>seg</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned <a class="el" href="classint.xhtml">int</a>&#160;</td>
          <td class="paramname"><em>elf_class</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="elfio__dump_8hpp_source.xhtml#l00548">548</a> of file <a class="el" href="elfio__dump_8hpp_source.xhtml">elfio_dump.hpp</a>.</p>

<p>References <a class="el" href="elfio__dump_8hpp_source.xhtml#l00421">DUMP_DEC_FORMAT</a>, <a class="el" href="elfio__dump_8hpp_source.xhtml#l00423">DUMP_HEX_FORMAT</a>, <a class="el" href="elfio__dump_8hpp_source.xhtml#l00425">DUMP_STR_FORMAT</a>, and <a class="el" href="elf__types_8hpp_source.xhtml#l00305">ELFCLASS32</a>.</p>

<p>Referenced by <a class="el" href="elfio__dump_8hpp_source.xhtml#l00520">segment_headers()</a>.</p>
<div class="fragment"><div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;    {</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;        std::ios_base::fmtflags original_flags = out.flags();</div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;        <span class="keywordflow">if</span> ( elf_class == <a class="code" href="elf__types_8hpp.xhtml#a5f84b1bf6e07374d6289eab3d8c57f1c">ELFCLASS32</a> ) { <span class="comment">// Output for 32-bit</span></div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;            out &lt;&lt; <span class="stringliteral">&quot;[&quot;</span> </div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;                &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#a49feaad2b9222b8f6af410cb90f1c5eb">DUMP_DEC_FORMAT</a>(  5 ) &lt;&lt; no</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;                &lt;&lt; <span class="stringliteral">&quot;] &quot;</span></div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;                &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#ac81f0355957e4378321330a3d20ec6e5">DUMP_STR_FORMAT</a>( 14 ) &lt;&lt; str_segment_type( seg-&gt;get_type() )  &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;                &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#a9f8a0f482303ac55de390c0e22bb932d">DUMP_HEX_FORMAT</a>(  8 ) &lt;&lt; seg-&gt;get_virtual_address()           &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;                &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#a9f8a0f482303ac55de390c0e22bb932d">DUMP_HEX_FORMAT</a>(  8 ) &lt;&lt; seg-&gt;get_physical_address()          &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;                &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#a9f8a0f482303ac55de390c0e22bb932d">DUMP_HEX_FORMAT</a>(  8 ) &lt;&lt; seg-&gt;get_file_size()                 &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;                &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#a9f8a0f482303ac55de390c0e22bb932d">DUMP_HEX_FORMAT</a>(  8 ) &lt;&lt; seg-&gt;get_memory_size()               &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;                &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#ac81f0355957e4378321330a3d20ec6e5">DUMP_STR_FORMAT</a>(  8 ) &lt;&lt; str_segment_flag( seg-&gt;get_flags() ) &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;                &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#a9f8a0f482303ac55de390c0e22bb932d">DUMP_HEX_FORMAT</a>(  8 ) &lt;&lt; seg-&gt;get_align()                     &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;                &lt;&lt; std::endl;</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;        }</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;        <span class="keywordflow">else</span> {                           <span class="comment">// Output for 64-bit</span></div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;            out &lt;&lt; <span class="stringliteral">&quot;[&quot;</span> </div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;                &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#a49feaad2b9222b8f6af410cb90f1c5eb">DUMP_DEC_FORMAT</a>(  5 ) &lt;&lt; no</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;                &lt;&lt; <span class="stringliteral">&quot;] &quot;</span></div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;                &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#ac81f0355957e4378321330a3d20ec6e5">DUMP_STR_FORMAT</a>( 14 ) &lt;&lt; str_segment_type( seg-&gt;get_type() )  &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;                &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#a9f8a0f482303ac55de390c0e22bb932d">DUMP_HEX_FORMAT</a>( 16 ) &lt;&lt; seg-&gt;get_virtual_address()           &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;                &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#a9f8a0f482303ac55de390c0e22bb932d">DUMP_HEX_FORMAT</a>( 16 ) &lt;&lt; seg-&gt;get_physical_address()          &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;                &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#ac81f0355957e4378321330a3d20ec6e5">DUMP_STR_FORMAT</a>( 16 ) &lt;&lt; str_segment_flag( seg-&gt;get_flags() ) &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;                &lt;&lt; std::endl</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;                &lt;&lt; <span class="stringliteral">&quot;                       &quot;</span></div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;                &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#a9f8a0f482303ac55de390c0e22bb932d">DUMP_HEX_FORMAT</a>( 16 ) &lt;&lt; seg-&gt;get_file_size()                 &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;                &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#a9f8a0f482303ac55de390c0e22bb932d">DUMP_HEX_FORMAT</a>( 16 ) &lt;&lt; seg-&gt;get_memory_size()               &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;                &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#a9f8a0f482303ac55de390c0e22bb932d">DUMP_HEX_FORMAT</a>( 16 ) &lt;&lt; seg-&gt;get_align()                     &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;                &lt;&lt; std::endl;</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;        }</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;        out.flags(original_flags);</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;    }</div>
<div class="ttc" id="elfio__dump_8hpp_xhtml_ac81f0355957e4378321330a3d20ec6e5"><div class="ttname"><a href="elfio__dump_8hpp.xhtml#ac81f0355957e4378321330a3d20ec6e5">DUMP_STR_FORMAT</a></div><div class="ttdeci">#define DUMP_STR_FORMAT(width)</div><div class="ttdef"><b>Definition:</b> <a href="elfio__dump_8hpp_source.xhtml#l00425">elfio_dump.hpp:425</a></div></div>
<div class="ttc" id="elfio__dump_8hpp_xhtml_a9f8a0f482303ac55de390c0e22bb932d"><div class="ttname"><a href="elfio__dump_8hpp.xhtml#a9f8a0f482303ac55de390c0e22bb932d">DUMP_HEX_FORMAT</a></div><div class="ttdeci">#define DUMP_HEX_FORMAT(width)</div><div class="ttdef"><b>Definition:</b> <a href="elfio__dump_8hpp_source.xhtml#l00423">elfio_dump.hpp:423</a></div></div>
<div class="ttc" id="elf__types_8hpp_xhtml_a5f84b1bf6e07374d6289eab3d8c57f1c"><div class="ttname"><a href="elf__types_8hpp.xhtml#a5f84b1bf6e07374d6289eab3d8c57f1c">ELFCLASS32</a></div><div class="ttdeci">#define ELFCLASS32</div><div class="ttdef"><b>Definition:</b> <a href="elf__types_8hpp_source.xhtml#l00305">elf_types.hpp:305</a></div></div>
<div class="ttc" id="elfio__dump_8hpp_xhtml_a49feaad2b9222b8f6af410cb90f1c5eb"><div class="ttname"><a href="elfio__dump_8hpp.xhtml#a49feaad2b9222b8f6af410cb90f1c5eb">DUMP_DEC_FORMAT</a></div><div class="ttdeci">#define DUMP_DEC_FORMAT(width)</div><div class="ttdef"><b>Definition:</b> <a href="elfio__dump_8hpp_source.xhtml#l00421">elfio_dump.hpp:421</a></div></div>
</div><!-- fragment -->
<p><div id="dynsection-18" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-18-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-18-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-18-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classELFIO_1_1dump_a3e837ae64e7c733dfd0d1bc004b53529_icgraph.svg" width="379" height="51"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</p>

</div>
</div>
<a class="anchor" id="ad1a6efd3db614d85b0c50a54451e696a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void ELFIO::dump::segment_headers </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classELFIO_1_1elfio.xhtml">elfio</a> &amp;&#160;</td>
          <td class="paramname"><em>reader</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="elfio__dump_8hpp_source.xhtml#l00520">520</a> of file <a class="el" href="elfio__dump_8hpp_source.xhtml">elfio_dump.hpp</a>.</p>

<p>References <a class="el" href="elf__types_8hpp_source.xhtml#l00305">ELFCLASS32</a>, <a class="el" href="elfio__dump_8hpp_source.xhtml#l00548">segment_header()</a>, <a class="el" href="classELFIO_1_1elfio.xhtml#acf8b907708e708153b95008eaa89c7be">ELFIO::elfio::segments</a>, and <a class="el" href="elfio_8hpp_source.xhtml#l00788">ELFIO::elfio::Segments::size()</a>.</p>
<div class="fragment"><div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;    {</div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;        <a class="code" href="namespaceELFIO.xhtml#a1cbef4f0d8fabbb57ce3507f3ee06e1a">Elf_Half</a> n = reader.segments.size();</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;        <span class="keywordflow">if</span> ( n == 0 ) {</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;            <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;        }</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;</div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;        out &lt;&lt; <span class="stringliteral">&quot;Segment headers:&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;        <span class="keywordflow">if</span> ( reader.get_class() == <a class="code" href="elf__types_8hpp.xhtml#a5f84b1bf6e07374d6289eab3d8c57f1c">ELFCLASS32</a> ) { <span class="comment">// Output for 32-bit</span></div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;            out &lt;&lt; <span class="stringliteral">&quot;[  Nr ] Type           VirtAddr PhysAddr FileSize Mem.Size Flags    Align&quot;</span></div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;                &lt;&lt; std::endl;</div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;        }</div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;        <span class="keywordflow">else</span> {                                    <span class="comment">// Output for 64-bit</span></div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;            out &lt;&lt; <span class="stringliteral">&quot;[  Nr ] Type           VirtAddr         PhysAddr         Flags&quot;</span> &lt;&lt; std::endl</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;                &lt;&lt; <span class="stringliteral">&quot;                       FileSize         Mem.Size         Align&quot;</span></div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;                &lt;&lt; std::endl;</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;        }</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;            </div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;        <span class="keywordflow">for</span> ( <a class="code" href="namespaceELFIO.xhtml#a1cbef4f0d8fabbb57ce3507f3ee06e1a">Elf_Half</a> i = 0; i &lt; n; ++i ) {</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;            segment* seg = reader.segments[i];</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;            <a class="code" href="classELFIO_1_1dump.xhtml#a3e837ae64e7c733dfd0d1bc004b53529">segment_header</a>( out, i, seg, reader.get_class() );</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;        }</div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;            </div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;        out &lt;&lt; std::endl;</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;    }</div>
<div class="ttc" id="classELFIO_1_1dump_xhtml_a3e837ae64e7c733dfd0d1bc004b53529"><div class="ttname"><a href="classELFIO_1_1dump.xhtml#a3e837ae64e7c733dfd0d1bc004b53529">ELFIO::dump::segment_header</a></div><div class="ttdeci">static void segment_header(std::ostream &amp;out, Elf_Half no, const segment *seg, unsigned int elf_class)</div><div class="ttdef"><b>Definition:</b> <a href="elfio__dump_8hpp_source.xhtml#l00548">elfio_dump.hpp:548</a></div></div>
<div class="ttc" id="elf__types_8hpp_xhtml_a5f84b1bf6e07374d6289eab3d8c57f1c"><div class="ttname"><a href="elf__types_8hpp.xhtml#a5f84b1bf6e07374d6289eab3d8c57f1c">ELFCLASS32</a></div><div class="ttdeci">#define ELFCLASS32</div><div class="ttdef"><b>Definition:</b> <a href="elf__types_8hpp_source.xhtml#l00305">elf_types.hpp:305</a></div></div>
<div class="ttc" id="namespaceELFIO_xhtml_a1cbef4f0d8fabbb57ce3507f3ee06e1a"><div class="ttname"><a href="namespaceELFIO.xhtml#a1cbef4f0d8fabbb57ce3507f3ee06e1a">ELFIO::Elf_Half</a></div><div class="ttdeci">uint16_t Elf_Half</div><div class="ttdef"><b>Definition:</b> <a href="elf__types_8hpp_source.xhtml#l00051">elf_types.hpp:51</a></div></div>
</div><!-- fragment -->
<p><div id="dynsection-19" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-19-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-19-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-19-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classELFIO_1_1dump_ad1a6efd3db614d85b0c50a54451e696a_cgraph.svg" width="379" height="116"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</p>

</div>
</div>
<a class="anchor" id="a8bc5912b0f4138ccf89b0e46ce8781e8"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void ELFIO::dump::symbol_table </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceELFIO.xhtml#a1cbef4f0d8fabbb57ce3507f3ee06e1a">Elf_Half</a>&#160;</td>
          <td class="paramname"><em>no</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">std::string &amp;&#160;</td>
          <td class="paramname"><em>name</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceELFIO.xhtml#a10b98acc49bab16ded42171fb3431f83">Elf64_Addr</a>&#160;</td>
          <td class="paramname"><em>value</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceELFIO.xhtml#ad0fe06bd63d957a8fa08a227dc0dd9e3">Elf_Xword</a>&#160;</td>
          <td class="paramname"><em>size</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned char&#160;</td>
          <td class="paramname"><em>bind</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned char&#160;</td>
          <td class="paramname"><em>type</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="namespaceELFIO.xhtml#a1cbef4f0d8fabbb57ce3507f3ee06e1a">Elf_Half</a>&#160;</td>
          <td class="paramname"><em>section</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">unsigned <a class="el" href="classint.xhtml">int</a>&#160;</td>
          <td class="paramname"><em>elf_class</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="elfio__dump_8hpp_source.xhtml#l00627">627</a> of file <a class="el" href="elfio__dump_8hpp_source.xhtml">elfio_dump.hpp</a>.</p>

<p>References <a class="el" href="elfio__dump_8hpp_source.xhtml#l00421">DUMP_DEC_FORMAT</a>, <a class="el" href="elfio__dump_8hpp_source.xhtml#l00423">DUMP_HEX_FORMAT</a>, <a class="el" href="elfio__dump_8hpp_source.xhtml#l00425">DUMP_STR_FORMAT</a>, and <a class="el" href="elf__types_8hpp_source.xhtml#l00305">ELFCLASS32</a>.</p>

<p>Referenced by <a class="el" href="elfio__dump_8hpp_source.xhtml#l00587">symbol_tables()</a>.</p>
<div class="fragment"><div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;    {</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;        std::ios_base::fmtflags original_flags = out.flags();</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;</div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;        <span class="keywordflow">if</span> ( elf_class == <a class="code" href="elf__types_8hpp.xhtml#a5f84b1bf6e07374d6289eab3d8c57f1c">ELFCLASS32</a> ) { <span class="comment">// Output for 32-bit</span></div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;            out &lt;&lt; <span class="stringliteral">&quot;[&quot;</span> </div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;                &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#a49feaad2b9222b8f6af410cb90f1c5eb">DUMP_DEC_FORMAT</a>(  5 ) &lt;&lt; no</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;                &lt;&lt; <span class="stringliteral">&quot;] &quot;</span></div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;                &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#a9f8a0f482303ac55de390c0e22bb932d">DUMP_HEX_FORMAT</a>(  8 ) &lt;&lt; value                   &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;                &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#a9f8a0f482303ac55de390c0e22bb932d">DUMP_HEX_FORMAT</a>(  8 ) &lt;&lt; size                    &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;                &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#ac81f0355957e4378321330a3d20ec6e5">DUMP_STR_FORMAT</a>(  7 ) &lt;&lt; str_symbol_type( type ) &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;                &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#ac81f0355957e4378321330a3d20ec6e5">DUMP_STR_FORMAT</a>(  8 ) &lt;&lt; str_symbol_bind( bind ) &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;                &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#a49feaad2b9222b8f6af410cb90f1c5eb">DUMP_DEC_FORMAT</a>(  5 ) &lt;&lt; section                 &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;                &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#ac81f0355957e4378321330a3d20ec6e5">DUMP_STR_FORMAT</a>(  1 ) &lt;&lt; name                    &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;                &lt;&lt; std::endl;</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;        }</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;        <span class="keywordflow">else</span> {                           <span class="comment">// Output for 64-bit</span></div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;            out &lt;&lt; <span class="stringliteral">&quot;[&quot;</span> </div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;                &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#a49feaad2b9222b8f6af410cb90f1c5eb">DUMP_DEC_FORMAT</a>(  5 ) &lt;&lt; no</div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;                &lt;&lt; <span class="stringliteral">&quot;] &quot;</span></div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;                &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#a9f8a0f482303ac55de390c0e22bb932d">DUMP_HEX_FORMAT</a>( 16 ) &lt;&lt; value                   &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;                &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#a9f8a0f482303ac55de390c0e22bb932d">DUMP_HEX_FORMAT</a>( 16 ) &lt;&lt; size                    &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;                &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#ac81f0355957e4378321330a3d20ec6e5">DUMP_STR_FORMAT</a>(  7 ) &lt;&lt; str_symbol_type( type ) &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;                &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#ac81f0355957e4378321330a3d20ec6e5">DUMP_STR_FORMAT</a>(  8 ) &lt;&lt; str_symbol_bind( bind ) &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;                &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#a49feaad2b9222b8f6af410cb90f1c5eb">DUMP_DEC_FORMAT</a>(  5 ) &lt;&lt; section                 &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;                &lt;&lt; std::endl</div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;                &lt;&lt; <span class="stringliteral">&quot;        &quot;</span></div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;                &lt;&lt; <a class="code" href="elfio__dump_8hpp.xhtml#ac81f0355957e4378321330a3d20ec6e5">DUMP_STR_FORMAT</a>(  1 ) &lt;&lt; name                    &lt;&lt; <span class="stringliteral">&quot; &quot;</span></div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;                &lt;&lt; std::endl;</div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;        }</div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;</div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;        out.flags(original_flags);</div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;    }</div>
<div class="ttc" id="elfio__dump_8hpp_xhtml_ac81f0355957e4378321330a3d20ec6e5"><div class="ttname"><a href="elfio__dump_8hpp.xhtml#ac81f0355957e4378321330a3d20ec6e5">DUMP_STR_FORMAT</a></div><div class="ttdeci">#define DUMP_STR_FORMAT(width)</div><div class="ttdef"><b>Definition:</b> <a href="elfio__dump_8hpp_source.xhtml#l00425">elfio_dump.hpp:425</a></div></div>
<div class="ttc" id="elfio__dump_8hpp_xhtml_a9f8a0f482303ac55de390c0e22bb932d"><div class="ttname"><a href="elfio__dump_8hpp.xhtml#a9f8a0f482303ac55de390c0e22bb932d">DUMP_HEX_FORMAT</a></div><div class="ttdeci">#define DUMP_HEX_FORMAT(width)</div><div class="ttdef"><b>Definition:</b> <a href="elfio__dump_8hpp_source.xhtml#l00423">elfio_dump.hpp:423</a></div></div>
<div class="ttc" id="elf__types_8hpp_xhtml_a5f84b1bf6e07374d6289eab3d8c57f1c"><div class="ttname"><a href="elf__types_8hpp.xhtml#a5f84b1bf6e07374d6289eab3d8c57f1c">ELFCLASS32</a></div><div class="ttdeci">#define ELFCLASS32</div><div class="ttdef"><b>Definition:</b> <a href="elf__types_8hpp_source.xhtml#l00305">elf_types.hpp:305</a></div></div>
<div class="ttc" id="elfio__dump_8hpp_xhtml_a49feaad2b9222b8f6af410cb90f1c5eb"><div class="ttname"><a href="elfio__dump_8hpp.xhtml#a49feaad2b9222b8f6af410cb90f1c5eb">DUMP_DEC_FORMAT</a></div><div class="ttdeci">#define DUMP_DEC_FORMAT(width)</div><div class="ttdef"><b>Definition:</b> <a href="elfio__dump_8hpp_source.xhtml#l00421">elfio_dump.hpp:421</a></div></div>
</div><!-- fragment -->
<p><div id="dynsection-20" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-20-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-20-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-20-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classELFIO_1_1dump_a8bc5912b0f4138ccf89b0e46ce8781e8_icgraph.svg" width="363" height="51"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</p>

</div>
</div>
<a class="anchor" id="ac2fee2fccc29233d6839b39a84805637"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">static void ELFIO::dump::symbol_tables </td>
          <td>(</td>
          <td class="paramtype">std::ostream &amp;&#160;</td>
          <td class="paramname"><em>out</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classELFIO_1_1elfio.xhtml">elfio</a> &amp;&#160;</td>
          <td class="paramname"><em>reader</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">static</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="elfio__dump_8hpp_source.xhtml#l00587">587</a> of file <a class="el" href="elfio__dump_8hpp_source.xhtml">elfio_dump.hpp</a>.</p>

<p>References <a class="el" href="elf__types_8hpp_source.xhtml#l00305">ELFCLASS32</a>, <a class="el" href="elfio__symbols_8hpp_source.xhtml#l00054">ELFIO::symbol_section_accessor::get_symbol()</a>, <a class="el" href="elfio__symbols_8hpp_source.xhtml#l00042">ELFIO::symbol_section_accessor::get_symbols_num()</a>, <a class="el" href="classELFIO_1_1elfio.xhtml#ac3304298a71603a89af5676c6bbce9de">ELFIO::elfio::sections</a>, <a class="el" href="elf__types_8hpp_source.xhtml#l00360">SHT_DYNSYM</a>, <a class="el" href="elf__types_8hpp_source.xhtml#l00351">SHT_SYMTAB</a>, <a class="el" href="elfio_8hpp_source.xhtml#l00711">ELFIO::elfio::Sections::size()</a>, and <a class="el" href="elfio__dump_8hpp_source.xhtml#l00627">symbol_table()</a>.</p>
<div class="fragment"><div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;    {</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;        <a class="code" href="namespaceELFIO.xhtml#a1cbef4f0d8fabbb57ce3507f3ee06e1a">Elf_Half</a> n = reader.sections.size();</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;        <span class="keywordflow">for</span> ( <a class="code" href="namespaceELFIO.xhtml#a1cbef4f0d8fabbb57ce3507f3ee06e1a">Elf_Half</a> i = 0; i &lt; n; ++i ) {    <span class="comment">// For all sections</span></div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;            section* sec = reader.sections[i];</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;            <span class="keywordflow">if</span> ( <a class="code" href="elf__types_8hpp.xhtml#a4add7784e43ec3d3b9c09d3ffc476a81">SHT_SYMTAB</a> == sec-&gt;get_type() || <a class="code" href="elf__types_8hpp.xhtml#aa9949aedf49107f6a07e618d5d791d40">SHT_DYNSYM</a> == sec-&gt;get_type() ) {</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;                symbol_section_accessor symbols( reader, sec );</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;                <a class="code" href="namespaceELFIO.xhtml#ad0fe06bd63d957a8fa08a227dc0dd9e3">Elf_Xword</a>     sym_no = symbols.get_symbols_num();</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;                <span class="keywordflow">if</span> ( sym_no &gt; 0 ) {</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;                    out &lt;&lt; <span class="stringliteral">&quot;Symbol table (&quot;</span> &lt;&lt; sec-&gt;get_name() &lt;&lt; <span class="stringliteral">&quot;)&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;                    <span class="keywordflow">if</span> ( reader.get_class() == <a class="code" href="elf__types_8hpp.xhtml#a5f84b1bf6e07374d6289eab3d8c57f1c">ELFCLASS32</a> ) { <span class="comment">// Output for 32-bit</span></div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;                        out &lt;&lt; <span class="stringliteral">&quot;[  Nr ] Value    Size     Type    Bind      Sect Name&quot;</span></div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;                            &lt;&lt; std::endl;</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;                    }</div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;                    <span class="keywordflow">else</span> {                                    <span class="comment">// Output for 64-bit</span></div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;                        out &lt;&lt; <span class="stringliteral">&quot;[  Nr ] Value            Size             Type    Bind      Sect&quot;</span> &lt;&lt; std::endl</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;                            &lt;&lt; <span class="stringliteral">&quot;        Name&quot;</span></div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;                            &lt;&lt; std::endl;</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;                    }</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;                    <span class="keywordflow">for</span> ( <a class="code" href="namespaceELFIO.xhtml#a1cbef4f0d8fabbb57ce3507f3ee06e1a">Elf_Half</a> i = 0; i &lt; sym_no; ++i ) {</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;                        std::string   name;</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;                        <a class="code" href="namespaceELFIO.xhtml#a10b98acc49bab16ded42171fb3431f83">Elf64_Addr</a>    value   = 0;</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;                        <a class="code" href="namespaceELFIO.xhtml#ad0fe06bd63d957a8fa08a227dc0dd9e3">Elf_Xword</a>     size    = 0;</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;                        <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> bind    = 0;</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;                        <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> type    = 0;</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;                        <a class="code" href="namespaceELFIO.xhtml#a1cbef4f0d8fabbb57ce3507f3ee06e1a">Elf_Half</a>      section = 0;</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;                        <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> other   = 0;</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;                        symbols.get_symbol( i, name, value, size, bind, type, section, other );</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;                        <a class="code" href="classELFIO_1_1dump.xhtml#a8bc5912b0f4138ccf89b0e46ce8781e8">symbol_table</a>( out, i, name, value, size, bind, type, section, reader.get_class() );</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;                    }</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;                    out &lt;&lt; std::endl;</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;                }</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;            }</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;        }</div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;    }</div>
<div class="ttc" id="namespaceELFIO_xhtml_ad0fe06bd63d957a8fa08a227dc0dd9e3"><div class="ttname"><a href="namespaceELFIO.xhtml#ad0fe06bd63d957a8fa08a227dc0dd9e3">ELFIO::Elf_Xword</a></div><div class="ttdeci">uint64_t Elf_Xword</div><div class="ttdef"><b>Definition:</b> <a href="elf__types_8hpp_source.xhtml#l00054">elf_types.hpp:54</a></div></div>
<div class="ttc" id="classELFIO_1_1dump_xhtml_a8bc5912b0f4138ccf89b0e46ce8781e8"><div class="ttname"><a href="classELFIO_1_1dump.xhtml#a8bc5912b0f4138ccf89b0e46ce8781e8">ELFIO::dump::symbol_table</a></div><div class="ttdeci">static void symbol_table(std::ostream &amp;out, Elf_Half no, std::string &amp;name, Elf64_Addr value, Elf_Xword size, unsigned char bind, unsigned char type, Elf_Half section, unsigned int elf_class)</div><div class="ttdef"><b>Definition:</b> <a href="elfio__dump_8hpp_source.xhtml#l00627">elfio_dump.hpp:627</a></div></div>
<div class="ttc" id="elf__types_8hpp_xhtml_a5f84b1bf6e07374d6289eab3d8c57f1c"><div class="ttname"><a href="elf__types_8hpp.xhtml#a5f84b1bf6e07374d6289eab3d8c57f1c">ELFCLASS32</a></div><div class="ttdeci">#define ELFCLASS32</div><div class="ttdef"><b>Definition:</b> <a href="elf__types_8hpp_source.xhtml#l00305">elf_types.hpp:305</a></div></div>
<div class="ttc" id="elf__types_8hpp_xhtml_aa9949aedf49107f6a07e618d5d791d40"><div class="ttname"><a href="elf__types_8hpp.xhtml#aa9949aedf49107f6a07e618d5d791d40">SHT_DYNSYM</a></div><div class="ttdeci">#define SHT_DYNSYM</div><div class="ttdef"><b>Definition:</b> <a href="elf__types_8hpp_source.xhtml#l00360">elf_types.hpp:360</a></div></div>
<div class="ttc" id="namespaceELFIO_xhtml_a1cbef4f0d8fabbb57ce3507f3ee06e1a"><div class="ttname"><a href="namespaceELFIO.xhtml#a1cbef4f0d8fabbb57ce3507f3ee06e1a">ELFIO::Elf_Half</a></div><div class="ttdeci">uint16_t Elf_Half</div><div class="ttdef"><b>Definition:</b> <a href="elf__types_8hpp_source.xhtml#l00051">elf_types.hpp:51</a></div></div>
<div class="ttc" id="namespaceELFIO_xhtml_a10b98acc49bab16ded42171fb3431f83"><div class="ttname"><a href="namespaceELFIO.xhtml#a10b98acc49bab16ded42171fb3431f83">ELFIO::Elf64_Addr</a></div><div class="ttdeci">uint64_t Elf64_Addr</div><div class="ttdef"><b>Definition:</b> <a href="elf__types_8hpp_source.xhtml#l00059">elf_types.hpp:59</a></div></div>
<div class="ttc" id="elf__types_8hpp_xhtml_a4add7784e43ec3d3b9c09d3ffc476a81"><div class="ttname"><a href="elf__types_8hpp.xhtml#a4add7784e43ec3d3b9c09d3ffc476a81">SHT_SYMTAB</a></div><div class="ttdeci">#define SHT_SYMTAB</div><div class="ttdef"><b>Definition:</b> <a href="elf__types_8hpp_source.xhtml#l00351">elf_types.hpp:351</a></div></div>
</div><!-- fragment -->
<p><div id="dynsection-21" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-21-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-21-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-21-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classELFIO_1_1dump_ac2fee2fccc29233d6839b39a84805637_cgraph.svg" width="408" height="247"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following file:<ul>
<li><a class="el" href="elfio__dump_8hpp_source.xhtml">elfio_dump.hpp</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Sun Sep 27 2015 19:36:58 for Voxel by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.7
</small></address>
</body>
</html>
