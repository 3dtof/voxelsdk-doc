<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.6"/>
<title>Voxel: Voxel::USBSystemPrivate Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Voxel
   &#160;<span id="projectnumber">0.5.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.6 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceVoxel.xhtml">Voxel</a></li><li class="navelem"><a class="el" href="classVoxel_1_1USBSystemPrivate.xhtml">USBSystemPrivate</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="#pro-methods">Protected Member Functions</a> &#124;
<a href="#pro-attribs">Protected Attributes</a> &#124;
<a href="#pri-methods">Private Member Functions</a> &#124;
<a href="classVoxel_1_1USBSystemPrivate-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">Voxel::USBSystemPrivate Class Reference<div class="ingroups"><a class="el" href="group__IO.xhtml">I/O classes</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p><code>#include &lt;<a class="el" href="USBSystemPrivateLinux_8h_source.xhtml">USBSystemPrivateLinux.h</a>&gt;</code></p>
<div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Collaboration diagram for Voxel::USBSystemPrivate:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classVoxel_1_1USBSystemPrivate__coll__graph.svg" width="187" height="128"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
<center><span class="legend">[<a href="graph_legend.xhtml">legend</a>]</span></center></div>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:afbc328c211976c54585df9835b70b68a"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classVoxel_1_1USBSystemPrivate.xhtml#afbc328c211976c54585df9835b70b68a">USBSystemPrivate</a> ()</td></tr>
<tr class="separator:afbc328c211976c54585df9835b70b68a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac06767c16a91d626f545f7463f977c21"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classbool.xhtml">bool</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classVoxel_1_1USBSystemPrivate.xhtml#ac06767c16a91d626f545f7463f977c21">isInitialized</a> ()</td></tr>
<tr class="separator:ac06767c16a91d626f545f7463f977c21"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a5253d98ddc9da299206f2b7ba58e82a9"><td class="memItemLeft" align="right" valign="top">libusb_context *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classVoxel_1_1USBSystemPrivate.xhtml#a5253d98ddc9da299206f2b7ba58e82a9">getContext</a> ()</td></tr>
<tr class="separator:a5253d98ddc9da299206f2b7ba58e82a9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0a4343643663e5cb000014b35bec5802"><td class="memItemLeft" align="right" valign="top">libusb_device *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classVoxel_1_1USBSystemPrivate.xhtml#a0a4343643663e5cb000014b35bec5802">getDeviceHandle</a> (const <a class="el" href="classVoxel_1_1USBDevice.xhtml">USBDevice</a> &amp;usbd)</td></tr>
<tr class="memdesc:a0a4343643663e5cb000014b35bec5802"><td class="mdescLeft">&#160;</td><td class="mdescRight">This does not look at the channel to determine which channel to use.  <a href="#a0a4343643663e5cb000014b35bec5802">More...</a><br/></td></tr>
<tr class="separator:a0a4343643663e5cb000014b35bec5802"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a977ddcd8cd9508c4b598b6f00c89d2a6"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__Util.xhtml#ga8a21cf7475356ae552da8952ebf885b4">Vector</a>&lt; <a class="el" href="group__CamSys.xhtml#ga8b8c5a5f71759c97cc49332cfeb89d79">DevicePtr</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classVoxel_1_1USBSystemPrivate.xhtml#a977ddcd8cd9508c4b598b6f00c89d2a6">getDevices</a> ()</td></tr>
<tr class="separator:a977ddcd8cd9508c4b598b6f00c89d2a6"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af6f114a79ec61cc4815afc7828a84f85"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__Util.xhtml#gafd72f3b1c8c89d947c44f85bf983f852">String</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classVoxel_1_1USBSystemPrivate.xhtml#af6f114a79ec61cc4815afc7828a84f85">getDeviceNode</a> (const <a class="el" href="classVoxel_1_1USBDevice.xhtml">USBDevice</a> &amp;usbd)</td></tr>
<tr class="separator:af6f114a79ec61cc4815afc7828a84f85"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a1cbfa177d183726f0e4a16cb45e30d35"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classbool.xhtml">bool</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classVoxel_1_1USBSystemPrivate.xhtml#a1cbfa177d183726f0e4a16cb45e30d35">getBusDevNumbers</a> (const <a class="el" href="classVoxel_1_1USBDevice.xhtml">USBDevice</a> &amp;usbd, uint8_t &amp;busNumber, uint8_t &amp;devNumber)</td></tr>
<tr class="separator:a1cbfa177d183726f0e4a16cb45e30d35"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0ab940eecf5d787ca685b675305a4f90"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classVoxel_1_1USBSystemPrivate.xhtml#a0ab940eecf5d787ca685b675305a4f90">~USBSystemPrivate</a> ()</td></tr>
<tr class="separator:a0ab940eecf5d787ca685b675305a4f90"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:afbc328c211976c54585df9835b70b68a"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classVoxel_1_1USBSystemPrivate.xhtml#afbc328c211976c54585df9835b70b68a">USBSystemPrivate</a> ()</td></tr>
<tr class="separator:afbc328c211976c54585df9835b70b68a"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ac06767c16a91d626f545f7463f977c21"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classbool.xhtml">bool</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classVoxel_1_1USBSystemPrivate.xhtml#ac06767c16a91d626f545f7463f977c21">isInitialized</a> ()</td></tr>
<tr class="separator:ac06767c16a91d626f545f7463f977c21"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a17faa289c0409720bb47424bfb0e41fd"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__Util.xhtml#ga8a21cf7475356ae552da8952ebf885b4">Vector</a>&lt; <a class="el" href="group__CamSys.xhtml#ga8b8c5a5f71759c97cc49332cfeb89d79">DevicePtr</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classVoxel_1_1USBSystemPrivate.xhtml#a17faa289c0409720bb47424bfb0e41fd">getDevices</a> ()</td></tr>
<tr class="separator:a17faa289c0409720bb47424bfb0e41fd"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af6f114a79ec61cc4815afc7828a84f85"><td class="memItemLeft" align="right" valign="top"><a class="el" href="group__Util.xhtml#gafd72f3b1c8c89d947c44f85bf983f852">String</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classVoxel_1_1USBSystemPrivate.xhtml#af6f114a79ec61cc4815afc7828a84f85">getDeviceNode</a> (const <a class="el" href="classVoxel_1_1USBDevice.xhtml">USBDevice</a> &amp;usbd)</td></tr>
<tr class="separator:af6f114a79ec61cc4815afc7828a84f85"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a8ead463f7493be6e73587a31d7b0f04b"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classbool.xhtml">bool</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classVoxel_1_1USBSystemPrivate.xhtml#a8ead463f7493be6e73587a31d7b0f04b">getDevInst</a> (const <a class="el" href="group__Util.xhtml#gafd72f3b1c8c89d947c44f85bf983f852">String</a> &amp;devicePath, <a class="el" href="group__IO.xhtml#ga21dc16e4a3028a99c0be8f3943bfb699">DWORD</a> &amp;devInst, LPGUID guid=(LPGUID)&amp;GUID_CLASS_USB_DEVICE)</td></tr>
<tr class="separator:a8ead463f7493be6e73587a31d7b0f04b"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a0ab940eecf5d787ca685b675305a4f90"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classVoxel_1_1USBSystemPrivate.xhtml#a0ab940eecf5d787ca685b675305a4f90">~USBSystemPrivate</a> ()</td></tr>
<tr class="separator:a0ab940eecf5d787ca685b675305a4f90"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-methods"></a>
Protected Member Functions</h2></td></tr>
<tr class="memitem:afe0937dc9ecaf71f56dc6da8a220a3b3"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classbool.xhtml">bool</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classVoxel_1_1USBSystemPrivate.xhtml#afe0937dc9ecaf71f56dc6da8a220a3b3">_iterateUDevUSB</a> (<a class="el" href="group__Util.xhtml#ga8aaf1e39b1b92e5f2ae6cf09d3ca0623">Function</a>&lt; void(struct udev_device *dev, uint16_t vendorID, uint16_t productID, const <a class="el" href="group__Util.xhtml#gafd72f3b1c8c89d947c44f85bf983f852">String</a> &amp;serial, const <a class="el" href="group__Util.xhtml#gafd72f3b1c8c89d947c44f85bf983f852">String</a> &amp;serialIndex, const <a class="el" href="group__Util.xhtml#gafd72f3b1c8c89d947c44f85bf983f852">String</a> &amp;description)&gt; process)</td></tr>
<tr class="separator:afe0937dc9ecaf71f56dc6da8a220a3b3"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pro-attribs"></a>
Protected Attributes</h2></td></tr>
<tr class="memitem:abdbade05f2c35ef3342f04bae6fa81e3"><td class="memItemLeft" align="right" valign="top">libusb_context *&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classVoxel_1_1USBSystemPrivate.xhtml#abdbade05f2c35ef3342f04bae6fa81e3">_context</a> = 0</td></tr>
<tr class="separator:abdbade05f2c35ef3342f04bae6fa81e3"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pri-methods"></a>
Private Member Functions</h2></td></tr>
<tr class="memitem:a5cc528607175a1d2848e99cac4b29b96"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classbool.xhtml">bool</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classVoxel_1_1USBSystemPrivate.xhtml#a5cc528607175a1d2848e99cac4b29b96">_getDeviceProperty</a> (<a class="el" href="group__IO.xhtml#gaafe7976c9e3804692025b8cc7317ff8e">HDEVINFO</a> devClassInfo, <a class="el" href="structVoxel_1_1DeviceInfo.xhtml">DeviceInfo</a> &amp;devInfo, <a class="el" href="group__IO.xhtml#ga21dc16e4a3028a99c0be8f3943bfb699">DWORD</a> prop, <a class="el" href="group__Util.xhtml#gafd72f3b1c8c89d947c44f85bf983f852">String</a> &amp;result)</td></tr>
<tr class="separator:a5cc528607175a1d2848e99cac4b29b96"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:adb08a1c598a9e40b883c3c2cf49baceb"><td class="memTemplParams" colspan="2">template&lt;typename T &gt; </td></tr>
<tr class="memitem:adb08a1c598a9e40b883c3c2cf49baceb"><td class="memTemplItemLeft" align="right" valign="top"><a class="el" href="classbool.xhtml">bool</a>&#160;</td><td class="memTemplItemRight" valign="bottom"><a class="el" href="classVoxel_1_1USBSystemPrivate.xhtml#adb08a1c598a9e40b883c3c2cf49baceb">_getDeviceProperty</a> (<a class="el" href="group__IO.xhtml#ga6758195ba2a8511818a354eab109583f">HANDLE</a> devHandle, <a class="el" href="group__IO.xhtml#ga21dc16e4a3028a99c0be8f3943bfb699">DWORD</a> prop, <a class="el" href="classVoxel_1_1Ptr.xhtml">Ptr</a>&lt; T &gt; &amp;result, <a class="el" href="group__Util.xhtml#ga8aaf1e39b1b92e5f2ae6cf09d3ca0623">Function</a>&lt; void(T &amp;t)&gt; init=nullptr)</td></tr>
<tr class="separator:adb08a1c598a9e40b883c3c2cf49baceb"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af36cb7f956e2d2a79a9912b725ebada9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classbool.xhtml">bool</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classVoxel_1_1USBSystemPrivate.xhtml#af36cb7f956e2d2a79a9912b725ebada9">_iterateSetupAPI</a> (LPGUID guid, <a class="el" href="group__Util.xhtml#ga8aaf1e39b1b92e5f2ae6cf09d3ca0623">Function</a>&lt; void(<a class="el" href="group__IO.xhtml#gaafe7976c9e3804692025b8cc7317ff8e">HDEVINFO</a> devClassInfo, <a class="el" href="structVoxel_1_1DeviceInfo.xhtml">DeviceInfo</a> &amp;devInfo, <a class="el" href="group__IO.xhtml#ga9c6ee30a321d6103b2a9842ac25327cf">ULONG</a> hubIndex)&gt; process)</td></tr>
<tr class="separator:af36cb7f956e2d2a79a9912b725ebada9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aa1eb26db84e2fd635daf8489a09815ec"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classbool.xhtml">bool</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classVoxel_1_1USBSystemPrivate.xhtml#aa1eb26db84e2fd635daf8489a09815ec">_iterateOverAllDevices</a> (LPGUID guid, <a class="el" href="group__Util.xhtml#ga8aaf1e39b1b92e5f2ae6cf09d3ca0623">Function</a>&lt; void(<a class="el" href="group__IO.xhtml#ga6758195ba2a8511818a354eab109583f">HANDLE</a> hubDevice, <a class="el" href="group__IO.xhtml#ga9c6ee30a321d6103b2a9842ac25327cf">ULONG</a> portIndex, const <a class="el" href="group__Util.xhtml#gafd72f3b1c8c89d947c44f85bf983f852">String</a> &amp;driverKeyName, <a class="el" href="group__CamSys.xhtml#ga8b8c5a5f71759c97cc49332cfeb89d79">DevicePtr</a> &amp;device)&gt; process)</td></tr>
<tr class="separator:aa1eb26db84e2fd635daf8489a09815ec"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a11c3f6b340a600180de9642fa693955e"><td class="memItemLeft" align="right" valign="top">void&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classVoxel_1_1USBSystemPrivate.xhtml#a11c3f6b340a600180de9642fa693955e">_enumerateHub</a> (<a class="el" href="classint.xhtml">int</a> busIndex, const <a class="el" href="group__Util.xhtml#gafd72f3b1c8c89d947c44f85bf983f852">String</a> &amp;hubIndex, const <a class="el" href="group__Util.xhtml#gafd72f3b1c8c89d947c44f85bf983f852">String</a> &amp;hubName, <a class="el" href="group__Util.xhtml#ga8aaf1e39b1b92e5f2ae6cf09d3ca0623">Function</a>&lt; void(<a class="el" href="group__IO.xhtml#ga6758195ba2a8511818a354eab109583f">HANDLE</a> hubDevice, <a class="el" href="group__IO.xhtml#ga9c6ee30a321d6103b2a9842ac25327cf">ULONG</a> portIndex, const <a class="el" href="group__Util.xhtml#gafd72f3b1c8c89d947c44f85bf983f852">String</a> &amp;driverKeyName, <a class="el" href="group__CamSys.xhtml#ga8b8c5a5f71759c97cc49332cfeb89d79">DevicePtr</a> &amp;device)&gt; process)</td></tr>
<tr class="separator:a11c3f6b340a600180de9642fa693955e"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:ad30c8db8ace81c4954ba33bdbf3b76b0"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classbool.xhtml">bool</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classVoxel_1_1USBSystemPrivate.xhtml#ad30c8db8ace81c4954ba33bdbf3b76b0">_getStringDescriptor</a> (<a class="el" href="group__IO.xhtml#ga6758195ba2a8511818a354eab109583f">HANDLE</a> devHandle, <a class="el" href="group__IO.xhtml#ga9c6ee30a321d6103b2a9842ac25327cf">ULONG</a> index, <a class="el" href="group__IO.xhtml#ga2f990e0ad4972e379a182e42f55d6509">UCHAR</a> descriptorIndex, <a class="el" href="group__Util.xhtml#gafd72f3b1c8c89d947c44f85bf983f852">String</a> &amp;descriptor)</td></tr>
<tr class="separator:ad30c8db8ace81c4954ba33bdbf3b76b0"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock">
<p>Definition at line <a class="el" href="USBSystemPrivateLinux_8h_source.xhtml#l00024">24</a> of file <a class="el" href="USBSystemPrivateLinux_8h_source.xhtml">USBSystemPrivateLinux.h</a>.</p>
</div><h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="afbc328c211976c54585df9835b70b68a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Voxel::USBSystemPrivate::USBSystemPrivate </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="USBSystemPrivateLinux_8h_source.xhtml#l00032">32</a> of file <a class="el" href="USBSystemPrivateLinux_8h_source.xhtml">USBSystemPrivateLinux.h</a>.</p>

<p>References <a class="el" href="USBSystemPrivateLinux_8h_source.xhtml#l00027">_context</a>.</p>
<div class="fragment"><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;  {</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;    <span class="keywordtype">int</span> ret = libusb_init(&amp;<a class="code" href="classVoxel_1_1USBSystemPrivate.xhtml#abdbade05f2c35ef3342f04bae6fa81e3">_context</a>);</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;    </div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;    <span class="keywordflow">if</span>(ret != LIBUSB_SUCCESS)</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    {</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;      std::cerr &lt;&lt; <span class="stringliteral">&quot;Initialization of USB library failed&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;      <a class="code" href="classVoxel_1_1USBSystemPrivate.xhtml#abdbade05f2c35ef3342f04bae6fa81e3">_context</a> = 0;</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;      <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;    }</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;  }</div>
<div class="ttc" id="classVoxel_1_1USBSystemPrivate_xhtml_abdbade05f2c35ef3342f04bae6fa81e3"><div class="ttname"><a href="classVoxel_1_1USBSystemPrivate.xhtml#abdbade05f2c35ef3342f04bae6fa81e3">Voxel::USBSystemPrivate::_context</a></div><div class="ttdeci">libusb_context * _context</div><div class="ttdef"><b>Definition:</b> <a href="USBSystemPrivateLinux_8h_source.xhtml#l00027">USBSystemPrivateLinux.h:27</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a0ab940eecf5d787ca685b675305a4f90"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual Voxel::USBSystemPrivate::~USBSystemPrivate </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="USBSystemPrivateLinux_8h_source.xhtml#l00061">61</a> of file <a class="el" href="USBSystemPrivateLinux_8h_source.xhtml">USBSystemPrivateLinux.h</a>.</p>

<p>References <a class="el" href="USBSystemPrivateLinux_8h_source.xhtml#l00027">_context</a>.</p>
<div class="fragment"><div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;  {</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="classVoxel_1_1USBSystemPrivate.xhtml#abdbade05f2c35ef3342f04bae6fa81e3">_context</a>)</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    {</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;      libusb_exit(<a class="code" href="classVoxel_1_1USBSystemPrivate.xhtml#abdbade05f2c35ef3342f04bae6fa81e3">_context</a>);</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;      <a class="code" href="classVoxel_1_1USBSystemPrivate.xhtml#abdbade05f2c35ef3342f04bae6fa81e3">_context</a> = 0;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    }</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;  }</div>
<div class="ttc" id="classVoxel_1_1USBSystemPrivate_xhtml_abdbade05f2c35ef3342f04bae6fa81e3"><div class="ttname"><a href="classVoxel_1_1USBSystemPrivate.xhtml#abdbade05f2c35ef3342f04bae6fa81e3">Voxel::USBSystemPrivate::_context</a></div><div class="ttdeci">libusb_context * _context</div><div class="ttdef"><b>Definition:</b> <a href="USBSystemPrivateLinux_8h_source.xhtml#l00027">USBSystemPrivateLinux.h:27</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="afbc328c211976c54585df9835b70b68a"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Voxel::USBSystemPrivate::USBSystemPrivate </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="USBSystemPrivateWindows_8h_source.xhtml#l00055">55</a> of file <a class="el" href="USBSystemPrivateWindows_8h_source.xhtml">USBSystemPrivateWindows.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;{}</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a0ab940eecf5d787ca685b675305a4f90"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual Voxel::USBSystemPrivate::~USBSystemPrivate </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="USBSystemPrivateWindows_8h_source.xhtml#l00065">65</a> of file <a class="el" href="USBSystemPrivateWindows_8h_source.xhtml">USBSystemPrivateWindows.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;{}</div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a11c3f6b340a600180de9642fa693955e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">void Voxel::USBSystemPrivate::_enumerateHub </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="classint.xhtml">int</a>&#160;</td>
          <td class="paramname"><em>busIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="group__Util.xhtml#gafd72f3b1c8c89d947c44f85bf983f852">String</a> &amp;&#160;</td>
          <td class="paramname"><em>hubIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="group__Util.xhtml#gafd72f3b1c8c89d947c44f85bf983f852">String</a> &amp;&#160;</td>
          <td class="paramname"><em>hubName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__Util.xhtml#ga8aaf1e39b1b92e5f2ae6cf09d3ca0623">Function</a>&lt; void(<a class="el" href="group__IO.xhtml#ga6758195ba2a8511818a354eab109583f">HANDLE</a> hubDevice, <a class="el" href="group__IO.xhtml#ga9c6ee30a321d6103b2a9842ac25327cf">ULONG</a> portIndex, const <a class="el" href="group__Util.xhtml#gafd72f3b1c8c89d947c44f85bf983f852">String</a> &amp;driverKeyName, <a class="el" href="group__CamSys.xhtml#ga8b8c5a5f71759c97cc49332cfeb89d79">DevicePtr</a> &amp;device)&gt;&#160;</td>
          <td class="paramname"><em>process</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="USBSystemPrivateWindows_8cpp_source.xhtml#l00164">164</a> of file <a class="el" href="USBSystemPrivateWindows_8cpp_source.xhtml">USBSystemPrivateWindows.cpp</a>.</p>

<p>References <a class="el" href="USBSystemPrivateWindows_8cpp_source.xhtml#l00263">_getStringDescriptor()</a>, <a class="el" href="Logger_8h_source.xhtml#l00030">Voxel::LOG_DEBUG</a>, <a class="el" href="Logger_8h_source.xhtml#l00027">Voxel::LOG_ERROR</a>, and <a class="el" href="Logger_8h_source.xhtml#l00180">Voxel::logger</a>.</p>

<p>Referenced by <a class="el" href="USBSystemPrivateWindows_8cpp_source.xhtml#l00327">_iterateOverAllDevices()</a>.</p>
<div class="fragment"><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;{</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;  <a class="code" href="classString.xhtml">String</a> deviceName = <span class="stringliteral">&quot;\\\\.\\&quot;</span> + hubName;</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;  <a class="code" href="group__IO.xhtml#ga6758195ba2a8511818a354eab109583f">HANDLE</a> hHubDevice = CreateFile(deviceName.c_str(), GENERIC_WRITE, FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;  <span class="keywordflow">if</span> (hHubDevice == INVALID_HANDLE_VALUE)</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;  {</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;USBSystem: Could not open handle to device = &#39;&quot;</span> &lt;&lt; deviceName &lt;&lt; <span class="stringliteral">&quot;&#39;&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;  }</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;  USB_NODE_INFORMATION hubInfo;</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;  <a class="code" href="group__IO.xhtml#ga9c6ee30a321d6103b2a9842ac25327cf">ULONG</a> nBytes = 0;</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;  <span class="keywordflow">if</span> (!DeviceIoControl(hHubDevice, IOCTL_USB_GET_NODE_INFORMATION, &amp;hubInfo, <span class="keyword">sizeof</span>(USB_NODE_INFORMATION), &amp;hubInfo, <span class="keyword">sizeof</span>(USB_NODE_INFORMATION), &amp;nBytes, NULL))</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;  {</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;USBSystem: Could not get information about USB hub device = &#39;&quot;</span> &lt;&lt; deviceName &lt;&lt; <span class="stringliteral">&quot;&#39;&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    CloseHandle(hHubDevice);</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;  }</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;  <a class="code" href="group__IO.xhtml#ga9c6ee30a321d6103b2a9842ac25327cf">ULONG</a> numPorts = hubInfo.u.HubInformation.HubDescriptor.bNumberOfPorts;</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;  <span class="comment">// Support for information + upto 30 end point informations</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;  nBytes = <span class="keyword">sizeof</span>(USB_NODE_CONNECTION_INFORMATION) + <span class="keyword">sizeof</span>(USB_PIPE_INFO) * 30;</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;  Ptr&lt;USB_NODE_CONNECTION_INFORMATION&gt; connectionInfo = byteAlloc&lt;USB_NODE_CONNECTION_INFORMATION&gt;(nBytes);</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;  <span class="keywordflow">for</span> (<a class="code" href="group__IO.xhtml#ga9c6ee30a321d6103b2a9842ac25327cf">ULONG</a> index = 1; index &lt;= numPorts; index++)</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;  {</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    connectionInfo-&gt;ConnectionIndex = index;</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="keywordflow">if</span> (!DeviceIoControl(hHubDevice, IOCTL_USB_GET_NODE_CONNECTION_INFORMATION, &amp;*connectionInfo, nBytes, &amp;*connectionInfo, nBytes, &amp;nBytes, NULL))</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    {</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;      <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;USBSystem: Could not get information about device = &quot;</span> &lt;&lt; index &lt;&lt; <span class="stringliteral">&quot; connected to USB hub device = &#39;&quot;</span> &lt;&lt; deviceName &lt;&lt; <span class="stringliteral">&quot;&#39;&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;      <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    }</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keywordflow">if</span> (connectionInfo-&gt;ConnectionStatus != DeviceConnected)</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;      <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <a class="code" href="classString.xhtml">String</a> portIndex = (hubIndex.size() ? (hubIndex + <span class="stringliteral">&quot;.&quot;</span> + std::to_string(index)) : std::to_string(index));</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="keywordflow">if</span> (connectionInfo-&gt;DeviceIsHub)</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    {</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;      Ptr&lt;USB_NODE_CONNECTION_NAME&gt; usbNodeName;</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;      <span class="keywordflow">if</span> (!_getDeviceProperty&lt;USB_NODE_CONNECTION_NAME&gt;(hHubDevice, IOCTL_USB_GET_NODE_CONNECTION_NAME, usbNodeName, [index](USB_NODE_CONNECTION_NAME &amp;t) { t.ConnectionIndex = index; }))</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;      {</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;USBSystem: Could not get node name of device = &quot;</span> &lt;&lt; index &lt;&lt; <span class="stringliteral">&quot; connected to USB hub device = &#39;&quot;</span> &lt;&lt; deviceName &lt;&lt; <span class="stringliteral">&quot;&#39;&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;      }</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;      _bstr_t b(usbNodeName-&gt;NodeName);</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;      <a class="code" href="classString.xhtml">String</a> nodeName = b;</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;      <a class="code" href="classVoxel_1_1USBSystemPrivate.xhtml#a11c3f6b340a600180de9642fa693955e">_enumerateHub</a>(busIndex, portIndex, nodeName, process);</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    }</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    {</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;      Ptr&lt;USB_NODE_CONNECTION_DRIVERKEY_NAME&gt; usbNodeName;</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;      <span class="keywordflow">if</span> (!_getDeviceProperty&lt;USB_NODE_CONNECTION_DRIVERKEY_NAME&gt;(hHubDevice, IOCTL_USB_GET_NODE_CONNECTION_DRIVERKEY_NAME, usbNodeName, [index](USB_NODE_CONNECTION_DRIVERKEY_NAME &amp;t) { t.ConnectionIndex = index; }))</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;      {</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;USBSystem: Could not get node name of device = &quot;</span> &lt;&lt; index &lt;&lt; <span class="stringliteral">&quot; connected to USB hub device = &#39;&quot;</span> &lt;&lt; deviceName &lt;&lt; <span class="stringliteral">&quot;&#39;&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;      }</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;      _bstr_t b(usbNodeName-&gt;DriverKeyName);</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;      <a class="code" href="classString.xhtml">String</a> driverKeyName = b;</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;      <a class="code" href="classString.xhtml">String</a> product, manufacturer, serialNumber, description;</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;      <span class="keywordtype">bool</span> ret1 = <a class="code" href="classVoxel_1_1USBSystemPrivate.xhtml#ad30c8db8ace81c4954ba33bdbf3b76b0">_getStringDescriptor</a>(hHubDevice, index, connectionInfo-&gt;DeviceDescriptor.iProduct, product);</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;      <span class="keywordtype">bool</span> ret2 = <a class="code" href="classVoxel_1_1USBSystemPrivate.xhtml#ad30c8db8ace81c4954ba33bdbf3b76b0">_getStringDescriptor</a>(hHubDevice, index, connectionInfo-&gt;DeviceDescriptor.iManufacturer, manufacturer);</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;      <span class="keywordtype">bool</span> ret3 = <a class="code" href="classVoxel_1_1USBSystemPrivate.xhtml#ad30c8db8ace81c4954ba33bdbf3b76b0">_getStringDescriptor</a>(hHubDevice, index, connectionInfo-&gt;DeviceDescriptor.iSerialNumber, serialNumber);</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;      <span class="keywordflow">if</span> (!(ret1 &amp;&amp; ret2 &amp;&amp; ret3))</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;      {</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758ad625895b380d0d8fc7ef71ef75429b7a">LOG_DEBUG</a>) &lt;&lt; <span class="stringliteral">&quot;USBSystem: Could not get request string descriptors for connection index = &quot;</span> &lt;&lt; index &lt;&lt; <span class="stringliteral">&quot; connected to USB hub device = &#39;&quot;</span> &lt;&lt; deviceName &lt;&lt; <span class="stringliteral">&quot;&#39;&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;      }</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;      <span class="keywordflow">if</span> (manufacturer.size() &amp;&amp; product.size())</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        description = manufacturer + <span class="stringliteral">&quot; - &quot;</span> + product;</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (manufacturer.size())</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        description = manufacturer;</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (product.size())</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        description = product;</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;      </div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;      <span class="keywordflow">if</span> (process)</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        process(hHubDevice, index, driverKeyName, <a class="code" href="group__CamSys.xhtml#ga8b8c5a5f71759c97cc49332cfeb89d79">DevicePtr</a>(<span class="keyword">new</span> USBDevice(connectionInfo-&gt;DeviceDescriptor.idVendor, connectionInfo-&gt;DeviceDescriptor.idProduct, serialNumber, -1, description, std::to_string(busIndex) + <span class="stringliteral">&quot;:&quot;</span> + portIndex)));</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    }</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;  }</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;  CloseHandle(hHubDevice);</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;}</div>
<div class="ttc" id="group__Util_xhtml_gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0"><div class="ttname"><a href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">Voxel::LOG_ERROR</a></div><div class="ttdef"><b>Definition:</b> <a href="Logger_8h_source.xhtml#l00027">Logger.h:27</a></div></div>
<div class="ttc" id="group__CamSys_xhtml_ga8b8c5a5f71759c97cc49332cfeb89d79"><div class="ttname"><a href="group__CamSys.xhtml#ga8b8c5a5f71759c97cc49332cfeb89d79">Voxel::DevicePtr</a></div><div class="ttdeci">Ptr&lt; Device &gt; DevicePtr</div><div class="ttdef"><b>Definition:</b> <a href="Device_8h_source.xhtml#l00079">Device.h:79</a></div></div>
<div class="ttc" id="classVoxel_1_1USBSystemPrivate_xhtml_a11c3f6b340a600180de9642fa693955e"><div class="ttname"><a href="classVoxel_1_1USBSystemPrivate.xhtml#a11c3f6b340a600180de9642fa693955e">Voxel::USBSystemPrivate::_enumerateHub</a></div><div class="ttdeci">void _enumerateHub(int busIndex, const String &amp;hubIndex, const String &amp;hubName, Function&lt; void(HANDLE hubDevice, ULONG portIndex, const String &amp;driverKeyName, DevicePtr &amp;device)&gt; process)</div><div class="ttdef"><b>Definition:</b> <a href="USBSystemPrivateWindows_8cpp_source.xhtml#l00164">USBSystemPrivateWindows.cpp:164</a></div></div>
<div class="ttc" id="group__IO_xhtml_ga6758195ba2a8511818a354eab109583f"><div class="ttname"><a href="group__IO.xhtml#ga6758195ba2a8511818a354eab109583f">Voxel::HANDLE</a></div><div class="ttdeci">void * HANDLE</div><div class="ttdef"><b>Definition:</b> <a href="USBSystemPrivateWindows_8h_source.xhtml#l00028">USBSystemPrivateWindows.h:28</a></div></div>
<div class="ttc" id="group__IO_xhtml_ga9c6ee30a321d6103b2a9842ac25327cf"><div class="ttname"><a href="group__IO.xhtml#ga9c6ee30a321d6103b2a9842ac25327cf">Voxel::ULONG</a></div><div class="ttdeci">unsigned long ULONG</div><div class="ttdef"><b>Definition:</b> <a href="USBSystemPrivateWindows_8h_source.xhtml#l00032">USBSystemPrivateWindows.h:32</a></div></div>
<div class="ttc" id="classVoxel_1_1USBSystemPrivate_xhtml_ad30c8db8ace81c4954ba33bdbf3b76b0"><div class="ttname"><a href="classVoxel_1_1USBSystemPrivate.xhtml#ad30c8db8ace81c4954ba33bdbf3b76b0">Voxel::USBSystemPrivate::_getStringDescriptor</a></div><div class="ttdeci">bool _getStringDescriptor(HANDLE devHandle, ULONG index, UCHAR descriptorIndex, String &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="USBSystemPrivateWindows_8cpp_source.xhtml#l00263">USBSystemPrivateWindows.cpp:263</a></div></div>
<div class="ttc" id="group__Util_xhtml_gabd012fcbae5565e03008afef1fd4f261"><div class="ttname"><a href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">Voxel::logger</a></div><div class="ttdeci">Logger logger(LOG_WARNING)</div><div class="ttdef"><b>Definition:</b> <a href="Logger_8h_source.xhtml#l00180">Logger.h:180</a></div></div>
<div class="ttc" id="group__Util_xhtml_gga3b552e0c33cfe1ca3a0752dbd986b758ad625895b380d0d8fc7ef71ef75429b7a"><div class="ttname"><a href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758ad625895b380d0d8fc7ef71ef75429b7a">Voxel::LOG_DEBUG</a></div><div class="ttdef"><b>Definition:</b> <a href="Logger_8h_source.xhtml#l00030">Logger.h:30</a></div></div>
<div class="ttc" id="classString_xhtml"><div class="ttname"><a href="classString.xhtml">String</a></div></div>
</div><!-- fragment -->
<p><div id="dynsection-1" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classVoxel_1_1USBSystemPrivate_a11c3f6b340a600180de9642fa693955e_cgraph.svg" width="416" height="51"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</p>

<p><div id="dynsection-2" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-2-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-2-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-2-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classVoxel_1_1USBSystemPrivate_a11c3f6b340a600180de9642fa693955e_icgraph.svg" width="416" height="51"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</p>

</div>
</div>
<a class="anchor" id="a5cc528607175a1d2848e99cac4b29b96"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classbool.xhtml">bool</a> Voxel::USBSystemPrivate::_getDeviceProperty </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__IO.xhtml#gaafe7976c9e3804692025b8cc7317ff8e">HDEVINFO</a>&#160;</td>
          <td class="paramname"><em>devClassInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="structVoxel_1_1DeviceInfo.xhtml">DeviceInfo</a> &amp;&#160;</td>
          <td class="paramname"><em>devInfo</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__IO.xhtml#ga21dc16e4a3028a99c0be8f3943bfb699">DWORD</a>&#160;</td>
          <td class="paramname"><em>prop</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__Util.xhtml#gafd72f3b1c8c89d947c44f85bf983f852">String</a> &amp;&#160;</td>
          <td class="paramname"><em>result</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="USBSystemPrivateWindows_8cpp_source.xhtml#l00062">62</a> of file <a class="el" href="USBSystemPrivateWindows_8cpp_source.xhtml">USBSystemPrivateWindows.cpp</a>.</p>

<p>References <a class="el" href="USBSystemPrivateWindows_8cpp_source.xhtml#l00018">Voxel::DeviceInfo::devInfo</a>.</p>

<p>Referenced by <a class="el" href="USBSystemPrivateWindows_8cpp_source.xhtml#l00327">_iterateOverAllDevices()</a>.</p>
<div class="fragment"><div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;{</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;  BOOL bResult;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;  <a class="code" href="group__IO.xhtml#ga21dc16e4a3028a99c0be8f3943bfb699">DWORD</a> requiredLength = 0;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;  </div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;  ppBuffer.clear();</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;  bResult = SetupDiGetDeviceRegistryProperty(devClassInfo, &amp;devInfo.devInfo, prop, NULL, NULL, 0, &amp;requiredLength);</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;  </div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;  <span class="keywordflow">if</span> ((requiredLength == 0) || (bResult &amp;&amp; GetLastError() != ERROR_INSUFFICIENT_BUFFER))</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;  </div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;  ppBuffer.resize(requiredLength - 1); <span class="comment">// but set size to one less to not consider null character</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;  ppBuffer.reserve(requiredLength);<span class="comment">// Give space for null character</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;  <span class="keywordflow">return</span> SetupDiGetDeviceRegistryProperty(devClassInfo, &amp;devInfo.devInfo, prop, NULL, (PBYTE)ppBuffer.data(), requiredLength, &amp;requiredLength);</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;}</div>
<div class="ttc" id="group__IO_xhtml_ga21dc16e4a3028a99c0be8f3943bfb699"><div class="ttname"><a href="group__IO.xhtml#ga21dc16e4a3028a99c0be8f3943bfb699">Voxel::DWORD</a></div><div class="ttdeci">unsigned long DWORD</div><div class="ttdef"><b>Definition:</b> <a href="USBSystemPrivateWindows_8h_source.xhtml#l00031">USBSystemPrivateWindows.h:31</a></div></div>
</div><!-- fragment -->
<p><div id="dynsection-3" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-3-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-3-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-3-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classVoxel_1_1USBSystemPrivate_a5cc528607175a1d2848e99cac4b29b96_icgraph.svg" width="416" height="51"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</p>

</div>
</div>
<a class="anchor" id="adb08a1c598a9e40b883c3c2cf49baceb"></a>
<div class="memitem">
<div class="memproto">
<div class="memtemplate">
template&lt;typename T &gt; </div>
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classbool.xhtml">bool</a> Voxel::USBSystemPrivate::_getDeviceProperty </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__IO.xhtml#ga6758195ba2a8511818a354eab109583f">HANDLE</a>&#160;</td>
          <td class="paramname"><em>devHandle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__IO.xhtml#ga21dc16e4a3028a99c0be8f3943bfb699">DWORD</a>&#160;</td>
          <td class="paramname"><em>prop</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classVoxel_1_1Ptr.xhtml">Ptr</a>&lt; T &gt; &amp;&#160;</td>
          <td class="paramname"><em>result</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__Util.xhtml#ga8aaf1e39b1b92e5f2ae6cf09d3ca0623">Function</a>&lt; void(T &amp;t)&gt;&#160;</td>
          <td class="paramname"><em>init</em> = <code>nullptr</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="USBSystemPrivateWindows_8cpp_source.xhtml#l00081">81</a> of file <a class="el" href="USBSystemPrivateWindows_8cpp_source.xhtml">USBSystemPrivateWindows.cpp</a>.</p>
<div class="fragment"><div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;{</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;  <a class="code" href="group__IO.xhtml#ga9c6ee30a321d6103b2a9842ac25327cf">ULONG</a> nBytes = 0;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;  T t;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;  <span class="keywordflow">if</span> (init)</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    init(t);</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;  <span class="keywordflow">if</span> (!DeviceIoControl(devHandle, prop, &amp;t, <span class="keyword">sizeof</span>(T), &amp;t, <span class="keyword">sizeof</span>(T), &amp;nBytes, NULL))</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;  nBytes = t.ActualLength;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;  result = byteAlloc&lt;T&gt;(t.ActualLength); <span class="comment">// Actual required size with custom deleter to reconvert to byte type and delete.</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;  <span class="keywordflow">if</span> (!result)</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;  <span class="keywordflow">if</span> (init)</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    init(*result);</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;  <span class="keywordflow">return</span> DeviceIoControl(devHandle, prop, &amp;*result, nBytes, &amp;*result, nBytes, &amp;nBytes, NULL);</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;}</div>
<div class="ttc" id="group__IO_xhtml_ga9c6ee30a321d6103b2a9842ac25327cf"><div class="ttname"><a href="group__IO.xhtml#ga9c6ee30a321d6103b2a9842ac25327cf">Voxel::ULONG</a></div><div class="ttdeci">unsigned long ULONG</div><div class="ttdef"><b>Definition:</b> <a href="USBSystemPrivateWindows_8h_source.xhtml#l00032">USBSystemPrivateWindows.h:32</a></div></div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="ad30c8db8ace81c4954ba33bdbf3b76b0"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classbool.xhtml">bool</a> Voxel::USBSystemPrivate::_getStringDescriptor </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__IO.xhtml#ga6758195ba2a8511818a354eab109583f">HANDLE</a>&#160;</td>
          <td class="paramname"><em>devHandle</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__IO.xhtml#ga9c6ee30a321d6103b2a9842ac25327cf">ULONG</a>&#160;</td>
          <td class="paramname"><em>index</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__IO.xhtml#ga2f990e0ad4972e379a182e42f55d6509">UCHAR</a>&#160;</td>
          <td class="paramname"><em>descriptorIndex</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__Util.xhtml#gafd72f3b1c8c89d947c44f85bf983f852">String</a> &amp;&#160;</td>
          <td class="paramname"><em>descriptor</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="USBSystemPrivateWindows_8cpp_source.xhtml#l00263">263</a> of file <a class="el" href="USBSystemPrivateWindows_8cpp_source.xhtml">USBSystemPrivateWindows.cpp</a>.</p>

<p>References <a class="el" href="Logger_8h_source.xhtml#l00030">Voxel::LOG_DEBUG</a>, and <a class="el" href="Logger_8h_source.xhtml#l00180">Voxel::logger</a>.</p>

<p>Referenced by <a class="el" href="USBSystemPrivateWindows_8cpp_source.xhtml#l00164">_enumerateHub()</a>.</p>
<div class="fragment"><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;{</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;  <a class="code" href="group__IO.xhtml#ga9c6ee30a321d6103b2a9842ac25327cf">ULONG</a>   nBytes = <span class="keyword">sizeof</span>(USB_DESCRIPTOR_REQUEST) + MAXIMUM_USB_STRING_LENGTH;</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;  <a class="code" href="group__IO.xhtml#ga9c6ee30a321d6103b2a9842ac25327cf">ULONG</a>   nBytesReturned = 0;</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;  <span class="keywordflow">if</span> (descriptorIndex == 0) <span class="comment">// No descriptor available</span></div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;  {</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    descriptor.clear();</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;  }</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;  Ptr&lt;USB_DESCRIPTOR_REQUEST&gt; request = byteAlloc&lt;USB_DESCRIPTOR_REQUEST&gt;(nBytes);</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;  USB_STRING_DESCRIPTOR *stringDescriptor = (USB_STRING_DESCRIPTOR *)(request.get() + 1); <span class="comment">// Appended to the end after sizeof(USB_DESCRIPTOR_REQUEST)</span></div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;  <span class="comment">// Zero fill the entire request structure</span></div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;  <span class="comment">//</span></div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;  memset(request.get(), 0, nBytes);</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;  <span class="comment">// Indicate the port from which the descriptor will be requested</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;  <span class="comment">//</span></div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;  request-&gt;ConnectionIndex = index;</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;  <span class="comment">//</span></div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;  <span class="comment">// USBHUB uses URB_FUNCTION_GET_DESCRIPTOR_FROM_DEVICE to process this</span></div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;  <span class="comment">// IOCTL_USB_GET_DESCRIPTOR_FROM_NODE_CONNECTION request.</span></div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;  <span class="comment">//</span></div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;  <span class="comment">// USBD will automatically initialize these fields:</span></div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;  <span class="comment">//     bmRequest = 0x80</span></div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;  <span class="comment">//     bRequest  = 0x06</span></div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;  <span class="comment">//</span></div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;  <span class="comment">// We must inititialize these fields:</span></div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;  <span class="comment">//     wValue    = Descriptor Type (high) and Descriptor Index (low byte)</span></div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;  <span class="comment">//     wIndex    = Zero (or Language ID for String Descriptors)</span></div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;  <span class="comment">//     wLength   = Length of descriptor buffer</span></div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;  <span class="comment">//</span></div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;  request-&gt;SetupPacket.wValue = (USB_STRING_DESCRIPTOR_TYPE &lt;&lt; 8) | descriptorIndex;</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;  request-&gt;SetupPacket.wIndex = 0; <span class="comment">// Using language ID zero</span></div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;  request-&gt;SetupPacket.wLength = (USHORT)(nBytes - <span class="keyword">sizeof</span>(USB_DESCRIPTOR_REQUEST));</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;  <span class="comment">// Now issue the get descriptor request.</span></div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;  <span class="comment">//</span></div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;  <span class="keywordflow">if</span> (!DeviceIoControl(devHandle, IOCTL_USB_GET_DESCRIPTOR_FROM_NODE_CONNECTION, &amp;*request, nBytes, &amp;*request, nBytes, &amp;nBytesReturned, NULL))</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;  {</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758ad625895b380d0d8fc7ef71ef75429b7a">LOG_DEBUG</a>) &lt;&lt; <span class="stringliteral">&quot;USBSystem: Could not get string descriptor = &quot;</span> &lt;&lt; (uint)descriptorIndex &lt;&lt; <span class="stringliteral">&quot; for connection index = &quot;</span> &lt;&lt; index &lt;&lt; std::endl;</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;  }</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;  <span class="keywordflow">if</span> (nBytesReturned &lt; 2 || stringDescriptor-&gt;bDescriptorType != USB_STRING_DESCRIPTOR_TYPE || </div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    (stringDescriptor-&gt;bLength != nBytesReturned - <span class="keyword">sizeof</span>(USB_DESCRIPTOR_REQUEST)) || </div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    stringDescriptor-&gt;bLength % 2 != 0)</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;  {</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758ad625895b380d0d8fc7ef71ef75429b7a">LOG_DEBUG</a>) &lt;&lt; <span class="stringliteral">&quot;USBSystem: Got invalid string descriptor = &quot;</span> &lt;&lt; (uint)descriptorIndex &lt;&lt; <span class="stringliteral">&quot; for connection index = &quot;</span> &lt;&lt; index &lt;&lt; std::endl;</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;  }</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;  _bstr_t b(stringDescriptor-&gt;bString);</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;  descriptor = b;</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;  </div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;}</div>
<div class="ttc" id="group__IO_xhtml_ga9c6ee30a321d6103b2a9842ac25327cf"><div class="ttname"><a href="group__IO.xhtml#ga9c6ee30a321d6103b2a9842ac25327cf">Voxel::ULONG</a></div><div class="ttdeci">unsigned long ULONG</div><div class="ttdef"><b>Definition:</b> <a href="USBSystemPrivateWindows_8h_source.xhtml#l00032">USBSystemPrivateWindows.h:32</a></div></div>
<div class="ttc" id="group__Util_xhtml_gabd012fcbae5565e03008afef1fd4f261"><div class="ttname"><a href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">Voxel::logger</a></div><div class="ttdeci">Logger logger(LOG_WARNING)</div><div class="ttdef"><b>Definition:</b> <a href="Logger_8h_source.xhtml#l00180">Logger.h:180</a></div></div>
<div class="ttc" id="group__Util_xhtml_gga3b552e0c33cfe1ca3a0752dbd986b758ad625895b380d0d8fc7ef71ef75429b7a"><div class="ttname"><a href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758ad625895b380d0d8fc7ef71ef75429b7a">Voxel::LOG_DEBUG</a></div><div class="ttdef"><b>Definition:</b> <a href="Logger_8h_source.xhtml#l00030">Logger.h:30</a></div></div>
</div><!-- fragment -->
<p><div id="dynsection-4" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-4-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-4-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-4-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classVoxel_1_1USBSystemPrivate_ad30c8db8ace81c4954ba33bdbf3b76b0_icgraph.svg" width="643" height="51"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</p>

</div>
</div>
<a class="anchor" id="aa1eb26db84e2fd635daf8489a09815ec"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classbool.xhtml">bool</a> Voxel::USBSystemPrivate::_iterateOverAllDevices </td>
          <td>(</td>
          <td class="paramtype">LPGUID&#160;</td>
          <td class="paramname"><em>guid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__Util.xhtml#ga8aaf1e39b1b92e5f2ae6cf09d3ca0623">Function</a>&lt; void(<a class="el" href="group__IO.xhtml#ga6758195ba2a8511818a354eab109583f">HANDLE</a> hubDevice, <a class="el" href="group__IO.xhtml#ga9c6ee30a321d6103b2a9842ac25327cf">ULONG</a> portIndex, const <a class="el" href="group__Util.xhtml#gafd72f3b1c8c89d947c44f85bf983f852">String</a> &amp;driverKeyName, <a class="el" href="group__CamSys.xhtml#ga8b8c5a5f71759c97cc49332cfeb89d79">DevicePtr</a> &amp;device)&gt;&#160;</td>
          <td class="paramname"><em>process</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="USBSystemPrivateWindows_8cpp_source.xhtml#l00327">327</a> of file <a class="el" href="USBSystemPrivateWindows_8cpp_source.xhtml">USBSystemPrivateWindows.cpp</a>.</p>

<p>References <a class="el" href="USBSystemPrivateWindows_8cpp_source.xhtml#l00164">_enumerateHub()</a>, <a class="el" href="USBSystemPrivateWindows_8cpp_source.xhtml#l00062">_getDeviceProperty()</a>, <a class="el" href="USBSystemPrivateWindows_8cpp_source.xhtml#l00106">_iterateSetupAPI()</a>, and <a class="el" href="USBSystemPrivateWindows_8cpp_source.xhtml#l00020">Voxel::DeviceInfo::devInterfaceDetailData</a>.</p>
<div class="fragment"><div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;{</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="classVoxel_1_1USBSystemPrivate.xhtml#af36cb7f956e2d2a79a9912b725ebada9">_iterateSetupAPI</a>(guid, [<span class="keyword">this</span>, &amp;process](<a class="code" href="group__IO.xhtml#gaafe7976c9e3804692025b8cc7317ff8e">HDEVINFO</a> devClassInfo, DeviceInfo &amp;devInfo, <a class="code" href="group__IO.xhtml#ga9c6ee30a321d6103b2a9842ac25327cf">ULONG</a> hubIndex) {</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    <a class="code" href="group__IO.xhtml#ga6758195ba2a8511818a354eab109583f">HANDLE</a> hHCDev = CreateFile(devInfo.devInterfaceDetailData-&gt;DevicePath, GENERIC_WRITE, FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    <span class="keywordflow">if</span> (hHCDev != INVALID_HANDLE_VALUE)</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    {</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;      Ptr&lt;USB_ROOT_HUB_NAME&gt; rootHubName;</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;      <span class="keywordflow">if</span> (!<a class="code" href="classVoxel_1_1USBSystemPrivate.xhtml#a5cc528607175a1d2848e99cac4b29b96">_getDeviceProperty</a>(hHCDev, IOCTL_USB_GET_ROOT_HUB_NAME, rootHubName))</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;      _bstr_t b(rootHubName-&gt;RootHubName);</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;      </div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;      <a class="code" href="classString.xhtml">String</a> hubName = b;</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;      <a class="code" href="classVoxel_1_1USBSystemPrivate.xhtml#a11c3f6b340a600180de9642fa693955e">_enumerateHub</a>(hubIndex + 1, <span class="stringliteral">&quot;&quot;</span>, hubName, process);</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    }</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    CloseHandle(hHCDev);</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;  });</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;}</div>
<div class="ttc" id="classVoxel_1_1USBSystemPrivate_xhtml_a11c3f6b340a600180de9642fa693955e"><div class="ttname"><a href="classVoxel_1_1USBSystemPrivate.xhtml#a11c3f6b340a600180de9642fa693955e">Voxel::USBSystemPrivate::_enumerateHub</a></div><div class="ttdeci">void _enumerateHub(int busIndex, const String &amp;hubIndex, const String &amp;hubName, Function&lt; void(HANDLE hubDevice, ULONG portIndex, const String &amp;driverKeyName, DevicePtr &amp;device)&gt; process)</div><div class="ttdef"><b>Definition:</b> <a href="USBSystemPrivateWindows_8cpp_source.xhtml#l00164">USBSystemPrivateWindows.cpp:164</a></div></div>
<div class="ttc" id="classVoxel_1_1USBSystemPrivate_xhtml_a5cc528607175a1d2848e99cac4b29b96"><div class="ttname"><a href="classVoxel_1_1USBSystemPrivate.xhtml#a5cc528607175a1d2848e99cac4b29b96">Voxel::USBSystemPrivate::_getDeviceProperty</a></div><div class="ttdeci">bool _getDeviceProperty(HDEVINFO devClassInfo, DeviceInfo &amp;devInfo, DWORD prop, String &amp;result)</div><div class="ttdef"><b>Definition:</b> <a href="USBSystemPrivateWindows_8cpp_source.xhtml#l00062">USBSystemPrivateWindows.cpp:62</a></div></div>
<div class="ttc" id="group__IO_xhtml_ga6758195ba2a8511818a354eab109583f"><div class="ttname"><a href="group__IO.xhtml#ga6758195ba2a8511818a354eab109583f">Voxel::HANDLE</a></div><div class="ttdeci">void * HANDLE</div><div class="ttdef"><b>Definition:</b> <a href="USBSystemPrivateWindows_8h_source.xhtml#l00028">USBSystemPrivateWindows.h:28</a></div></div>
<div class="ttc" id="group__IO_xhtml_ga9c6ee30a321d6103b2a9842ac25327cf"><div class="ttname"><a href="group__IO.xhtml#ga9c6ee30a321d6103b2a9842ac25327cf">Voxel::ULONG</a></div><div class="ttdeci">unsigned long ULONG</div><div class="ttdef"><b>Definition:</b> <a href="USBSystemPrivateWindows_8h_source.xhtml#l00032">USBSystemPrivateWindows.h:32</a></div></div>
<div class="ttc" id="group__IO_xhtml_gaafe7976c9e3804692025b8cc7317ff8e"><div class="ttname"><a href="group__IO.xhtml#gaafe7976c9e3804692025b8cc7317ff8e">Voxel::HDEVINFO</a></div><div class="ttdeci">void * HDEVINFO</div><div class="ttdef"><b>Definition:</b> <a href="USBSystemPrivateWindows_8h_source.xhtml#l00030">USBSystemPrivateWindows.h:30</a></div></div>
<div class="ttc" id="classString_xhtml"><div class="ttname"><a href="classString.xhtml">String</a></div></div>
<div class="ttc" id="classVoxel_1_1USBSystemPrivate_xhtml_af36cb7f956e2d2a79a9912b725ebada9"><div class="ttname"><a href="classVoxel_1_1USBSystemPrivate.xhtml#af36cb7f956e2d2a79a9912b725ebada9">Voxel::USBSystemPrivate::_iterateSetupAPI</a></div><div class="ttdeci">bool _iterateSetupAPI(LPGUID guid, Function&lt; void(HDEVINFO devClassInfo, DeviceInfo &amp;devInfo, ULONG hubIndex)&gt; process)</div><div class="ttdef"><b>Definition:</b> <a href="USBSystemPrivateWindows_8cpp_source.xhtml#l00106">USBSystemPrivateWindows.cpp:106</a></div></div>
</div><!-- fragment -->
<p><div id="dynsection-5" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-5-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-5-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-5-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classVoxel_1_1USBSystemPrivate_aa1eb26db84e2fd635daf8489a09815ec_cgraph.svg" width="643" height="182"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</p>

</div>
</div>
<a class="anchor" id="af36cb7f956e2d2a79a9912b725ebada9"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classbool.xhtml">bool</a> Voxel::USBSystemPrivate::_iterateSetupAPI </td>
          <td>(</td>
          <td class="paramtype">LPGUID&#160;</td>
          <td class="paramname"><em>guid</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__Util.xhtml#ga8aaf1e39b1b92e5f2ae6cf09d3ca0623">Function</a>&lt; void(<a class="el" href="group__IO.xhtml#gaafe7976c9e3804692025b8cc7317ff8e">HDEVINFO</a> devClassInfo, <a class="el" href="structVoxel_1_1DeviceInfo.xhtml">DeviceInfo</a> &amp;devInfo, <a class="el" href="group__IO.xhtml#ga9c6ee30a321d6103b2a9842ac25327cf">ULONG</a> hubIndex)&gt;&#160;</td>
          <td class="paramname"><em>process</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">private</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="USBSystemPrivateWindows_8cpp_source.xhtml#l00106">106</a> of file <a class="el" href="USBSystemPrivateWindows_8cpp_source.xhtml">USBSystemPrivateWindows.cpp</a>.</p>

<p>References <a class="el" href="USBSystemPrivateWindows_8cpp_source.xhtml#l00018">Voxel::DeviceInfo::devInfo</a>, <a class="el" href="USBSystemPrivateWindows_8cpp_source.xhtml#l00019">Voxel::DeviceInfo::devInterfaceData</a>, <a class="el" href="USBSystemPrivateWindows_8cpp_source.xhtml#l00020">Voxel::DeviceInfo::devInterfaceDetailData</a>, <a class="el" href="USBSystemPrivateWindows_8cpp_source.xhtml#l00023">Voxel::getDeviceError()</a>, <a class="el" href="Logger_8h_source.xhtml#l00027">Voxel::LOG_ERROR</a>, and <a class="el" href="Logger_8h_source.xhtml#l00180">Voxel::logger</a>.</p>

<p>Referenced by <a class="el" href="USBSystemPrivateWindows_8cpp_source.xhtml#l00327">_iterateOverAllDevices()</a>, and <a class="el" href="USBSystemPrivateWindows_8cpp_source.xhtml#l00418">getDevInst()</a>.</p>
<div class="fragment"><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;{</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;  <a class="code" href="group__IO.xhtml#ga21dc16e4a3028a99c0be8f3943bfb699">DWORD</a> flags = DIGCF_PRESENT;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;  </div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;  <span class="keywordflow">if</span> (guid) flags |= DIGCF_DEVICEINTERFACE;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;  <span class="keywordflow">if</span> (!guid) flags |= DIGCF_ALLCLASSES;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;  <a class="code" href="group__IO.xhtml#gaafe7976c9e3804692025b8cc7317ff8e">HDEVINFO</a> devClassInfo = SetupDiGetClassDevs(guid, NULL, NULL, flags); <span class="comment">// | DIGCF_DEVICEINTERFACE</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;  <span class="keywordflow">if</span> (devClassInfo == INVALID_HANDLE_VALUE)</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;  {</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;USBSystem: Failed to get handle to device class. Error = &quot;</span> &lt;&lt; <a class="code" href="group__IO.xhtml#gab6c3a2c7db631983faa923d68084fb1d">getDeviceError</a>() &lt;&lt; std::endl;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;  }</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;  DeviceInfo deviceInfo;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;  deviceInfo.devInfo.cbSize = <span class="keyword">sizeof</span>(SP_DEVINFO_DATA);</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;  <a class="code" href="group__IO.xhtml#ga9c6ee30a321d6103b2a9842ac25327cf">ULONG</a> requiredLength;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;  <span class="keywordflow">for</span> (<a class="code" href="group__IO.xhtml#ga9c6ee30a321d6103b2a9842ac25327cf">ULONG</a> index = 0; SetupDiEnumDeviceInfo(devClassInfo, index, &amp;deviceInfo.devInfo); index++)</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;  {</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    deviceInfo.devInterfaceData.cbSize = <span class="keyword">sizeof</span>(SP_DEVICE_INTERFACE_DATA);</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="comment">// FIXME: Currently this considers only the first interface of the device. Should we look for all the interfaces?</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keywordflow">if</span> (!SetupDiEnumDeviceInterfaces(devClassInfo, &amp;deviceInfo.devInfo, guid, 0, &amp;deviceInfo.devInterfaceData))</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    {</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;      <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;USBSystem: Failed to enumerate device interfaces for index = &quot;</span> &lt;&lt; index &lt;&lt; <span class="stringliteral">&quot;. Error = &quot;</span> &lt;&lt; <a class="code" href="group__IO.xhtml#gab6c3a2c7db631983faa923d68084fb1d">getDeviceError</a>() &lt;&lt; std::endl;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;      SetupDiDestroyDeviceInfoList(devClassInfo);</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    }</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keywordflow">if</span> (!SetupDiGetDeviceInterfaceDetail(devClassInfo, &amp;deviceInfo.devInterfaceData, NULL, 0, &amp;requiredLength, NULL) &amp;&amp; GetLastError() != ERROR_INSUFFICIENT_BUFFER)</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    {</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;      <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;USBSystem: Failed to get size for interface details for index = &quot;</span> &lt;&lt; index &lt;&lt; <span class="stringliteral">&quot;. Error = &quot;</span> &lt;&lt; <a class="code" href="group__IO.xhtml#gab6c3a2c7db631983faa923d68084fb1d">getDeviceError</a>() &lt;&lt; std::endl;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;      SetupDiDestroyDeviceInfoList(devClassInfo);</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    }</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    deviceInfo.devInterfaceDetailData = byteAlloc&lt;SP_DEVICE_INTERFACE_DETAIL_DATA&gt;(requiredLength);</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    deviceInfo.devInterfaceDetailData-&gt;cbSize = <span class="keyword">sizeof</span>(SP_DEVICE_INTERFACE_DETAIL_DATA);</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="keywordflow">if</span> (!SetupDiGetDeviceInterfaceDetail(devClassInfo, &amp;deviceInfo.devInterfaceData, &amp;*deviceInfo.devInterfaceDetailData, requiredLength, &amp;requiredLength, NULL))</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    {</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;      <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;USBSystem: Failed to get interface details for index = &quot;</span> &lt;&lt; index &lt;&lt; <span class="stringliteral">&quot;. Error = &quot;</span> &lt;&lt; <a class="code" href="group__IO.xhtml#gab6c3a2c7db631983faa923d68084fb1d">getDeviceError</a>() &lt;&lt; std::endl;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;      SetupDiDestroyDeviceInfoList(devClassInfo);</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    }</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    process(devClassInfo, deviceInfo, index);</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;  }</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;  SetupDiDestroyDeviceInfoList(devClassInfo);</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;}</div>
<div class="ttc" id="group__IO_xhtml_gab6c3a2c7db631983faa923d68084fb1d"><div class="ttname"><a href="group__IO.xhtml#gab6c3a2c7db631983faa923d68084fb1d">Voxel::getDeviceError</a></div><div class="ttdeci">std::string getDeviceError()</div><div class="ttdef"><b>Definition:</b> <a href="USBSystemPrivateWindows_8cpp_source.xhtml#l00023">USBSystemPrivateWindows.cpp:23</a></div></div>
<div class="ttc" id="group__Util_xhtml_gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0"><div class="ttname"><a href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">Voxel::LOG_ERROR</a></div><div class="ttdef"><b>Definition:</b> <a href="Logger_8h_source.xhtml#l00027">Logger.h:27</a></div></div>
<div class="ttc" id="group__IO_xhtml_ga21dc16e4a3028a99c0be8f3943bfb699"><div class="ttname"><a href="group__IO.xhtml#ga21dc16e4a3028a99c0be8f3943bfb699">Voxel::DWORD</a></div><div class="ttdeci">unsigned long DWORD</div><div class="ttdef"><b>Definition:</b> <a href="USBSystemPrivateWindows_8h_source.xhtml#l00031">USBSystemPrivateWindows.h:31</a></div></div>
<div class="ttc" id="group__IO_xhtml_ga9c6ee30a321d6103b2a9842ac25327cf"><div class="ttname"><a href="group__IO.xhtml#ga9c6ee30a321d6103b2a9842ac25327cf">Voxel::ULONG</a></div><div class="ttdeci">unsigned long ULONG</div><div class="ttdef"><b>Definition:</b> <a href="USBSystemPrivateWindows_8h_source.xhtml#l00032">USBSystemPrivateWindows.h:32</a></div></div>
<div class="ttc" id="group__IO_xhtml_gaafe7976c9e3804692025b8cc7317ff8e"><div class="ttname"><a href="group__IO.xhtml#gaafe7976c9e3804692025b8cc7317ff8e">Voxel::HDEVINFO</a></div><div class="ttdeci">void * HDEVINFO</div><div class="ttdef"><b>Definition:</b> <a href="USBSystemPrivateWindows_8h_source.xhtml#l00030">USBSystemPrivateWindows.h:30</a></div></div>
<div class="ttc" id="group__Util_xhtml_gabd012fcbae5565e03008afef1fd4f261"><div class="ttname"><a href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">Voxel::logger</a></div><div class="ttdeci">Logger logger(LOG_WARNING)</div><div class="ttdef"><b>Definition:</b> <a href="Logger_8h_source.xhtml#l00180">Logger.h:180</a></div></div>
</div><!-- fragment -->
<p><div id="dynsection-6" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-6-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-6-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-6-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classVoxel_1_1USBSystemPrivate_af36cb7f956e2d2a79a9912b725ebada9_cgraph.svg" width="390" height="51"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</p>

<p><div id="dynsection-7" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-7-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-7-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-7-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classVoxel_1_1USBSystemPrivate_af36cb7f956e2d2a79a9912b725ebada9_icgraph.svg" width="416" height="116"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</p>

</div>
</div>
<a class="anchor" id="afe0937dc9ecaf71f56dc6da8a220a3b3"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classbool.xhtml">bool</a> Voxel::USBSystemPrivate::_iterateUDevUSB </td>
          <td>(</td>
          <td class="paramtype"><a class="el" href="group__Util.xhtml#ga8aaf1e39b1b92e5f2ae6cf09d3ca0623">Function</a>&lt; void(struct udev_device *dev, uint16_t vendorID, uint16_t productID, const <a class="el" href="group__Util.xhtml#gafd72f3b1c8c89d947c44f85bf983f852">String</a> &amp;serial, const <a class="el" href="group__Util.xhtml#gafd72f3b1c8c89d947c44f85bf983f852">String</a> &amp;serialIndex, const <a class="el" href="group__Util.xhtml#gafd72f3b1c8c89d947c44f85bf983f852">String</a> &amp;description)&gt;&#160;</td>
          <td class="paramname"><em>process</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="USBSystemPrivateLinux_8cpp_source.xhtml#l00060">60</a> of file <a class="el" href="USBSystemPrivateLinux_8cpp_source.xhtml">USBSystemPrivateLinux.cpp</a>.</p>

<p>References <a class="el" href="CameraSystemTest_8py_source.xhtml#l00012">CameraSystemTest::devices</a>, <a class="el" href="Logger_8h_source.xhtml#l00027">Voxel::LOG_ERROR</a>, and <a class="el" href="Logger_8h_source.xhtml#l00180">Voxel::logger</a>.</p>

<p>Referenced by <a class="el" href="USBSystemPrivateLinux_8cpp_source.xhtml#l00139">getBusDevNumbers()</a>, and <a class="el" href="USBSystemPrivateLinux_8cpp_source.xhtml#l00015">getDevices()</a>.</p>
<div class="fragment"><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;{</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;  udev *udevHandle = udev_new();</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;  </div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;  <a class="code" href="classString.xhtml">String</a> devNode;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;  </div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;  <span class="keywordflow">if</span>(!udevHandle)</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;  {</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;USBSystem: UDev Init failed&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;  }</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;  </div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;  <span class="keyword">struct </span>udev_enumerate *enumerate;</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;  <span class="keyword">struct </span>udev_list_entry *<a class="code" href="namespaceCameraSystemTest.xhtml#a9e6d1e12787c05f7e4190828d4d2bfa5">devices</a>;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;  <span class="keyword">struct </span>udev_list_entry *devListEntry;</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;  </div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;  <span class="comment">/* Create a list of the devices in the &#39;v4l2&#39; subsystem. */</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;  enumerate = udev_enumerate_new(udevHandle);</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;  udev_enumerate_add_match_subsystem(enumerate, <span class="stringliteral">&quot;usb&quot;</span>);</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;  udev_enumerate_add_match_property(enumerate, <span class="stringliteral">&quot;DEVTYPE&quot;</span>, <span class="stringliteral">&quot;usb_device&quot;</span>);</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;  udev_enumerate_scan_devices(enumerate);</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;  devices = udev_enumerate_get_list_entry(enumerate);</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;  </div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;  <span class="comment">/*</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment">   * For each item enumerated, print out its information.</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment">   * udev_list_entry_foreach is a macro which expands to</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment">   * a loop. The loop will be executed for each member in</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment">   * devices, setting dev_list_entry to a list entry</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment">   * which contains the device&#39;s path in /sys.</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment">   */</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;  udev_list_entry_foreach(devListEntry, devices)</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;  {</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span> *path;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    </div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    <span class="comment">/*</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment">     * Get the filename of the /sys entry for the device</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment">     * and create a udev_device object (dev) representing it</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment">     */</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    path = udev_list_entry_get_name(devListEntry);</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    <span class="keyword">struct </span>udev_device *dev = udev_device_new_from_syspath(udevHandle, path);</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    </div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    uint16_t vendorID, productID;</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    <a class="code" href="classString.xhtml">String</a> serial, serialIndex, description, productDesc;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="keywordtype">char</span> *endptr;</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    </div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    vendorID = strtol(udev_device_get_sysattr_value(dev, <span class="stringliteral">&quot;idVendor&quot;</span>), &amp;endptr, 16);</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    productID = strtol(udev_device_get_sysattr_value(dev, <span class="stringliteral">&quot;idProduct&quot;</span>), &amp;endptr, 16);</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    </div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    serialIndex += udev_device_get_sysattr_value(dev, <span class="stringliteral">&quot;busnum&quot;</span>);</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    serialIndex += <span class="stringliteral">&quot;:&quot;</span>;</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    serialIndex += udev_device_get_sysattr_value(dev, <span class="stringliteral">&quot;devpath&quot;</span>);</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    </div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keywordflow">if</span>(udev_device_get_sysattr_value(dev, <span class="stringliteral">&quot;manufacturer&quot;</span>))</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;      description = udev_device_get_sysattr_value(dev, <span class="stringliteral">&quot;manufacturer&quot;</span>);</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    </div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;    <span class="keywordflow">if</span>(udev_device_get_sysattr_value(dev, <span class="stringliteral">&quot;product&quot;</span>))</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;      productDesc = udev_device_get_sysattr_value(dev, <span class="stringliteral">&quot;product&quot;</span>);</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;    </div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <span class="keywordflow">if</span>(productDesc.size())</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    {</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;      <span class="keywordflow">if</span>(description.size())</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;        description += <span class="stringliteral">&quot; - &quot;</span>;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;      description += productDesc;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;    }</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;    </div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span> *s = udev_device_get_sysattr_value(dev, <span class="stringliteral">&quot;serial&quot;</span>);</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;    <span class="keywordflow">if</span>(s) serial = s;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    </div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    process(dev, vendorID, productID, serial, serialIndex, description);</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    </div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    udev_device_unref(dev);</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;  }</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;  <span class="comment">/* Free the enumerator object */</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;  udev_enumerate_unref(enumerate);</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;  udev_unref(udevHandle);</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;  </div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;}</div>
<div class="ttc" id="group__Util_xhtml_gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0"><div class="ttname"><a href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">Voxel::LOG_ERROR</a></div><div class="ttdef"><b>Definition:</b> <a href="Logger_8h_source.xhtml#l00027">Logger.h:27</a></div></div>
<div class="ttc" id="namespaceCameraSystemTest_xhtml_a9e6d1e12787c05f7e4190828d4d2bfa5"><div class="ttname"><a href="namespaceCameraSystemTest.xhtml#a9e6d1e12787c05f7e4190828d4d2bfa5">CameraSystemTest.devices</a></div><div class="ttdeci">tuple devices</div><div class="ttdef"><b>Definition:</b> <a href="CameraSystemTest_8py_source.xhtml#l00012">CameraSystemTest.py:12</a></div></div>
<div class="ttc" id="group__Util_xhtml_gabd012fcbae5565e03008afef1fd4f261"><div class="ttname"><a href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">Voxel::logger</a></div><div class="ttdeci">Logger logger(LOG_WARNING)</div><div class="ttdef"><b>Definition:</b> <a href="Logger_8h_source.xhtml#l00180">Logger.h:180</a></div></div>
<div class="ttc" id="classString_xhtml"><div class="ttname"><a href="classString.xhtml">String</a></div></div>
</div><!-- fragment -->
<p><div id="dynsection-8" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-8-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-8-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-8-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="classVoxel_1_1USBSystemPrivate_afe0937dc9ecaf71f56dc6da8a220a3b3_icgraph.svg" width="100%" height="387"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div></div>
</div>
</p>

</div>
</div>
<a class="anchor" id="a1cbfa177d183726f0e4a16cb45e30d35"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classbool.xhtml">bool</a> Voxel::USBSystemPrivate::getBusDevNumbers </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classVoxel_1_1USBDevice.xhtml">USBDevice</a> &amp;&#160;</td>
          <td class="paramname"><em>usbd</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t &amp;&#160;</td>
          <td class="paramname"><em>busNumber</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">uint8_t &amp;&#160;</td>
          <td class="paramname"><em>devNumber</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="USBSystemPrivateLinux_8cpp_source.xhtml#l00139">139</a> of file <a class="el" href="USBSystemPrivateLinux_8cpp_source.xhtml">USBSystemPrivateLinux.cpp</a>.</p>

<p>References <a class="el" href="USBSystemPrivateLinux_8cpp_source.xhtml#l00060">_iterateUDevUSB()</a>, <a class="el" href="Device_8h_source.xhtml#l00091">Voxel::USBDevice::productID()</a>, <a class="el" href="Device_8h_source.xhtml#l00071">Voxel::Device::serialIndex()</a>, <a class="el" href="Device_8h_source.xhtml#l00069">Voxel::Device::serialNumber()</a>, and <a class="el" href="Device_8h_source.xhtml#l00090">Voxel::USBDevice::vendorID()</a>.</p>

<p>Referenced by <a class="el" href="USBSystemPrivateLinux_8cpp_source.xhtml#l00028">getDeviceHandle()</a>.</p>
<div class="fragment"><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;{</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;  busNumber = devNumber = 0;</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;  <span class="keywordtype">bool</span> gotDevice = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;  </div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;  <a class="code" href="classVoxel_1_1USBSystemPrivate.xhtml#afe0937dc9ecaf71f56dc6da8a220a3b3">_iterateUDevUSB</a>([&amp;gotDevice, &amp;busNumber, &amp;devNumber, &amp;usbd](<span class="keyword">struct</span> udev_device *dev, uint16_t vendorID, uint16_t productID, <span class="keyword">const</span> <a class="code" href="classString.xhtml">String</a> &amp;serial, <span class="keyword">const</span> <a class="code" href="classString.xhtml">String</a> &amp;serialIndex,</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keyword">const</span> <a class="code" href="classString.xhtml">String</a> &amp;description)</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;  {</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keywordtype">char</span> *endptr;</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keywordflow">if</span>(!gotDevice &amp;&amp; usbd.vendorID() == vendorID &amp;&amp; usbd.productID() == productID &amp;&amp;</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;        (usbd.serialNumber().size() == 0 || serial == usbd.serialNumber()) &amp;&amp;</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;        (usbd.serialIndex().size() == 0 || serialIndex == usbd.serialIndex()))</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;      {</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;        busNumber = strtol(udev_device_get_sysattr_value(dev, <span class="stringliteral">&quot;busnum&quot;</span>), &amp;endptr, 10);</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;        devNumber = strtol(udev_device_get_sysattr_value(dev, <span class="stringliteral">&quot;devnum&quot;</span>), &amp;endptr, 10);</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;        gotDevice = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;      }</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;  });</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;  </div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;  <span class="keywordflow">return</span> gotDevice;</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;}</div>
<div class="ttc" id="classVoxel_1_1USBSystemPrivate_xhtml_afe0937dc9ecaf71f56dc6da8a220a3b3"><div class="ttname"><a href="classVoxel_1_1USBSystemPrivate.xhtml#afe0937dc9ecaf71f56dc6da8a220a3b3">Voxel::USBSystemPrivate::_iterateUDevUSB</a></div><div class="ttdeci">bool _iterateUDevUSB(Function&lt; void(struct udev_device *dev, uint16_t vendorID, uint16_t productID, const String &amp;serial, const String &amp;serialIndex, const String &amp;description)&gt; process)</div><div class="ttdef"><b>Definition:</b> <a href="USBSystemPrivateLinux_8cpp_source.xhtml#l00060">USBSystemPrivateLinux.cpp:60</a></div></div>
<div class="ttc" id="classString_xhtml"><div class="ttname"><a href="classString.xhtml">String</a></div></div>
</div><!-- fragment -->
<p><div id="dynsection-9" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-9-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-9-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-9-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classVoxel_1_1USBSystemPrivate_a1cbfa177d183726f0e4a16cb45e30d35_cgraph.svg" width="435" height="255"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</p>

<p><div id="dynsection-10" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-10-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-10-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-10-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classVoxel_1_1USBSystemPrivate_a1cbfa177d183726f0e4a16cb45e30d35_icgraph.svg" width="662" height="51"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</p>

</div>
</div>
<a class="anchor" id="a5253d98ddc9da299206f2b7ba58e82a9"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">libusb_context* Voxel::USBSystemPrivate::getContext </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="USBSystemPrivateLinux_8h_source.xhtml#l00046">46</a> of file <a class="el" href="USBSystemPrivateLinux_8h_source.xhtml">USBSystemPrivateLinux.h</a>.</p>

<p>References <a class="el" href="USBSystemPrivateLinux_8h_source.xhtml#l00027">_context</a>.</p>

<p>Referenced by <a class="el" href="USBSystemPrivateLinux_8h_source.xhtml#l00044">isInitialized()</a>.</p>
<div class="fragment"><div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;  {</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classVoxel_1_1USBSystemPrivate.xhtml#abdbade05f2c35ef3342f04bae6fa81e3">_context</a>;</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;  }</div>
<div class="ttc" id="classVoxel_1_1USBSystemPrivate_xhtml_abdbade05f2c35ef3342f04bae6fa81e3"><div class="ttname"><a href="classVoxel_1_1USBSystemPrivate.xhtml#abdbade05f2c35ef3342f04bae6fa81e3">Voxel::USBSystemPrivate::_context</a></div><div class="ttdeci">libusb_context * _context</div><div class="ttdef"><b>Definition:</b> <a href="USBSystemPrivateLinux_8h_source.xhtml#l00027">USBSystemPrivateLinux.h:27</a></div></div>
</div><!-- fragment -->
<p><div id="dynsection-11" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-11-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-11-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-11-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classVoxel_1_1USBSystemPrivate_a5253d98ddc9da299206f2b7ba58e82a9_icgraph.svg" width="416" height="51"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</p>

</div>
</div>
<a class="anchor" id="a0a4343643663e5cb000014b35bec5802"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">libusb_device * Voxel::USBSystemPrivate::getDeviceHandle </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classVoxel_1_1USBDevice.xhtml">USBDevice</a> &amp;&#160;</td>
          <td class="paramname"><em>usbd</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>This does not look at the channel to determine which channel to use. </p>

<p>Definition at line <a class="el" href="USBSystemPrivateLinux_8cpp_source.xhtml#l00028">28</a> of file <a class="el" href="USBSystemPrivateLinux_8cpp_source.xhtml">USBSystemPrivateLinux.cpp</a>.</p>

<p>References <a class="el" href="USBSystemPrivateLinux_8h_source.xhtml#l00027">_context</a>, <a class="el" href="CameraSystemIQFrameTest_8py_source.xhtml#l00030">CameraSystemIQFrameTest::count</a>, <a class="el" href="USBSystemPrivateLinux_8cpp_source.xhtml#l00139">getBusDevNumbers()</a>, <a class="el" href="Device_8h_source.xhtml#l00065">Voxel::Device::id()</a>, <a class="el" href="Logger_8h_source.xhtml#l00027">Voxel::LOG_ERROR</a>, and <a class="el" href="Logger_8h_source.xhtml#l00180">Voxel::logger</a>.</p>

<p>Referenced by <a class="el" href="USBIO_8cpp_source.xhtml#l00056">Voxel::USBIO::USBIOPrivate::USBIOPrivate()</a>.</p>
<div class="fragment"><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;{</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;  uint8_t busNumber, devNumber;</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;  </div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;  <span class="keywordflow">if</span>(!<a class="code" href="classVoxel_1_1USBSystemPrivate.xhtml#abdbade05f2c35ef3342f04bae6fa81e3">_context</a>)</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">nullptr</span>; <span class="comment">// libusb is not initialized</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;  </div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;  <span class="keywordflow">if</span>(!<a class="code" href="classVoxel_1_1USBSystemPrivate.xhtml#a1cbfa177d183726f0e4a16cb45e30d35">getBusDevNumbers</a>(usbd, busNumber, devNumber))</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;  {</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;    <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;USBSystem: Failed to get bus and device numbers for device &#39;&quot;</span> &lt;&lt; usbd.id() &lt;&lt; <span class="stringliteral">&quot;&#39;&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;  }</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;  </div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;  libusb_device *selected = 0;</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;  </div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;  libusb_device** libusb_list;</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;  </div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;  <span class="keywordtype">int</span> <a class="code" href="namespaceCameraSystemIQFrameTest.xhtml#ac2abb9d1e1e9e639f1bd83f5342d44c2">count</a> = libusb_get_device_list(<a class="code" href="classVoxel_1_1USBSystemPrivate.xhtml#abdbade05f2c35ef3342f04bae6fa81e3">_context</a>, &amp;libusb_list); </div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;  </div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;  <span class="keywordflow">for</span> (<span class="keyword">auto</span> i = 0; i &lt; <a class="code" href="namespaceCameraSystemIQFrameTest.xhtml#ac2abb9d1e1e9e639f1bd83f5342d44c2">count</a>; i++)</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;  {</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <span class="keywordflow">if</span> ((busNumber == libusb_get_bus_number(libusb_list[i])) &amp;&amp; (devNumber == libusb_get_device_address(libusb_list[i])))</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;      selected = libusb_list[i];</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;      libusb_unref_device(libusb_list[i]);</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;  }</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;  </div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;  libusb_free_device_list(libusb_list, 0);</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;  </div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;  <span class="keywordflow">return</span> selected;</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;}</div>
<div class="ttc" id="classVoxel_1_1USBSystemPrivate_xhtml_abdbade05f2c35ef3342f04bae6fa81e3"><div class="ttname"><a href="classVoxel_1_1USBSystemPrivate.xhtml#abdbade05f2c35ef3342f04bae6fa81e3">Voxel::USBSystemPrivate::_context</a></div><div class="ttdeci">libusb_context * _context</div><div class="ttdef"><b>Definition:</b> <a href="USBSystemPrivateLinux_8h_source.xhtml#l00027">USBSystemPrivateLinux.h:27</a></div></div>
<div class="ttc" id="group__Util_xhtml_gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0"><div class="ttname"><a href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">Voxel::LOG_ERROR</a></div><div class="ttdef"><b>Definition:</b> <a href="Logger_8h_source.xhtml#l00027">Logger.h:27</a></div></div>
<div class="ttc" id="namespaceCameraSystemIQFrameTest_xhtml_ac2abb9d1e1e9e639f1bd83f5342d44c2"><div class="ttname"><a href="namespaceCameraSystemIQFrameTest.xhtml#ac2abb9d1e1e9e639f1bd83f5342d44c2">CameraSystemIQFrameTest.count</a></div><div class="ttdeci">tuple count</div><div class="ttdef"><b>Definition:</b> <a href="CameraSystemIQFrameTest_8py_source.xhtml#l00030">CameraSystemIQFrameTest.py:30</a></div></div>
<div class="ttc" id="classVoxel_1_1USBSystemPrivate_xhtml_a1cbfa177d183726f0e4a16cb45e30d35"><div class="ttname"><a href="classVoxel_1_1USBSystemPrivate.xhtml#a1cbfa177d183726f0e4a16cb45e30d35">Voxel::USBSystemPrivate::getBusDevNumbers</a></div><div class="ttdeci">bool getBusDevNumbers(const USBDevice &amp;usbd, uint8_t &amp;busNumber, uint8_t &amp;devNumber)</div><div class="ttdef"><b>Definition:</b> <a href="USBSystemPrivateLinux_8cpp_source.xhtml#l00139">USBSystemPrivateLinux.cpp:139</a></div></div>
<div class="ttc" id="group__Util_xhtml_gabd012fcbae5565e03008afef1fd4f261"><div class="ttname"><a href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">Voxel::logger</a></div><div class="ttdeci">Logger logger(LOG_WARNING)</div><div class="ttdef"><b>Definition:</b> <a href="Logger_8h_source.xhtml#l00180">Logger.h:180</a></div></div>
</div><!-- fragment -->
<p><div id="dynsection-12" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-12-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-12-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-12-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classVoxel_1_1USBSystemPrivate_a0a4343643663e5cb000014b35bec5802_cgraph.svg" width="662" height="255"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</p>

<p><div id="dynsection-13" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-13-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-13-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-13-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classVoxel_1_1USBSystemPrivate_a0a4343643663e5cb000014b35bec5802_icgraph.svg" width="435" height="51"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</p>

</div>
</div>
<a class="anchor" id="af6f114a79ec61cc4815afc7828a84f85"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__Util.xhtml#gafd72f3b1c8c89d947c44f85bf983f852">String</a> Voxel::USBSystemPrivate::getDeviceNode </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classVoxel_1_1USBDevice.xhtml">USBDevice</a> &amp;&#160;</td>
          <td class="paramname"><em>usbd</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="USBSystemPrivateLinux_8cpp_source.xhtml#l00163">163</a> of file <a class="el" href="USBSystemPrivateLinux_8cpp_source.xhtml">USBSystemPrivateLinux.cpp</a>.</p>

<p>References <a class="el" href="Device_8h_source.xhtml#l00074">Voxel::Device::channelID()</a>, <a class="el" href="CameraSystemTest_8py_source.xhtml#l00012">CameraSystemTest::devices</a>, <a class="el" href="Logger_8h_source.xhtml#l00027">Voxel::LOG_ERROR</a>, <a class="el" href="Logger_8h_source.xhtml#l00028">Voxel::LOG_WARNING</a>, <a class="el" href="Logger_8h_source.xhtml#l00180">Voxel::logger</a>, <a class="el" href="Device_8h_source.xhtml#l00091">Voxel::USBDevice::productID()</a>, <a class="el" href="Device_8h_source.xhtml#l00071">Voxel::Device::serialIndex()</a>, <a class="el" href="Device_8h_source.xhtml#l00069">Voxel::Device::serialNumber()</a>, and <a class="el" href="Device_8h_source.xhtml#l00090">Voxel::USBDevice::vendorID()</a>.</p>
<div class="fragment"><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;{</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;  udev *udevHandle = udev_new();</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;  </div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;  <a class="code" href="classString.xhtml">String</a> devNode;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;  </div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;  <span class="keywordflow">if</span>(!udevHandle)</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;  {</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;USBSystem: Init failed to get device node&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <span class="keywordflow">return</span> <span class="stringliteral">&quot;&quot;</span>;</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;  }</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;  </div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;  <span class="keyword">struct </span>udev_enumerate *enumerate;</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;  <span class="keyword">struct </span>udev_list_entry *<a class="code" href="namespaceCameraSystemTest.xhtml#a9e6d1e12787c05f7e4190828d4d2bfa5">devices</a>;</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;  <span class="keyword">struct </span>udev_list_entry *devListEntry;</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;  </div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;  <span class="comment">/* Create a list of the devices in the &#39;v4l2&#39; subsystem. */</span></div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;  enumerate = udev_enumerate_new(udevHandle);</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;  udev_enumerate_add_match_subsystem(enumerate, <span class="stringliteral">&quot;video4linux&quot;</span>);</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;  udev_enumerate_scan_devices(enumerate);</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;  devices = udev_enumerate_get_list_entry(enumerate);</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;  </div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;  <span class="comment">/*</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;<span class="comment">    * For each item enumerated, print out its information.</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="comment">    * udev_list_entry_foreach is a macro which expands to</span></div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;<span class="comment">    * a loop. The loop will be executed for each member in</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="comment">    * devices, setting dev_list_entry to a list entry</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="comment">    * which contains the device&#39;s path in /sys.</span></div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;<span class="comment">    */</span></div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;  udev_list_entry_foreach(devListEntry, devices)</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;  {</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span> *path;</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    </div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    <span class="comment">/*</span></div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;<span class="comment">      * Get the filename of the /sys entry for the device</span></div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;<span class="comment">      * and create a udev_device object (dev) representing it</span></div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;<span class="comment">      */</span></div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    path = udev_list_entry_get_name(devListEntry);</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <span class="keyword">struct </span>udev_device *dev = udev_device_new_from_syspath(udevHandle, path), *pdev, *pdev2;</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    </div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    <span class="comment">/* usb_device_get_devnode() returns the path to the device node</span></div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;<span class="comment">      * itself in /dev. </span></div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;<span class="comment">      */</span></div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span> *v4l2Device = udev_device_get_devnode(dev);</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    </div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    <span class="comment">/* The device pointed to by dev contains information about</span></div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="comment">      *      t he v4l2 device. In orde*r to get information about the</span></div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="comment">      *      USB device, get the parent device with the</span></div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="comment">      *      subsystem/devtype pair of &quot;usb&quot;/&quot;usb_device&quot;. This will</span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;<span class="comment">      *      be several levels up the tree, but the function will find</span></div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="comment">      *      it.*/</span></div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    pdev = udev_device_get_parent_with_subsystem_devtype(dev, <span class="stringliteral">&quot;usb&quot;</span>, <span class="stringliteral">&quot;usb_device&quot;</span>);</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    </div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    <span class="keywordflow">if</span>(!pdev)</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    {</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;      <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758ad0982c0e5a750625d98e16b2877dedd8">LOG_WARNING</a>) &lt;&lt; <span class="stringliteral">&quot;USBSystem: Unable to find parent usb device.&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;      udev_device_unref(dev);</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;      <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;    }</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    </div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    <span class="keywordflow">if</span>(usbd.channelID() &gt;= 0) <span class="comment">// Valid channel ID?</span></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    {</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;      pdev2 = udev_device_get_parent_with_subsystem_devtype(dev, <span class="stringliteral">&quot;usb&quot;</span>, <span class="stringliteral">&quot;usb_interface&quot;</span>);</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;      </div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;      <span class="keywordflow">if</span>(!pdev2)</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;      {</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;        <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758ad0982c0e5a750625d98e16b2877dedd8">LOG_WARNING</a>) &lt;&lt; <span class="stringliteral">&quot;USBSystem: Unable to find parent usb interface.&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        udev_device_unref(dev);</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;      }</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    }</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    </div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;    <span class="comment">/* From here, we can call get_sysattr_value() for each file</span></div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;<span class="comment">      *      in the device&#39;s /sys entry. The strings passed into these</span></div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;<span class="comment">      *      functions (idProduct, idVendor, serial, etc.) correspond</span></div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;<span class="comment">      *      directly to the files in the directory which represents</span></div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;<span class="comment">      *      the USB device. Note that USB strings are Unicode, UCS2</span></div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;<span class="comment">      *      encoded, but the strings returned from</span></div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;<span class="comment">      *      udev_device_get_sysattr_value() are UTF-8 encoded. */</span></div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    </div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    uint16_t vendorID, productID;</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;    uint8_t channelID;</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <a class="code" href="classString.xhtml">String</a> serial, serialIndex;</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    <span class="keywordtype">char</span> *endptr;</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;    </div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    vendorID = strtol(udev_device_get_sysattr_value(pdev, <span class="stringliteral">&quot;idVendor&quot;</span>), &amp;endptr, 16);</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    productID = strtol(udev_device_get_sysattr_value(pdev, <span class="stringliteral">&quot;idProduct&quot;</span>), &amp;endptr, 16);</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    </div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    <span class="keywordflow">if</span>(usbd.channelID() &gt;= 0)</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;      channelID = strtol(udev_device_get_sysattr_value(pdev2, <span class="stringliteral">&quot;bInterfaceNumber&quot;</span>), &amp;endptr, 16);</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    </div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    <span class="keywordflow">if</span>(usbd.serialIndex().size())</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    {</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;      serialIndex += udev_device_get_sysattr_value(pdev, <span class="stringliteral">&quot;busnum&quot;</span>);</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;      serialIndex += <span class="stringliteral">&quot;:&quot;</span>;</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;      serialIndex += udev_device_get_sysattr_value(pdev, <span class="stringliteral">&quot;devpath&quot;</span>);</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    }</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    </div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span> *s = udev_device_get_sysattr_value(pdev, <span class="stringliteral">&quot;serial&quot;</span>);</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    <span class="keywordflow">if</span>(s) serial = s;</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    </div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    <span class="keywordflow">if</span>(usbd.vendorID() == vendorID &amp;&amp; usbd.productID() == productID &amp;&amp;</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;      (usbd.serialNumber().size() == 0 || serial == usbd.serialNumber()) &amp;&amp;</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;      (usbd.channelID() &lt; 0 || channelID == usbd.channelID()) &amp;&amp;</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;      (usbd.serialIndex().size() == 0 || serialIndex == usbd.serialIndex()))</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;      devNode = v4l2Device;</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;    </div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    udev_device_unref(dev);</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;  }</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;  <span class="comment">/* Free the enumerator object */</span></div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;  udev_enumerate_unref(enumerate);</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;  </div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;  udev_unref(udevHandle);</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;  </div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;  <span class="keywordflow">return</span> devNode;</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;}</div>
<div class="ttc" id="group__Util_xhtml_gga3b552e0c33cfe1ca3a0752dbd986b758ad0982c0e5a750625d98e16b2877dedd8"><div class="ttname"><a href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758ad0982c0e5a750625d98e16b2877dedd8">Voxel::LOG_WARNING</a></div><div class="ttdef"><b>Definition:</b> <a href="Logger_8h_source.xhtml#l00028">Logger.h:28</a></div></div>
<div class="ttc" id="group__Util_xhtml_gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0"><div class="ttname"><a href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">Voxel::LOG_ERROR</a></div><div class="ttdef"><b>Definition:</b> <a href="Logger_8h_source.xhtml#l00027">Logger.h:27</a></div></div>
<div class="ttc" id="namespaceCameraSystemTest_xhtml_a9e6d1e12787c05f7e4190828d4d2bfa5"><div class="ttname"><a href="namespaceCameraSystemTest.xhtml#a9e6d1e12787c05f7e4190828d4d2bfa5">CameraSystemTest.devices</a></div><div class="ttdeci">tuple devices</div><div class="ttdef"><b>Definition:</b> <a href="CameraSystemTest_8py_source.xhtml#l00012">CameraSystemTest.py:12</a></div></div>
<div class="ttc" id="group__Util_xhtml_gabd012fcbae5565e03008afef1fd4f261"><div class="ttname"><a href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">Voxel::logger</a></div><div class="ttdeci">Logger logger(LOG_WARNING)</div><div class="ttdef"><b>Definition:</b> <a href="Logger_8h_source.xhtml#l00180">Logger.h:180</a></div></div>
<div class="ttc" id="classString_xhtml"><div class="ttname"><a href="classString.xhtml">String</a></div></div>
</div><!-- fragment -->
<p><div id="dynsection-14" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-14-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-14-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-14-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classVoxel_1_1USBSystemPrivate_af6f114a79ec61cc4815afc7828a84f85_cgraph.svg" width="435" height="240"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</p>

</div>
</div>
<a class="anchor" id="af6f114a79ec61cc4815afc7828a84f85"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__Util.xhtml#gafd72f3b1c8c89d947c44f85bf983f852">String</a> Voxel::USBSystemPrivate::getDeviceNode </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classVoxel_1_1USBDevice.xhtml">USBDevice</a> &amp;&#160;</td>
          <td class="paramname"><em>usbd</em></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a977ddcd8cd9508c4b598b6f00c89d2a6"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__Util.xhtml#ga8a21cf7475356ae552da8952ebf885b4">Vector</a>&lt; <a class="el" href="group__CamSys.xhtml#ga8b8c5a5f71759c97cc49332cfeb89d79">DevicePtr</a> &gt; Voxel::USBSystemPrivate::getDevices </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="USBSystemPrivateLinux_8cpp_source.xhtml#l00015">15</a> of file <a class="el" href="USBSystemPrivateLinux_8cpp_source.xhtml">USBSystemPrivateLinux.cpp</a>.</p>

<p>References <a class="el" href="USBSystemPrivateLinux_8cpp_source.xhtml#l00060">_iterateUDevUSB()</a>, and <a class="el" href="CameraSystemTest_8py_source.xhtml#l00012">CameraSystemTest::devices</a>.</p>
<div class="fragment"><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;{</div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;  Vector&lt;DevicePtr&gt; <a class="code" href="namespaceCameraSystemTest.xhtml#a9e6d1e12787c05f7e4190828d4d2bfa5">devices</a>;</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;  devices.reserve(10);</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;  </div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;  <a class="code" href="classVoxel_1_1USBSystemPrivate.xhtml#afe0937dc9ecaf71f56dc6da8a220a3b3">_iterateUDevUSB</a>([&amp;devices](<span class="keyword">struct</span> udev_device *dev, uint16_t vendorID, uint16_t productID, <span class="keyword">const</span> <a class="code" href="classString.xhtml">String</a> &amp;serial, <span class="keyword">const</span> <a class="code" href="classString.xhtml">String</a> &amp;serialIndex, <span class="keyword">const</span> <a class="code" href="classString.xhtml">String</a> &amp;description)</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;  {</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;    devices.push_back(<a class="code" href="group__CamSys.xhtml#ga8b8c5a5f71759c97cc49332cfeb89d79">DevicePtr</a>(<span class="keyword">new</span> USBDevice(vendorID, productID, serial, -1, description, serialIndex)));</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;  });</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;  </div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="namespaceCameraSystemTest.xhtml#a9e6d1e12787c05f7e4190828d4d2bfa5">devices</a>;</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;}</div>
<div class="ttc" id="classVoxel_1_1USBSystemPrivate_xhtml_afe0937dc9ecaf71f56dc6da8a220a3b3"><div class="ttname"><a href="classVoxel_1_1USBSystemPrivate.xhtml#afe0937dc9ecaf71f56dc6da8a220a3b3">Voxel::USBSystemPrivate::_iterateUDevUSB</a></div><div class="ttdeci">bool _iterateUDevUSB(Function&lt; void(struct udev_device *dev, uint16_t vendorID, uint16_t productID, const String &amp;serial, const String &amp;serialIndex, const String &amp;description)&gt; process)</div><div class="ttdef"><b>Definition:</b> <a href="USBSystemPrivateLinux_8cpp_source.xhtml#l00060">USBSystemPrivateLinux.cpp:60</a></div></div>
<div class="ttc" id="group__CamSys_xhtml_ga8b8c5a5f71759c97cc49332cfeb89d79"><div class="ttname"><a href="group__CamSys.xhtml#ga8b8c5a5f71759c97cc49332cfeb89d79">Voxel::DevicePtr</a></div><div class="ttdeci">Ptr&lt; Device &gt; DevicePtr</div><div class="ttdef"><b>Definition:</b> <a href="Device_8h_source.xhtml#l00079">Device.h:79</a></div></div>
<div class="ttc" id="namespaceCameraSystemTest_xhtml_a9e6d1e12787c05f7e4190828d4d2bfa5"><div class="ttname"><a href="namespaceCameraSystemTest.xhtml#a9e6d1e12787c05f7e4190828d4d2bfa5">CameraSystemTest.devices</a></div><div class="ttdeci">tuple devices</div><div class="ttdef"><b>Definition:</b> <a href="CameraSystemTest_8py_source.xhtml#l00012">CameraSystemTest.py:12</a></div></div>
<div class="ttc" id="classString_xhtml"><div class="ttname"><a href="classString.xhtml">String</a></div></div>
</div><!-- fragment -->
<p><div id="dynsection-15" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-15-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-15-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-15-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classVoxel_1_1USBSystemPrivate_a977ddcd8cd9508c4b598b6f00c89d2a6_cgraph.svg" width="416" height="51"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</p>

</div>
</div>
<a class="anchor" id="a17faa289c0409720bb47424bfb0e41fd"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="group__Util.xhtml#ga8a21cf7475356ae552da8952ebf885b4">Vector</a>&lt;<a class="el" href="group__CamSys.xhtml#ga8b8c5a5f71759c97cc49332cfeb89d79">DevicePtr</a>&gt; Voxel::USBSystemPrivate::getDevices </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<a class="anchor" id="a8ead463f7493be6e73587a31d7b0f04b"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classbool.xhtml">bool</a> Voxel::USBSystemPrivate::getDevInst </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="group__Util.xhtml#gafd72f3b1c8c89d947c44f85bf983f852">String</a> &amp;&#160;</td>
          <td class="paramname"><em>devicePath</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="group__IO.xhtml#ga21dc16e4a3028a99c0be8f3943bfb699">DWORD</a> &amp;&#160;</td>
          <td class="paramname"><em>devInst</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">LPGUID&#160;</td>
          <td class="paramname"><em>guid</em> = <code>(LPGUID)&amp;GUID_CLASS_USB_DEVICE</code>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="USBSystemPrivateWindows_8cpp_source.xhtml#l00418">418</a> of file <a class="el" href="USBSystemPrivateWindows_8cpp_source.xhtml">USBSystemPrivateWindows.cpp</a>.</p>

<p>References <a class="el" href="USBSystemPrivateWindows_8cpp_source.xhtml#l00106">_iterateSetupAPI()</a>, <a class="el" href="USBSystemPrivateWindows_8cpp_source.xhtml#l00018">Voxel::DeviceInfo::devInfo</a>, and <a class="el" href="USBSystemPrivateWindows_8cpp_source.xhtml#l00020">Voxel::DeviceInfo::devInterfaceDetailData</a>.</p>
<div class="fragment"><div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;{</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;  <span class="keywordtype">bool</span> devInstSet = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;  <span class="keywordtype">bool</span> ret = <a class="code" href="classVoxel_1_1USBSystemPrivate.xhtml#af36cb7f956e2d2a79a9912b725ebada9">_iterateSetupAPI</a>(guid, [<span class="keyword">this</span>, &amp;devicePath, &amp;devInst, &amp;devInstSet](<a class="code" href="group__IO.xhtml#gaafe7976c9e3804692025b8cc7317ff8e">HDEVINFO</a> devClassInfo, DeviceInfo &amp;devInfo, <a class="code" href="group__IO.xhtml#ga9c6ee30a321d6103b2a9842ac25327cf">ULONG</a> hubIndex) {</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    </div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    _bstr_t b(devInfo.devInterfaceDetailData-&gt;DevicePath);</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    <a class="code" href="classString.xhtml">String</a> devPath = b;</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    <span class="keywordflow">if</span> (!devInstSet &amp;&amp; devPath == devicePath)</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    {</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;      devInst = devInfo.devInfo.DevInst;</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;      devInstSet = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    }</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;  });</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;  <span class="keywordflow">return</span> devInstSet;</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;}</div>
<div class="ttc" id="group__IO_xhtml_ga9c6ee30a321d6103b2a9842ac25327cf"><div class="ttname"><a href="group__IO.xhtml#ga9c6ee30a321d6103b2a9842ac25327cf">Voxel::ULONG</a></div><div class="ttdeci">unsigned long ULONG</div><div class="ttdef"><b>Definition:</b> <a href="USBSystemPrivateWindows_8h_source.xhtml#l00032">USBSystemPrivateWindows.h:32</a></div></div>
<div class="ttc" id="group__IO_xhtml_gaafe7976c9e3804692025b8cc7317ff8e"><div class="ttname"><a href="group__IO.xhtml#gaafe7976c9e3804692025b8cc7317ff8e">Voxel::HDEVINFO</a></div><div class="ttdeci">void * HDEVINFO</div><div class="ttdef"><b>Definition:</b> <a href="USBSystemPrivateWindows_8h_source.xhtml#l00030">USBSystemPrivateWindows.h:30</a></div></div>
<div class="ttc" id="classString_xhtml"><div class="ttname"><a href="classString.xhtml">String</a></div></div>
<div class="ttc" id="classVoxel_1_1USBSystemPrivate_xhtml_af36cb7f956e2d2a79a9912b725ebada9"><div class="ttname"><a href="classVoxel_1_1USBSystemPrivate.xhtml#af36cb7f956e2d2a79a9912b725ebada9">Voxel::USBSystemPrivate::_iterateSetupAPI</a></div><div class="ttdeci">bool _iterateSetupAPI(LPGUID guid, Function&lt; void(HDEVINFO devClassInfo, DeviceInfo &amp;devInfo, ULONG hubIndex)&gt; process)</div><div class="ttdef"><b>Definition:</b> <a href="USBSystemPrivateWindows_8cpp_source.xhtml#l00106">USBSystemPrivateWindows.cpp:106</a></div></div>
</div><!-- fragment -->
<p><div id="dynsection-16" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-16-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-16-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-16-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classVoxel_1_1USBSystemPrivate_a8ead463f7493be6e73587a31d7b0f04b_cgraph.svg" width="616" height="51"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</p>

</div>
</div>
<a class="anchor" id="ac06767c16a91d626f545f7463f977c21"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classbool.xhtml">bool</a> Voxel::USBSystemPrivate::isInitialized </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="USBSystemPrivateLinux_8h_source.xhtml#l00044">44</a> of file <a class="el" href="USBSystemPrivateLinux_8h_source.xhtml">USBSystemPrivateLinux.h</a>.</p>

<p>References <a class="el" href="USBSystemPrivateLinux_8h_source.xhtml#l00046">getContext()</a>.</p>
<div class="fragment"><div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;{ <span class="keywordflow">return</span> <a class="code" href="classVoxel_1_1USBSystemPrivate.xhtml#a5253d98ddc9da299206f2b7ba58e82a9">getContext</a>(); }</div>
<div class="ttc" id="classVoxel_1_1USBSystemPrivate_xhtml_a5253d98ddc9da299206f2b7ba58e82a9"><div class="ttname"><a href="classVoxel_1_1USBSystemPrivate.xhtml#a5253d98ddc9da299206f2b7ba58e82a9">Voxel::USBSystemPrivate::getContext</a></div><div class="ttdeci">libusb_context * getContext()</div><div class="ttdef"><b>Definition:</b> <a href="USBSystemPrivateLinux_8h_source.xhtml#l00046">USBSystemPrivateLinux.h:46</a></div></div>
</div><!-- fragment -->
<p><div id="dynsection-17" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-17-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-17-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-17-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classVoxel_1_1USBSystemPrivate_ac06767c16a91d626f545f7463f977c21_cgraph.svg" width="416" height="51"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</p>

</div>
</div>
<a class="anchor" id="ac06767c16a91d626f545f7463f977c21"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classbool.xhtml">bool</a> Voxel::USBSystemPrivate::isInitialized </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<h2 class="groupheader">Member Data Documentation</h2>
<a class="anchor" id="abdbade05f2c35ef3342f04bae6fa81e3"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">libusb_context* Voxel::USBSystemPrivate::_context = 0</td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">protected</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="USBSystemPrivateLinux_8h_source.xhtml#l00027">27</a> of file <a class="el" href="USBSystemPrivateLinux_8h_source.xhtml">USBSystemPrivateLinux.h</a>.</p>

<p>Referenced by <a class="el" href="USBSystemPrivateLinux_8h_source.xhtml#l00046">getContext()</a>, <a class="el" href="USBSystemPrivateLinux_8cpp_source.xhtml#l00028">getDeviceHandle()</a>, <a class="el" href="USBSystemPrivateLinux_8h_source.xhtml#l00032">USBSystemPrivate()</a>, and <a class="el" href="USBSystemPrivateLinux_8h_source.xhtml#l00061">~USBSystemPrivate()</a>.</p>

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="USBSystemPrivateLinux_8h_source.xhtml">USBSystemPrivateLinux.h</a></li>
<li><a class="el" href="USBSystemPrivateWindows_8h_source.xhtml">USBSystemPrivateWindows.h</a></li>
<li><a class="el" href="USBSystemPrivateLinux_8cpp_source.xhtml">USBSystemPrivateLinux.cpp</a></li>
<li><a class="el" href="USBSystemPrivateWindows_8cpp_source.xhtml">USBSystemPrivateWindows.cpp</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Tue Jul 21 2015 20:56:06 for Voxel by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.6
</small></address>
</body>
</html>
