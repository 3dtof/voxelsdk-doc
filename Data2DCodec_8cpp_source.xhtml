<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.6"/>
<title>Voxel: Data2DCodec.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Voxel
   &#160;<span id="projectnumber">0.5.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.6 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_e7f07c35b19a6de9638fcd101b463d91.xhtml">Voxel</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">Data2DCodec.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="Data2DCodec_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * TI Voxel Lib component.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * Copyright (c) 2014 Texas Instruments Inc.</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> * </span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;</div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="Data2DCodec_8h.xhtml">Data2DCodec.h</a>&quot;</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;</div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="Logger_8h.xhtml">Logger.h</a>&quot;</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="SerializedObject_8h.xhtml">SerializedObject.h</a>&quot;</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div>
<div class="line"><a name="l00013"></a><span class="lineno"><a class="line" href="Data2DCodec_8cpp.xhtml#aa7aa152dbd176b6ea6045313160f4c85">   13</a></span>&#160;<span class="preprocessor">#define MAX_OFFSET_COUNT 5000</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00015"></a><span class="lineno"><a class="line" href="Data2DCodec_8cpp.xhtml#a62c0b0360e91b76e9c91b2276275e5ef">   15</a></span>&#160;<span class="preprocessor">#define QUANTIZATION 4</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="keyword">namespace </span>Voxel</div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;{</div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;  </div>
<div class="line"><a name="l00020"></a><span class="lineno"><a class="line" href="classVoxel_1_1BMP.xhtml">   20</a></span>&#160;<span class="keyword">class </span><a class="code" href="classVoxel_1_1BMP.xhtml">BMP</a></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;{</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;  </div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#pragma pack(push)  </span><span class="comment">/* push current alignment to stack */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#pragma pack(1)     </span><span class="comment">/* set alignment to 1 byte boundary */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="preprocessor"></span>  </div>
<div class="line"><a name="l00027"></a><span class="lineno"><a class="line" href="structVoxel_1_1BMP_1_1BITMAPFILEHEADER.xhtml">   27</a></span>&#160;  <span class="keyword">struct </span><a class="code" href="structVoxel_1_1BMP_1_1BITMAPFILEHEADER.xhtml">BITMAPFILEHEADER</a></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;  {</div>
<div class="line"><a name="l00029"></a><span class="lineno"><a class="line" href="structVoxel_1_1BMP_1_1BITMAPFILEHEADER.xhtml#accc68c215c9ce1c1395a2df60da5a046">   29</a></span>&#160;    <span class="keywordtype">char</span> <a class="code" href="structVoxel_1_1BMP_1_1BITMAPFILEHEADER.xhtml#accc68c215c9ce1c1395a2df60da5a046">bfType</a>[2];</div>
<div class="line"><a name="l00030"></a><span class="lineno"><a class="line" href="structVoxel_1_1BMP_1_1BITMAPFILEHEADER.xhtml#a34246f54d271df61251110192d9a4689">   30</a></span>&#160;    uint32_t <a class="code" href="structVoxel_1_1BMP_1_1BITMAPFILEHEADER.xhtml#a34246f54d271df61251110192d9a4689">bfSize</a>;</div>
<div class="line"><a name="l00031"></a><span class="lineno"><a class="line" href="structVoxel_1_1BMP_1_1BITMAPFILEHEADER.xhtml#ae7d2932254cce7426a9d601af35014de">   31</a></span>&#160;    uint16_t <a class="code" href="structVoxel_1_1BMP_1_1BITMAPFILEHEADER.xhtml#a3019b4d1dba7db09cf8d14c98d490691">bfReserved1</a> = 0, <a class="code" href="structVoxel_1_1BMP_1_1BITMAPFILEHEADER.xhtml#ae7d2932254cce7426a9d601af35014de">bfReserved2</a> = 0;</div>
<div class="line"><a name="l00032"></a><span class="lineno"><a class="line" href="structVoxel_1_1BMP_1_1BITMAPFILEHEADER.xhtml#a39ea3f98a02bccffca4e933180745993">   32</a></span>&#160;    uint32_t <a class="code" href="structVoxel_1_1BMP_1_1BITMAPFILEHEADER.xhtml#a39ea3f98a02bccffca4e933180745993">bfOffset</a>;</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;    </div>
<div class="line"><a name="l00034"></a><span class="lineno"><a class="line" href="structVoxel_1_1BMP_1_1BITMAPFILEHEADER.xhtml#a2db5eb3957ae1f70d6a134859af281be">   34</a></span>&#160;    <a class="code" href="structVoxel_1_1BMP_1_1BITMAPFILEHEADER.xhtml#a2db5eb3957ae1f70d6a134859af281be">BITMAPFILEHEADER</a>() { <a class="code" href="structVoxel_1_1BMP_1_1BITMAPFILEHEADER.xhtml#accc68c215c9ce1c1395a2df60da5a046">bfType</a>[0] = <span class="charliteral">&#39;B&#39;</span>; <a class="code" href="structVoxel_1_1BMP_1_1BITMAPFILEHEADER.xhtml#accc68c215c9ce1c1395a2df60da5a046">bfType</a>[1] = <span class="charliteral">&#39;M&#39;</span>; }</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;  };</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;  </div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="preprocessor">#pragma pack(pop)   </span><span class="comment">/* restore original alignment from stack */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="preprocessor"></span>  </div>
<div class="line"><a name="l00039"></a><span class="lineno"><a class="line" href="structVoxel_1_1BMP_1_1BITMAPINFOHEADER.xhtml">   39</a></span>&#160;  <span class="keyword">struct </span><a class="code" href="structVoxel_1_1BMP_1_1BITMAPINFOHEADER.xhtml">BITMAPINFOHEADER</a></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;  {</div>
<div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="structVoxel_1_1BMP_1_1BITMAPINFOHEADER.xhtml#a64566299073a6a5e22fbc3b36f326766">   41</a></span>&#160;    uint32_t <a class="code" href="structVoxel_1_1BMP_1_1BITMAPINFOHEADER.xhtml#a64566299073a6a5e22fbc3b36f326766">biSize</a> = 40;</div>
<div class="line"><a name="l00042"></a><span class="lineno"><a class="line" href="structVoxel_1_1BMP_1_1BITMAPINFOHEADER.xhtml#ae9566ec8fa8853b60976aecf6c7db0d0">   42</a></span>&#160;    uint32_t <a class="code" href="structVoxel_1_1BMP_1_1BITMAPINFOHEADER.xhtml#ae9566ec8fa8853b60976aecf6c7db0d0">biWidth</a>;</div>
<div class="line"><a name="l00043"></a><span class="lineno"><a class="line" href="structVoxel_1_1BMP_1_1BITMAPINFOHEADER.xhtml#a763dd5ab422f5c03fc0637d1adc989bc">   43</a></span>&#160;    uint32_t <a class="code" href="structVoxel_1_1BMP_1_1BITMAPINFOHEADER.xhtml#a763dd5ab422f5c03fc0637d1adc989bc">biHeight</a>;</div>
<div class="line"><a name="l00044"></a><span class="lineno"><a class="line" href="structVoxel_1_1BMP_1_1BITMAPINFOHEADER.xhtml#a78e6891c30b75b2323d6f1cf55fc7d7c">   44</a></span>&#160;    uint16_t <a class="code" href="structVoxel_1_1BMP_1_1BITMAPINFOHEADER.xhtml#a78e6891c30b75b2323d6f1cf55fc7d7c">biPlanes</a> = 1;</div>
<div class="line"><a name="l00045"></a><span class="lineno"><a class="line" href="structVoxel_1_1BMP_1_1BITMAPINFOHEADER.xhtml#ae01c2c1c8f927900b1d735806a3cc06c">   45</a></span>&#160;    uint16_t <a class="code" href="structVoxel_1_1BMP_1_1BITMAPINFOHEADER.xhtml#ae01c2c1c8f927900b1d735806a3cc06c">biBitCount</a> = 24;</div>
<div class="line"><a name="l00046"></a><span class="lineno"><a class="line" href="structVoxel_1_1BMP_1_1BITMAPINFOHEADER.xhtml#a9f7bf8fd9fadaadd6ab6fd5a10e5900d">   46</a></span>&#160;    uint32_t <a class="code" href="structVoxel_1_1BMP_1_1BITMAPINFOHEADER.xhtml#a9f7bf8fd9fadaadd6ab6fd5a10e5900d">biCompression</a> = 0;</div>
<div class="line"><a name="l00047"></a><span class="lineno"><a class="line" href="structVoxel_1_1BMP_1_1BITMAPINFOHEADER.xhtml#a90ab7aa3e07b34f50915d77e56e563d4">   47</a></span>&#160;    uint32_t <a class="code" href="structVoxel_1_1BMP_1_1BITMAPINFOHEADER.xhtml#a90ab7aa3e07b34f50915d77e56e563d4">biSizeImage</a> = 0;</div>
<div class="line"><a name="l00048"></a><span class="lineno"><a class="line" href="structVoxel_1_1BMP_1_1BITMAPINFOHEADER.xhtml#acbd2bdb09b2fb9fad1ddd073036f027d">   48</a></span>&#160;    uint32_t <a class="code" href="structVoxel_1_1BMP_1_1BITMAPINFOHEADER.xhtml#acbd2bdb09b2fb9fad1ddd073036f027d">biXPelsPerMeter</a> = 0;</div>
<div class="line"><a name="l00049"></a><span class="lineno"><a class="line" href="structVoxel_1_1BMP_1_1BITMAPINFOHEADER.xhtml#a7d2096d6a78ed7fa3d2fc2ab8b9fddfe">   49</a></span>&#160;    uint32_t <a class="code" href="structVoxel_1_1BMP_1_1BITMAPINFOHEADER.xhtml#a7d2096d6a78ed7fa3d2fc2ab8b9fddfe">biYPelsPerMeter</a> = 0;</div>
<div class="line"><a name="l00050"></a><span class="lineno"><a class="line" href="structVoxel_1_1BMP_1_1BITMAPINFOHEADER.xhtml#a7e1d2cd84070ee83e73329c03cbc644f">   50</a></span>&#160;    uint32_t <a class="code" href="structVoxel_1_1BMP_1_1BITMAPINFOHEADER.xhtml#a7e1d2cd84070ee83e73329c03cbc644f">biClrUsed</a> = 0;</div>
<div class="line"><a name="l00051"></a><span class="lineno"><a class="line" href="structVoxel_1_1BMP_1_1BITMAPINFOHEADER.xhtml#a0e52f7818e5fc0ac464eaac6692cf3c2">   51</a></span>&#160;    uint32_t <a class="code" href="structVoxel_1_1BMP_1_1BITMAPINFOHEADER.xhtml#a0e52f7818e5fc0ac464eaac6692cf3c2">biClrImportant</a> = 0;</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;  };</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;  </div>
<div class="line"><a name="l00054"></a><span class="lineno"><a class="line" href="classVoxel_1_1BMP.xhtml#a476b06115b559a8f90fb0c36887152a5">   54</a></span>&#160;  <span class="keywordtype">bool</span> <a class="code" href="classVoxel_1_1BMP.xhtml#a476b06115b559a8f90fb0c36887152a5">readGrayscale</a>(<span class="keyword">const</span> <a class="code" href="classString.xhtml">String</a> &amp;filename, <a class="code" href="group__Util.xhtml#ga8a21cf7475356ae552da8952ebf885b4">Vector&lt;int16_t&gt;</a> &amp;data)</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;  {</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;    <span class="keywordtype">int</span> i;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <a class="code" href="group__Util.xhtml#gaf37e7f5948ef68c00b6597335b3eedc4">InputFileStream</a> f(filename, std::ios::in | std::ios::binary);</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    </div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keywordflow">if</span>(!f.good())</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;    {</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;      <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;Failed to open &#39;&quot;</span> &lt;&lt; filename &lt;&lt; <span class="stringliteral">&quot;&#39;&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;      <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;    }</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    </div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> info[54];</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;    </div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;    <a class="code" href="group__Util.xhtml#ga8a21cf7475356ae552da8952ebf885b4">Vector&lt;char&gt;</a> fullHeader;</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    </div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;    <span class="keywordtype">int</span> width, height;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    </div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    f.read((<span class="keywordtype">char</span> *)info, <span class="keyword">sizeof</span>(<span class="keywordtype">char</span>)*54); <span class="comment">// read the 54-byte header</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    </div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;    <span class="keywordtype">int</span> offset = *(<span class="keywordtype">int</span> *)&amp;info[10];</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="comment">// extract image height and width from header</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    width = *(<span class="keywordtype">int</span> *)&amp;info[18];</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;    height = *(<span class="keywordtype">int</span> *)&amp;info[22];</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;    </div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordflow">if</span>(offset &lt; 54)</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    {</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;      <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;Wrong file format. Got offset = &quot;</span> &lt;&lt; offset &lt;&lt; std::endl;</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;      <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;    }</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;    </div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;    fullHeader.resize(offset - 54);</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;    </div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;    f.read((<span class="keywordtype">char</span> *)fullHeader.data(), <span class="keyword">sizeof</span>(char)*fullHeader.size());</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;    </div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    </div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;    <span class="keywordflow">if</span>(width &lt; 0 || height &lt; 0)</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;    {</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;      <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;Data2DCodecTest: Negative values for width or height is invalid&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    }</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    </div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;    <span class="keywordflow">if</span>(width &gt; 10000 || height &gt; 10000)</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;    {</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;      <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;Data2DCodecTest: Width or height is too high&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;    }</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;    </div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <span class="keywordtype">int</span> size = width*height;</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;    data.resize(size); <span class="comment">// allocate 2 bytes per pixel</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    </div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keywordtype">short</span> <span class="keywordtype">int</span> pixelWidth;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    </div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;    pixelWidth = *(<span class="keywordtype">short</span> <span class="keywordtype">int</span> *)&amp;info[28];</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    </div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <a class="code" href="group__Util.xhtml#ga8a21cf7475356ae552da8952ebf885b4">Vector&lt;unsigned char&gt;</a> d;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    </div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keywordflow">if</span>(pixelWidth == 24)</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    {</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;      d.resize(size*3);</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;      </div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;      f.read((<span class="keywordtype">char</span> *)d.data(), <span class="keyword">sizeof</span>(<span class="keywordtype">unsigned</span> char)*size*3); <span class="comment">// read the rest of the data at once</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;      </div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;      <span class="keywordflow">for</span>(i = 0; i &lt; size; i++)</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;        data[i] = (d[3*i] + d[3*i + 1] + d[3*i + 2])/3;</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    }</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keywordflow">else</span> <span class="keywordflow">if</span>(pixelWidth == 8)</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;    {</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;      d.resize(size);</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;      </div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;      f.read((<span class="keywordtype">char</span> *)d.data(), <span class="keyword">sizeof</span>(<span class="keywordtype">unsigned</span> char)*size); <span class="comment">// read the rest of the data at once</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;      </div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;      <span class="keywordflow">for</span>(i = 0; i &lt; size; i++)</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;        data[i] = d[i];</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    }</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    {</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;      <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;Unsupported pixel width = &quot;</span> &lt;&lt; pixelWidth &lt;&lt; std::endl;</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    }</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    </div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    f.close();</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;  }</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;  </div>
<div class="line"><a name="l00138"></a><span class="lineno"><a class="line" href="classVoxel_1_1BMP.xhtml#ae09838e18d8ff0d930029c67004ead79">  138</a></span>&#160;  <span class="keywordtype">bool</span> <a class="code" href="classVoxel_1_1BMP.xhtml#ae09838e18d8ff0d930029c67004ead79">writeGrayScale</a>(<span class="keyword">const</span> <a class="code" href="classString.xhtml">String</a> &amp;filename, <span class="keyword">const</span> <a class="code" href="group__Util.xhtml#ga8a21cf7475356ae552da8952ebf885b4">Vector&lt;int16_t&gt;</a> &amp;data, <span class="keyword">const</span> uint16_t rows, <span class="keyword">const</span> uint16_t columns)</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;  {</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keywordtype">int</span> i;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    </div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    <span class="keywordflow">if</span>(data.size() != rows*columns + 2)</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    {</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;      <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;Data2DCodecTest: Expected data size to be &quot;</span> &lt;&lt; rows*columns &lt;&lt; <span class="stringliteral">&quot;bytes, got &quot;</span> &lt;&lt; data.size() &lt;&lt; <span class="stringliteral">&quot; bytes.&quot;</span> &lt;&lt; std::endl; </div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    }</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    </div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <a class="code" href="group__Util.xhtml#gac9285678d341a751b35b85faaaa8248f">OutputFileStream</a> f(filename, std::ios::out | std::ios::binary);</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    </div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keywordflow">if</span>(!f.good())</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    {</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;      <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;Failed to open &#39;&quot;</span> &lt;&lt; filename &lt;&lt; <span class="stringliteral">&quot;&#39;&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;      <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;    }</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;    </div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    <a class="code" href="structVoxel_1_1BMP_1_1BITMAPFILEHEADER.xhtml">BITMAPFILEHEADER</a> bfh;</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <a class="code" href="structVoxel_1_1BMP_1_1BITMAPINFOHEADER.xhtml">BITMAPINFOHEADER</a> bih;</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    </div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    bfh.<a class="code" href="structVoxel_1_1BMP_1_1BITMAPFILEHEADER.xhtml#a39ea3f98a02bccffca4e933180745993">bfOffset</a> = <span class="keyword">sizeof</span>(<a class="code" href="structVoxel_1_1BMP_1_1BITMAPFILEHEADER.xhtml">BITMAPFILEHEADER</a>) + <span class="keyword">sizeof</span>(<a class="code" href="structVoxel_1_1BMP_1_1BITMAPINFOHEADER.xhtml">BITMAPINFOHEADER</a>);</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;    bfh.<a class="code" href="structVoxel_1_1BMP_1_1BITMAPFILEHEADER.xhtml#a34246f54d271df61251110192d9a4689">bfSize</a> = bfh.<a class="code" href="structVoxel_1_1BMP_1_1BITMAPFILEHEADER.xhtml#a39ea3f98a02bccffca4e933180745993">bfOffset</a> + rows*columns*3;</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    </div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    bih.<a class="code" href="structVoxel_1_1BMP_1_1BITMAPINFOHEADER.xhtml#ae9566ec8fa8853b60976aecf6c7db0d0">biWidth</a> = columns;</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;    bih.<a class="code" href="structVoxel_1_1BMP_1_1BITMAPINFOHEADER.xhtml#a763dd5ab422f5c03fc0637d1adc989bc">biHeight</a> = rows;</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;    </div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    f.write((<span class="keyword">const</span> <span class="keywordtype">char</span> *)&amp;bfh, <span class="keyword">sizeof</span>(<a class="code" href="structVoxel_1_1BMP_1_1BITMAPFILEHEADER.xhtml">BITMAPFILEHEADER</a>));</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    f.write((<span class="keyword">const</span> <span class="keywordtype">char</span> *)&amp;bih, <span class="keyword">sizeof</span>(<a class="code" href="structVoxel_1_1BMP_1_1BITMAPINFOHEADER.xhtml">BITMAPINFOHEADER</a>));</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    </div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <span class="keywordtype">int</span> size = rows*columns;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    </div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;    <span class="keywordtype">short</span> <span class="keywordtype">int</span> pixelWidth;</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;    </div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <a class="code" href="group__Util.xhtml#ga8a21cf7475356ae552da8952ebf885b4">Vector&lt;unsigned char&gt;</a> d;</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    d.resize(size*3);</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    </div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keyword">const</span> int16_t *dat = &amp;data[2];</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;      </div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;    <span class="keywordflow">for</span>(i = 0; i &lt; size; i++)</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;    {</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;      <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> c;</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;      </div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;      c = abs(dat[i]);</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;      </div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;      d[3*i] = c;</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;      d[3*i + 1] = c;</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;      d[3*i + 2] = c;</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    }</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;    </div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    f.write((<span class="keyword">const</span> <span class="keywordtype">char</span> *)d.data(), <span class="keyword">sizeof</span>(<span class="keywordtype">unsigned</span> char)*size*3);</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;    f.close();</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    </div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;  }</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;};</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;</div>
<div class="line"><a name="l00196"></a><span class="lineno"><a class="line" href="classVoxel_1_1Data2DCodec.xhtml#a371575e583f23b65cc1a50e8ae78d6b8">  196</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classVoxel_1_1Data2DCodec.xhtml#a371575e583f23b65cc1a50e8ae78d6b8">Data2DCodec::compress</a>(<span class="keyword">const</span> <a class="code" href="classVoxel_1_1Data2DCodec.xhtml#a44af60ef9ca7e9889c4cc09cffde9ee8">Array2D</a> &amp;in, <span class="keyword">const</span> <a class="code" href="classVoxel_1_1Data2DCodec.xhtml#aebdd2f897283ea3bee494ed3cfec2328">ArrayBool2D</a> &amp;invalidPixels, <a class="code" href="classVoxel_1_1Data2DCodec.xhtml#a2ebae68b9bb6653938e5d87850cd37d2">ByteArray</a> &amp;out)</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;{</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;  uint16_t rows = *(uint16_t *)&amp;in[0];</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;  uint16_t columns = *(uint16_t *)&amp;in[1];</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;  </div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;  <span class="keyword">const</span> int16_t *inData = &amp;in[2];</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;  </div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;  <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758ad625895b380d0d8fc7ef71ef75429b7a">LOG_DEBUG</a>) &lt;&lt; <span class="stringliteral">&quot;Data2DCodec: rows = &quot;</span> &lt;&lt; rows &lt;&lt; <span class="stringliteral">&quot;, columns = &quot;</span> &lt;&lt; columns &lt;&lt; std::endl;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;  </div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;  <span class="keywordtype">bool</span> noInvalidPixels = (invalidPixels.size() == 0);</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;    </div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;  </div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;  <span class="keywordflow">if</span>(in.size() != rows*columns + 2 || (!noInvalidPixels &amp;&amp; invalidPixels.size() != rows*columns))</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;  {</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;Data2DCodec: Invalid input data size. Expected &quot;</span> &lt;&lt; rows*columns*2</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    &lt;&lt; <span class="stringliteral">&quot; bytes, got &quot;</span> &lt;&lt; in.size()*2 &lt;&lt; <span class="stringliteral">&quot; bytes&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;  }</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;  </div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;  <span class="keywordflow">if</span>(rows % 8 != 0 || columns % 8 != 0)</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;  {</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;    <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;Data2DCodec: Invalid input data. This codec is designed for only rows and columns which are multiples of 8.&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;  }</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;  </div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;  <a class="code" href="classVoxel_1_1SerializedObject.xhtml">SerializedObject</a> so;</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;  so.<a class="code" href="classVoxel_1_1SerializedObject.xhtml#a28bffcfa230e90768ea678269a782381">resize</a>(rows*columns*<span class="keyword">sizeof</span>(in[0])*10); <span class="comment">// Maximum size needed</span></div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;  </div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;  uint16_t version = 0;</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;  so.<a class="code" href="classVoxel_1_1SerializedObject.xhtml#a93bedaae4489eeac130ea6a98be2589c">put</a>((<span class="keyword">const</span> <span class="keywordtype">char</span> *)&amp;version, <span class="keyword">sizeof</span>(version));</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;  </div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;  so.<a class="code" href="classVoxel_1_1SerializedObject.xhtml#a93bedaae4489eeac130ea6a98be2589c">put</a>((<span class="keyword">const</span> <span class="keywordtype">char</span> *)&amp;rows, <span class="keyword">sizeof</span>(rows));</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;  so.<a class="code" href="classVoxel_1_1SerializedObject.xhtml#a93bedaae4489eeac130ea6a98be2589c">put</a>((<span class="keyword">const</span> <span class="keywordtype">char</span> *)&amp;columns, <span class="keyword">sizeof</span>(columns));</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;  </div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;  <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758ad625895b380d0d8fc7ef71ef75429b7a">LOG_DEBUG</a>) &lt;&lt; <span class="stringliteral">&quot;Data2DCodec: current number of bytes = &quot;</span> &lt;&lt; so.<a class="code" href="classVoxel_1_1SerializedObject.xhtml#a602414fea53034e304c0e6fcae5bb71b">currentPutOffset</a>() &lt;&lt; std::endl;</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;  </div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;  <a class="code" href="group__Util.xhtml#ga8a21cf7475356ae552da8952ebf885b4">Vector&lt;int32_t&gt;</a> averages(rows/8*columns/8);</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;  </div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;  <a class="code" href="classList.xhtml">List&lt;EightBitOffset&gt;</a> offsets;</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;  </div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;  <a class="code" href="group__Util.xhtml#ga8a21cf7475356ae552da8952ebf885b4">Vector&lt;int8_t&gt;</a> fourBitOffsets;</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;  fourBitOffsets.resize(rows*columns);</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;  </div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;  <span class="keywordflow">for</span>(<span class="keyword">auto</span> i = 0; i &lt; averages.size(); i++)</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    averages[i] = 0;</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;  </div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;  <span class="keywordflow">for</span>(<span class="keyword">auto</span> i = 0; i &lt; rows; i++)</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> j = 0; j &lt; columns; j++)</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;      averages[i/8*columns/8 + j/8] += inData[i*columns + j];</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;  </div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;  <span class="keywordflow">for</span>(<span class="keyword">auto</span> i = 0; i &lt; averages.size(); i++)</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;  {</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    averages[i] /= 64;</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    int16_t d = averages[i];</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    so.<a class="code" href="classVoxel_1_1SerializedObject.xhtml#a93bedaae4489eeac130ea6a98be2589c">put</a>((<span class="keyword">const</span> <span class="keywordtype">char</span> *)&amp;d, <span class="keyword">sizeof</span>(d));</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;  }</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;  </div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;  <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758ad625895b380d0d8fc7ef71ef75429b7a">LOG_DEBUG</a>) &lt;&lt; <span class="stringliteral">&quot;Data2DCodec: current number of bytes = &quot;</span> &lt;&lt; so.<a class="code" href="classVoxel_1_1SerializedObject.xhtml#a602414fea53034e304c0e6fcae5bb71b">currentPutOffset</a>() &lt;&lt; std::endl;</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;  </div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;  uint32_t invalidPixelCount = 0;</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;  </div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;  <span class="keywordflow">for</span>(<span class="keyword">auto</span> i = 0; i &lt; rows; i++)</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;  {</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> j = 0; j &lt; columns; j++)</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;    {</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;      <span class="keywordtype">int</span> index = i/8*columns/8 + j/8;</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;      </div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;      int16_t v = (inData[i*columns + j] - averages[index])/<a class="code" href="Data2DCodec_8cpp.xhtml#a62c0b0360e91b76e9c91b2276275e5ef">QUANTIZATION</a>;</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;      </div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;      <span class="keywordflow">if</span>(!noInvalidPixels &amp;&amp; invalidPixels[i*columns + j])</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;      {</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;        invalidPixelCount++;</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        v = 0;</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;      }</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;      </div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;      <span class="keywordflow">if</span>(v &gt; 7 || v &lt; -7)</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;      {</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        <span class="keywordflow">if</span>(v &gt; 127)</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;          v = 127;</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span>(v &lt; -128)</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;          v = -128;</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        </div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;        offsets.push_back(<a class="code" href="structVoxel_1_1Data2DCodec_1_1EightBitOffset.xhtml">EightBitOffset</a>(i, j, v, offsets.size()));</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        </div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        fourBitOffsets[i*columns + j] = 8;</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;      }</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;      <span class="keywordflow">else</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;        fourBitOffsets[i*columns + j] = v;</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    }</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;  }</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;  </div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;  <span class="keywordtype">int</span> midRow = rows/2, midColumn = columns/2;</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;  </div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;  uint32_t offsetCount = offsets.size();</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;  </div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;  <span class="keywordflow">if</span>(offsets.size() &gt; <a class="code" href="Data2DCodec_8cpp.xhtml#aa7aa152dbd176b6ea6045313160f4c85">MAX_OFFSET_COUNT</a>)</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;  {</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <span class="comment">// Ignore extra offsets near the edges</span></div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    offsets.sort([&amp;](<span class="keyword">const</span> <a class="code" href="structVoxel_1_1Data2DCodec_1_1EightBitOffset.xhtml">EightBitOffset</a> &amp;a, <span class="keyword">const</span> <a class="code" href="structVoxel_1_1Data2DCodec_1_1EightBitOffset.xhtml">EightBitOffset</a> &amp;b) -&gt; <span class="keywordtype">bool</span>  { </div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        <span class="keywordflow">return</span> (a.<a class="code" href="structVoxel_1_1Data2DCodec_1_1EightBitOffset.xhtml#aef5d4a753e88fc0f44ed2d07024a4ced">r</a> - midRow)*(a.<a class="code" href="structVoxel_1_1Data2DCodec_1_1EightBitOffset.xhtml#aef5d4a753e88fc0f44ed2d07024a4ced">r</a> - midRow) + (a.<a class="code" href="structVoxel_1_1Data2DCodec_1_1EightBitOffset.xhtml#ac7a7dd4ca51c694098583ae0e8832628">c</a> - midColumn)*(a.<a class="code" href="structVoxel_1_1Data2DCodec_1_1EightBitOffset.xhtml#ac7a7dd4ca51c694098583ae0e8832628">c</a> - midColumn) &lt; </div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;            (b.<a class="code" href="structVoxel_1_1Data2DCodec_1_1EightBitOffset.xhtml#aef5d4a753e88fc0f44ed2d07024a4ced">r</a> - midRow)*(b.<a class="code" href="structVoxel_1_1Data2DCodec_1_1EightBitOffset.xhtml#aef5d4a753e88fc0f44ed2d07024a4ced">r</a> - midRow) + (b.<a class="code" href="structVoxel_1_1Data2DCodec_1_1EightBitOffset.xhtml#ac7a7dd4ca51c694098583ae0e8832628">c</a> - midColumn)*(b.<a class="code" href="structVoxel_1_1Data2DCodec_1_1EightBitOffset.xhtml#ac7a7dd4ca51c694098583ae0e8832628">c</a> - midColumn);</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;      });</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    </div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    <span class="keyword">auto</span> o = offsets.begin();</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    std::advance(o, <a class="code" href="Data2DCodec_8cpp.xhtml#aa7aa152dbd176b6ea6045313160f4c85">MAX_OFFSET_COUNT</a>);</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    </div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    <span class="keywordflow">for</span>(; o != offsets.end(); o++)</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    {</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;      <span class="keywordflow">if</span>(o-&gt;offset &gt; 0)</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;        fourBitOffsets[o-&gt;r*columns + o-&gt;c] = 7;</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;      <span class="keywordflow">else</span></div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        fourBitOffsets[o-&gt;r*columns + o-&gt;c] = -7;</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;    }</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    </div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    o = offsets.begin();</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    std::advance(o, <a class="code" href="Data2DCodec_8cpp.xhtml#aa7aa152dbd176b6ea6045313160f4c85">MAX_OFFSET_COUNT</a>);</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    offsets.erase(o, offsets.end());</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    </div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    <span class="comment">// Reorder in index order</span></div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    offsets.sort([&amp;](<span class="keyword">const</span> <a class="code" href="structVoxel_1_1Data2DCodec_1_1EightBitOffset.xhtml">EightBitOffset</a> &amp;a, <span class="keyword">const</span> <a class="code" href="structVoxel_1_1Data2DCodec_1_1EightBitOffset.xhtml">EightBitOffset</a> &amp;b) -&gt; <span class="keywordtype">bool</span>  { </div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;      <span class="keywordflow">return</span> a.<a class="code" href="structVoxel_1_1Data2DCodec_1_1EightBitOffset.xhtml#acf2a11e2bbe551ecf6680906264e4dc8">index</a> &lt; b.<a class="code" href="structVoxel_1_1Data2DCodec_1_1EightBitOffset.xhtml#acf2a11e2bbe551ecf6680906264e4dc8">index</a>;</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    });</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;  }</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;  </div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;  <span class="keywordflow">for</span>(<span class="keyword">auto</span> i = 0; i &lt; fourBitOffsets.size(); i += 2)</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;  {</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    uint8_t d = (((uint8_t)fourBitOffsets[i]) &amp; 0xF) + ((((uint8_t)fourBitOffsets[i + 1]) &amp; 0xF) &lt;&lt; 4);</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;    </div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    so.<a class="code" href="classVoxel_1_1SerializedObject.xhtml#a93bedaae4489eeac130ea6a98be2589c">put</a>((<span class="keyword">const</span> <span class="keywordtype">char</span> *)&amp;d, 1);</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;  }</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;  </div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;  <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758ad625895b380d0d8fc7ef71ef75429b7a">LOG_DEBUG</a>) &lt;&lt; <span class="stringliteral">&quot;Data2DCodec: current number of bytes = &quot;</span> &lt;&lt; so.<a class="code" href="classVoxel_1_1SerializedObject.xhtml#a602414fea53034e304c0e6fcae5bb71b">currentPutOffset</a>() &lt;&lt; std::endl;</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;  </div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;  <span class="keywordflow">for</span>(<span class="keyword">auto</span> o = offsets.begin(); o != offsets.end(); o++)</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;  {</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;    so.<a class="code" href="classVoxel_1_1SerializedObject.xhtml#a93bedaae4489eeac130ea6a98be2589c">put</a>((<span class="keyword">const</span> <span class="keywordtype">char</span> *)&amp;o-&gt;offset, 1);</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;  }</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;  </div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;  so.<a class="code" href="classVoxel_1_1SerializedObject.xhtml#a93bedaae4489eeac130ea6a98be2589c">put</a>((<span class="keyword">const</span> <span class="keywordtype">char</span> *)&amp;offsetCount, <span class="keyword">sizeof</span>(offsetCount));</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;  so.<a class="code" href="classVoxel_1_1SerializedObject.xhtml#a93bedaae4489eeac130ea6a98be2589c">put</a>((<span class="keyword">const</span> <span class="keywordtype">char</span> *)&amp;invalidPixelCount, <span class="keyword">sizeof</span>(invalidPixelCount));</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;  </div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;  <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758ad625895b380d0d8fc7ef71ef75429b7a">LOG_DEBUG</a>) &lt;&lt; <span class="stringliteral">&quot;Data2DCodec: Number of 8-bit offsets = &quot;</span> &lt;&lt; offsetCount &lt;&lt; std::endl;</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;  <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758ad625895b380d0d8fc7ef71ef75429b7a">LOG_DEBUG</a>) &lt;&lt; <span class="stringliteral">&quot;Data2DCodec: Number of invalid pixels = &quot;</span> &lt;&lt; invalidPixelCount &lt;&lt; std::endl;</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;  </div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;  <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758ad625895b380d0d8fc7ef71ef75429b7a">LOG_DEBUG</a>) &lt;&lt; <span class="stringliteral">&quot;Data2DCodec: current number of bytes = &quot;</span> &lt;&lt; so.<a class="code" href="classVoxel_1_1SerializedObject.xhtml#a602414fea53034e304c0e6fcae5bb71b">currentPutOffset</a>() &lt;&lt; std::endl;</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;  </div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;  out.resize(so.<a class="code" href="classVoxel_1_1SerializedObject.xhtml#a602414fea53034e304c0e6fcae5bb71b">currentPutOffset</a>());</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;  </div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;  memcpy(out.data(), so.<a class="code" href="classVoxel_1_1SerializedObject.xhtml#aac0058e6b0ea0cb6ac86f4e986f6de25">getBytes</a>().data(), out.size());</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;}</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;</div>
<div class="line"><a name="l00348"></a><span class="lineno"><a class="line" href="classVoxel_1_1Data2DCodec.xhtml#a7de3e8541aa3e9e032a50b5d2452929c">  348</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classVoxel_1_1Data2DCodec.xhtml#a7de3e8541aa3e9e032a50b5d2452929c">Data2DCodec::writeGrayBMPImage</a>(<span class="keyword">const</span> <a class="code" href="classString.xhtml">String</a> &amp;fileName, <span class="keyword">const</span> <a class="code" href="classVoxel_1_1Data2DCodec.xhtml#a44af60ef9ca7e9889c4cc09cffde9ee8">Array2D</a> &amp;a, <span class="keyword">const</span> uint16_t rows, <span class="keyword">const</span> uint16_t columns)</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;{</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;  <a class="code" href="classVoxel_1_1BMP.xhtml">BMP</a> bmp;</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;  </div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;  <span class="keywordflow">return</span> bmp.<a class="code" href="classVoxel_1_1BMP.xhtml#ae09838e18d8ff0d930029c67004ead79">writeGrayScale</a>(fileName, a, rows, columns);</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;}</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;</div>
<div class="line"><a name="l00357"></a><span class="lineno"><a class="line" href="classVoxel_1_1Data2DCodec.xhtml#af19bf3b5b14e9010e924a7d2125120c9">  357</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classVoxel_1_1Data2DCodec.xhtml#af19bf3b5b14e9010e924a7d2125120c9">Data2DCodec::decompress</a>(<span class="keyword">const</span> <a class="code" href="classVoxel_1_1Data2DCodec.xhtml#a2ebae68b9bb6653938e5d87850cd37d2">ByteArray</a> &amp;in, <a class="code" href="classVoxel_1_1Data2DCodec.xhtml#a44af60ef9ca7e9889c4cc09cffde9ee8">Array2D</a> &amp;out)</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;{</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;  <a class="code" href="classVoxel_1_1SerializedObject.xhtml">SerializedObject</a> so;</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;  so.<a class="code" href="classVoxel_1_1SerializedObject.xhtml#a28bffcfa230e90768ea678269a782381">resize</a>(in.size()); <span class="comment">// Maximum size needed</span></div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;  so.<a class="code" href="classVoxel_1_1SerializedObject.xhtml#a93bedaae4489eeac130ea6a98be2589c">put</a>((<span class="keyword">const</span> <span class="keywordtype">char</span> *)in.data(), in.size()*<span class="keyword">sizeof</span>(in[0]));</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;  </div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;  uint16_t version;</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;  so.<a class="code" href="classVoxel_1_1SerializedObject.xhtml#a2044534dbfab4e75452288a0223dae7b">get</a>((<span class="keywordtype">char</span> *)&amp;version, <span class="keyword">sizeof</span>(version));</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;  </div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;  uint16_t rows, columns;</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;  </div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;  so.<a class="code" href="classVoxel_1_1SerializedObject.xhtml#a2044534dbfab4e75452288a0223dae7b">get</a>((<span class="keywordtype">char</span> *)&amp;rows, <span class="keyword">sizeof</span>(rows));</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;  so.<a class="code" href="classVoxel_1_1SerializedObject.xhtml#a2044534dbfab4e75452288a0223dae7b">get</a>((<span class="keywordtype">char</span> *)&amp;columns, <span class="keyword">sizeof</span>(columns));</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;  </div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;  <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758ad625895b380d0d8fc7ef71ef75429b7a">LOG_DEBUG</a>) &lt;&lt; <span class="stringliteral">&quot;Data2DCodec: current number of bytes = &quot;</span> &lt;&lt; so.<a class="code" href="classVoxel_1_1SerializedObject.xhtml#a5b4f523481053034ad119a0dd8798eb4">currentGetOffset</a>() &lt;&lt; std::endl;</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;  </div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;  <span class="keywordflow">if</span>(rows % 8 != 0 || columns % 8 != 0)</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;  {</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;Data2DCodec: Invalid input data. This codec is designed for only rows and columns which are multiples of 8.&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;  }</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;  </div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;  <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758ad625895b380d0d8fc7ef71ef75429b7a">LOG_DEBUG</a>) &lt;&lt; <span class="stringliteral">&quot;Data2DCodec: rows = &quot;</span> &lt;&lt; rows &lt;&lt; <span class="stringliteral">&quot;, columns = &quot;</span> &lt;&lt; columns &lt;&lt; std::endl;</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;  </div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;  <a class="code" href="group__Util.xhtml#ga8a21cf7475356ae552da8952ebf885b4">Vector&lt;int16_t&gt;</a> averages(rows/8*columns/8);</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;  </div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;  so.<a class="code" href="classVoxel_1_1SerializedObject.xhtml#a2044534dbfab4e75452288a0223dae7b">get</a>((<span class="keywordtype">char</span> *)averages.data(), averages.size()*<span class="keyword">sizeof</span>(averages[0]));</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;  </div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;  <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758ad625895b380d0d8fc7ef71ef75429b7a">LOG_DEBUG</a>) &lt;&lt; <span class="stringliteral">&quot;Data2DCodec: current number of bytes = &quot;</span> &lt;&lt; so.<a class="code" href="classVoxel_1_1SerializedObject.xhtml#a5b4f523481053034ad119a0dd8798eb4">currentGetOffset</a>() &lt;&lt; std::endl;</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;  </div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;  out.resize(rows*columns + 2);</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;  </div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;  *(uint16_t *)&amp;out[0] = rows;</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;  *(uint16_t *)&amp;out[1] = columns;</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;  </div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;  int16_t *outData = &amp;out[2];</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;  </div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;  <span class="keywordflow">for</span>(<span class="keyword">auto</span> i = 0; i &lt; rows; i++)</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;  {</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> j = 0; j &lt; columns; j++)</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    {</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;      outData[i*columns + j] = averages[i/8*columns/8 + j/8];</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    }</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;  }</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;  </div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;  <span class="comment">//writeGrayBMPImage(&quot;trialI0.bmp&quot;, out, rows, columns);</span></div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;  </div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;  <a class="code" href="group__Util.xhtml#ga8a21cf7475356ae552da8952ebf885b4">Vector&lt;uint8_t&gt;</a> fourBitOffsets;</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;  fourBitOffsets.resize(rows*columns/2);</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;  </div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;  so.<a class="code" href="classVoxel_1_1SerializedObject.xhtml#a2044534dbfab4e75452288a0223dae7b">get</a>((<span class="keywordtype">char</span> *)fourBitOffsets.data(), fourBitOffsets.size());</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;  </div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;  <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758ad625895b380d0d8fc7ef71ef75429b7a">LOG_DEBUG</a>) &lt;&lt; <span class="stringliteral">&quot;Data2DCodec: current number of bytes = &quot;</span> &lt;&lt; so.<a class="code" href="classVoxel_1_1SerializedObject.xhtml#a5b4f523481053034ad119a0dd8798eb4">currentGetOffset</a>() &lt;&lt; std::endl;</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;  </div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;  uint32_t offsetCount = 0;</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;  </div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;  <span class="keywordflow">for</span>(<span class="keyword">auto</span> i = 0; i &lt; rows; i++)</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;  {</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> j = 0; j &lt; columns; j += 2)</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    {</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;      uint8_t d = fourBitOffsets[i*columns/2 + j/2];</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;      </div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;      int8_t d1 = d &amp; 0xF;</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;      </div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;      <span class="keywordflow">if</span>(d1 != 8)</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;      {</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;        <span class="keywordflow">if</span>(d1 &gt; 8)</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;          d1 = d1 - 16;</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;        outData[i*columns + j] += d1*<a class="code" href="Data2DCodec_8cpp.xhtml#a62c0b0360e91b76e9c91b2276275e5ef">QUANTIZATION</a>;</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;      }</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;      <span class="keywordflow">else</span></div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;      {</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;        int8_t o;</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;        so.<a class="code" href="classVoxel_1_1SerializedObject.xhtml#a2044534dbfab4e75452288a0223dae7b">get</a>((<span class="keywordtype">char</span> *)&amp;o, <span class="keyword">sizeof</span>(o));</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;        </div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;        outData[i*columns + j] += o;</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;        </div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;        offsetCount++;</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;      }</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;      </div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;      int8_t d2 = (d &amp; 0xF0) &gt;&gt; 4;</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;      </div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;      <span class="keywordflow">if</span>(d2 != 8)</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;      {</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;        <span class="keywordflow">if</span>(d2 &gt; 8)</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;          d2 = d2 - 16;</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;        outData[i*columns + j + 1] += d2*<a class="code" href="Data2DCodec_8cpp.xhtml#a62c0b0360e91b76e9c91b2276275e5ef">QUANTIZATION</a>;</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;      }</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;      <span class="keywordflow">else</span></div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;      {</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;        int8_t o;</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;        so.<a class="code" href="classVoxel_1_1SerializedObject.xhtml#a2044534dbfab4e75452288a0223dae7b">get</a>((<span class="keywordtype">char</span> *)&amp;o, <span class="keyword">sizeof</span>(o));</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;        </div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;        outData[i*columns + j + 1] += o*<a class="code" href="Data2DCodec_8cpp.xhtml#a62c0b0360e91b76e9c91b2276275e5ef">QUANTIZATION</a>;</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;        offsetCount++;</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;      }</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;    }</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;  }</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;  </div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;  <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758ad625895b380d0d8fc7ef71ef75429b7a">LOG_DEBUG</a>) &lt;&lt; <span class="stringliteral">&quot;Data2DCodec: current number of bytes = &quot;</span> &lt;&lt; so.<a class="code" href="classVoxel_1_1SerializedObject.xhtml#a5b4f523481053034ad119a0dd8798eb4">currentGetOffset</a>() &lt;&lt; std::endl;</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;  </div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;  <span class="comment">//writeGrayBMPImage(&quot;trialI1.bmp&quot;, out, rows, columns);</span></div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;  </div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;  uint32_t totalOffsetCount;</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;  so.<a class="code" href="classVoxel_1_1SerializedObject.xhtml#a2044534dbfab4e75452288a0223dae7b">get</a>((<span class="keywordtype">char</span> *)&amp;totalOffsetCount, <span class="keyword">sizeof</span>(totalOffsetCount));</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;  </div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;  uint32_t invalidPixelCount;</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;  so.<a class="code" href="classVoxel_1_1SerializedObject.xhtml#a2044534dbfab4e75452288a0223dae7b">get</a>((<span class="keywordtype">char</span> *)&amp;invalidPixelCount, <span class="keyword">sizeof</span>(invalidPixelCount));</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;  </div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;  <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758a927dfc961ff499047d5b1c67981bbd31">LOG_INFO</a>) &lt;&lt; <span class="stringliteral">&quot;Data2DCodec: Original number of 8-bit offsets = &quot;</span> &lt;&lt; totalOffsetCount &lt;&lt; std::endl;</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;  <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758a927dfc961ff499047d5b1c67981bbd31">LOG_INFO</a>) &lt;&lt; <span class="stringliteral">&quot;Data2DCodec: Number of invalid pixels in original data = &quot;</span> &lt;&lt; invalidPixelCount &lt;&lt; std::endl;</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;  <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758a927dfc961ff499047d5b1c67981bbd31">LOG_INFO</a>) &lt;&lt; <span class="stringliteral">&quot;Data2DCodec: Current number of 8-bit offsets = &quot;</span> &lt;&lt; offsetCount &lt;&lt; std::endl;</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;  </div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;}</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;  </div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;}</div>
<div class="ttc" id="classVoxel_1_1BMP_xhtml"><div class="ttname"><a href="classVoxel_1_1BMP.xhtml">Voxel::BMP</a></div><div class="ttdef"><b>Definition:</b> <a href="Data2DCodec_8cpp_source.xhtml#l00020">Data2DCodec.cpp:20</a></div></div>
<div class="ttc" id="structVoxel_1_1Data2DCodec_1_1EightBitOffset_xhtml_ac7a7dd4ca51c694098583ae0e8832628"><div class="ttname"><a href="structVoxel_1_1Data2DCodec_1_1EightBitOffset.xhtml#ac7a7dd4ca51c694098583ae0e8832628">Voxel::Data2DCodec::EightBitOffset::c</a></div><div class="ttdeci">int c</div><div class="ttdef"><b>Definition:</b> <a href="Data2DCodec_8h_source.xhtml#l00034">Data2DCodec.h:34</a></div></div>
<div class="ttc" id="structVoxel_1_1BMP_1_1BITMAPFILEHEADER_xhtml_a39ea3f98a02bccffca4e933180745993"><div class="ttname"><a href="structVoxel_1_1BMP_1_1BITMAPFILEHEADER.xhtml#a39ea3f98a02bccffca4e933180745993">Voxel::BMP::BITMAPFILEHEADER::bfOffset</a></div><div class="ttdeci">uint32_t bfOffset</div><div class="ttdef"><b>Definition:</b> <a href="Data2DCodec_8cpp_source.xhtml#l00032">Data2DCodec.cpp:32</a></div></div>
<div class="ttc" id="structVoxel_1_1BMP_1_1BITMAPINFOHEADER_xhtml_a9f7bf8fd9fadaadd6ab6fd5a10e5900d"><div class="ttname"><a href="structVoxel_1_1BMP_1_1BITMAPINFOHEADER.xhtml#a9f7bf8fd9fadaadd6ab6fd5a10e5900d">Voxel::BMP::BITMAPINFOHEADER::biCompression</a></div><div class="ttdeci">uint32_t biCompression</div><div class="ttdef"><b>Definition:</b> <a href="Data2DCodec_8cpp_source.xhtml#l00046">Data2DCodec.cpp:46</a></div></div>
<div class="ttc" id="group__Util_xhtml_gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0"><div class="ttname"><a href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">Voxel::LOG_ERROR</a></div><div class="ttdef"><b>Definition:</b> <a href="Logger_8h_source.xhtml#l00027">Logger.h:27</a></div></div>
<div class="ttc" id="structVoxel_1_1BMP_1_1BITMAPFILEHEADER_xhtml_a3019b4d1dba7db09cf8d14c98d490691"><div class="ttname"><a href="structVoxel_1_1BMP_1_1BITMAPFILEHEADER.xhtml#a3019b4d1dba7db09cf8d14c98d490691">Voxel::BMP::BITMAPFILEHEADER::bfReserved1</a></div><div class="ttdeci">uint16_t bfReserved1</div><div class="ttdef"><b>Definition:</b> <a href="Data2DCodec_8cpp_source.xhtml#l00031">Data2DCodec.cpp:31</a></div></div>
<div class="ttc" id="structVoxel_1_1BMP_1_1BITMAPINFOHEADER_xhtml"><div class="ttname"><a href="structVoxel_1_1BMP_1_1BITMAPINFOHEADER.xhtml">Voxel::BMP::BITMAPINFOHEADER</a></div><div class="ttdef"><b>Definition:</b> <a href="Data2DCodec_8cpp_source.xhtml#l00039">Data2DCodec.cpp:39</a></div></div>
<div class="ttc" id="structVoxel_1_1BMP_1_1BITMAPFILEHEADER_xhtml_accc68c215c9ce1c1395a2df60da5a046"><div class="ttname"><a href="structVoxel_1_1BMP_1_1BITMAPFILEHEADER.xhtml#accc68c215c9ce1c1395a2df60da5a046">Voxel::BMP::BITMAPFILEHEADER::bfType</a></div><div class="ttdeci">char bfType[2]</div><div class="ttdef"><b>Definition:</b> <a href="Data2DCodec_8cpp_source.xhtml#l00029">Data2DCodec.cpp:29</a></div></div>
<div class="ttc" id="classVoxel_1_1BMP_xhtml_ae09838e18d8ff0d930029c67004ead79"><div class="ttname"><a href="classVoxel_1_1BMP.xhtml#ae09838e18d8ff0d930029c67004ead79">Voxel::BMP::writeGrayScale</a></div><div class="ttdeci">bool writeGrayScale(const String &amp;filename, const Vector&lt; int16_t &gt; &amp;data, const uint16_t rows, const uint16_t columns)</div><div class="ttdef"><b>Definition:</b> <a href="Data2DCodec_8cpp_source.xhtml#l00138">Data2DCodec.cpp:138</a></div></div>
<div class="ttc" id="classVoxel_1_1SerializedObject_xhtml_a602414fea53034e304c0e6fcae5bb71b"><div class="ttname"><a href="classVoxel_1_1SerializedObject.xhtml#a602414fea53034e304c0e6fcae5bb71b">Voxel::SerializedObject::currentPutOffset</a></div><div class="ttdeci">uint currentPutOffset() const </div><div class="ttdef"><b>Definition:</b> <a href="SerializedObject_8h_source.xhtml#l00030">SerializedObject.h:30</a></div></div>
<div class="ttc" id="group__Util_xhtml_ga8a21cf7475356ae552da8952ebf885b4"><div class="ttname"><a href="group__Util.xhtml#ga8a21cf7475356ae552da8952ebf885b4">Voxel::Vector</a></div><div class="ttdeci">std::vector&lt; T &gt; Vector</div><div class="ttdef"><b>Definition:</b> <a href="Common_8h_source.xhtml#l00051">Common.h:51</a></div></div>
<div class="ttc" id="structVoxel_1_1BMP_1_1BITMAPFILEHEADER_xhtml_a2db5eb3957ae1f70d6a134859af281be"><div class="ttname"><a href="structVoxel_1_1BMP_1_1BITMAPFILEHEADER.xhtml#a2db5eb3957ae1f70d6a134859af281be">Voxel::BMP::BITMAPFILEHEADER::BITMAPFILEHEADER</a></div><div class="ttdeci">BITMAPFILEHEADER()</div><div class="ttdef"><b>Definition:</b> <a href="Data2DCodec_8cpp_source.xhtml#l00034">Data2DCodec.cpp:34</a></div></div>
<div class="ttc" id="Data2DCodec_8cpp_xhtml_a62c0b0360e91b76e9c91b2276275e5ef"><div class="ttname"><a href="Data2DCodec_8cpp.xhtml#a62c0b0360e91b76e9c91b2276275e5ef">QUANTIZATION</a></div><div class="ttdeci">#define QUANTIZATION</div><div class="ttdef"><b>Definition:</b> <a href="Data2DCodec_8cpp_source.xhtml#l00015">Data2DCodec.cpp:15</a></div></div>
<div class="ttc" id="classVoxel_1_1SerializedObject_xhtml_a5b4f523481053034ad119a0dd8798eb4"><div class="ttname"><a href="classVoxel_1_1SerializedObject.xhtml#a5b4f523481053034ad119a0dd8798eb4">Voxel::SerializedObject::currentGetOffset</a></div><div class="ttdeci">uint currentGetOffset() const </div><div class="ttdef"><b>Definition:</b> <a href="SerializedObject_8h_source.xhtml#l00029">SerializedObject.h:29</a></div></div>
<div class="ttc" id="classVoxel_1_1SerializedObject_xhtml_aac0058e6b0ea0cb6ac86f4e986f6de25"><div class="ttname"><a href="classVoxel_1_1SerializedObject.xhtml#aac0058e6b0ea0cb6ac86f4e986f6de25">Voxel::SerializedObject::getBytes</a></div><div class="ttdeci">const Vector&lt; char &gt; &amp; getBytes() const </div><div class="ttdef"><b>Definition:</b> <a href="SerializedObject_8h_source.xhtml#l00032">SerializedObject.h:32</a></div></div>
<div class="ttc" id="structVoxel_1_1BMP_1_1BITMAPINFOHEADER_xhtml_ae01c2c1c8f927900b1d735806a3cc06c"><div class="ttname"><a href="structVoxel_1_1BMP_1_1BITMAPINFOHEADER.xhtml#ae01c2c1c8f927900b1d735806a3cc06c">Voxel::BMP::BITMAPINFOHEADER::biBitCount</a></div><div class="ttdeci">uint16_t biBitCount</div><div class="ttdef"><b>Definition:</b> <a href="Data2DCodec_8cpp_source.xhtml#l00045">Data2DCodec.cpp:45</a></div></div>
<div class="ttc" id="classVoxel_1_1SerializedObject_xhtml"><div class="ttname"><a href="classVoxel_1_1SerializedObject.xhtml">Voxel::SerializedObject</a></div><div class="ttdef"><b>Definition:</b> <a href="SerializedObject_8h_source.xhtml#l00019">SerializedObject.h:19</a></div></div>
<div class="ttc" id="classVoxel_1_1Data2DCodec_xhtml_a44af60ef9ca7e9889c4cc09cffde9ee8"><div class="ttname"><a href="classVoxel_1_1Data2DCodec.xhtml#a44af60ef9ca7e9889c4cc09cffde9ee8">Voxel::Data2DCodec::Array2D</a></div><div class="ttdeci">Vector&lt; Array2DElementType &gt; Array2D</div><div class="ttdef"><b>Definition:</b> <a href="Data2DCodec_8h_source.xhtml#l00046">Data2DCodec.h:46</a></div></div>
<div class="ttc" id="structVoxel_1_1BMP_1_1BITMAPFILEHEADER_xhtml_a34246f54d271df61251110192d9a4689"><div class="ttname"><a href="structVoxel_1_1BMP_1_1BITMAPFILEHEADER.xhtml#a34246f54d271df61251110192d9a4689">Voxel::BMP::BITMAPFILEHEADER::bfSize</a></div><div class="ttdeci">uint32_t bfSize</div><div class="ttdef"><b>Definition:</b> <a href="Data2DCodec_8cpp_source.xhtml#l00030">Data2DCodec.cpp:30</a></div></div>
<div class="ttc" id="classVoxel_1_1SerializedObject_xhtml_a28bffcfa230e90768ea678269a782381"><div class="ttname"><a href="classVoxel_1_1SerializedObject.xhtml#a28bffcfa230e90768ea678269a782381">Voxel::SerializedObject::resize</a></div><div class="ttdeci">void resize(size_t size)</div><div class="ttdef"><b>Definition:</b> <a href="SerializedObject_8h_source.xhtml#l00035">SerializedObject.h:35</a></div></div>
<div class="ttc" id="structVoxel_1_1BMP_1_1BITMAPINFOHEADER_xhtml_a64566299073a6a5e22fbc3b36f326766"><div class="ttname"><a href="structVoxel_1_1BMP_1_1BITMAPINFOHEADER.xhtml#a64566299073a6a5e22fbc3b36f326766">Voxel::BMP::BITMAPINFOHEADER::biSize</a></div><div class="ttdeci">uint32_t biSize</div><div class="ttdef"><b>Definition:</b> <a href="Data2DCodec_8cpp_source.xhtml#l00041">Data2DCodec.cpp:41</a></div></div>
<div class="ttc" id="structVoxel_1_1BMP_1_1BITMAPINFOHEADER_xhtml_ae9566ec8fa8853b60976aecf6c7db0d0"><div class="ttname"><a href="structVoxel_1_1BMP_1_1BITMAPINFOHEADER.xhtml#ae9566ec8fa8853b60976aecf6c7db0d0">Voxel::BMP::BITMAPINFOHEADER::biWidth</a></div><div class="ttdeci">uint32_t biWidth</div><div class="ttdef"><b>Definition:</b> <a href="Data2DCodec_8cpp_source.xhtml#l00042">Data2DCodec.cpp:42</a></div></div>
<div class="ttc" id="classVoxel_1_1Data2DCodec_xhtml_a7de3e8541aa3e9e032a50b5d2452929c"><div class="ttname"><a href="classVoxel_1_1Data2DCodec.xhtml#a7de3e8541aa3e9e032a50b5d2452929c">Voxel::Data2DCodec::writeGrayBMPImage</a></div><div class="ttdeci">bool writeGrayBMPImage(const String &amp;fileName, const Array2D &amp;a, const uint16_t rows, const uint16_t columns)</div><div class="ttdef"><b>Definition:</b> <a href="Data2DCodec_8cpp_source.xhtml#l00348">Data2DCodec.cpp:348</a></div></div>
<div class="ttc" id="structVoxel_1_1BMP_1_1BITMAPFILEHEADER_xhtml_ae7d2932254cce7426a9d601af35014de"><div class="ttname"><a href="structVoxel_1_1BMP_1_1BITMAPFILEHEADER.xhtml#ae7d2932254cce7426a9d601af35014de">Voxel::BMP::BITMAPFILEHEADER::bfReserved2</a></div><div class="ttdeci">uint16_t bfReserved2</div><div class="ttdef"><b>Definition:</b> <a href="Data2DCodec_8cpp_source.xhtml#l00031">Data2DCodec.cpp:31</a></div></div>
<div class="ttc" id="structVoxel_1_1Data2DCodec_1_1EightBitOffset_xhtml"><div class="ttname"><a href="structVoxel_1_1Data2DCodec_1_1EightBitOffset.xhtml">Voxel::Data2DCodec::EightBitOffset</a></div><div class="ttdef"><b>Definition:</b> <a href="Data2DCodec_8h_source.xhtml#l00032">Data2DCodec.h:32</a></div></div>
<div class="ttc" id="Logger_8h_xhtml"><div class="ttname"><a href="Logger_8h.xhtml">Logger.h</a></div></div>
<div class="ttc" id="SerializedObject_8h_xhtml"><div class="ttname"><a href="SerializedObject_8h.xhtml">SerializedObject.h</a></div></div>
<div class="ttc" id="structVoxel_1_1BMP_1_1BITMAPINFOHEADER_xhtml_a90ab7aa3e07b34f50915d77e56e563d4"><div class="ttname"><a href="structVoxel_1_1BMP_1_1BITMAPINFOHEADER.xhtml#a90ab7aa3e07b34f50915d77e56e563d4">Voxel::BMP::BITMAPINFOHEADER::biSizeImage</a></div><div class="ttdeci">uint32_t biSizeImage</div><div class="ttdef"><b>Definition:</b> <a href="Data2DCodec_8cpp_source.xhtml#l00047">Data2DCodec.cpp:47</a></div></div>
<div class="ttc" id="structVoxel_1_1BMP_1_1BITMAPINFOHEADER_xhtml_a0e52f7818e5fc0ac464eaac6692cf3c2"><div class="ttname"><a href="structVoxel_1_1BMP_1_1BITMAPINFOHEADER.xhtml#a0e52f7818e5fc0ac464eaac6692cf3c2">Voxel::BMP::BITMAPINFOHEADER::biClrImportant</a></div><div class="ttdeci">uint32_t biClrImportant</div><div class="ttdef"><b>Definition:</b> <a href="Data2DCodec_8cpp_source.xhtml#l00051">Data2DCodec.cpp:51</a></div></div>
<div class="ttc" id="classVoxel_1_1BMP_xhtml_a476b06115b559a8f90fb0c36887152a5"><div class="ttname"><a href="classVoxel_1_1BMP.xhtml#a476b06115b559a8f90fb0c36887152a5">Voxel::BMP::readGrayscale</a></div><div class="ttdeci">bool readGrayscale(const String &amp;filename, Vector&lt; int16_t &gt; &amp;data)</div><div class="ttdef"><b>Definition:</b> <a href="Data2DCodec_8cpp_source.xhtml#l00054">Data2DCodec.cpp:54</a></div></div>
<div class="ttc" id="group__Util_xhtml_gac9285678d341a751b35b85faaaa8248f"><div class="ttname"><a href="group__Util.xhtml#gac9285678d341a751b35b85faaaa8248f">Voxel::OutputFileStream</a></div><div class="ttdeci">std::ofstream OutputFileStream</div><div class="ttdef"><b>Definition:</b> <a href="Common_8h_source.xhtml#l00101">Common.h:101</a></div></div>
<div class="ttc" id="structVoxel_1_1BMP_1_1BITMAPINFOHEADER_xhtml_a7e1d2cd84070ee83e73329c03cbc644f"><div class="ttname"><a href="structVoxel_1_1BMP_1_1BITMAPINFOHEADER.xhtml#a7e1d2cd84070ee83e73329c03cbc644f">Voxel::BMP::BITMAPINFOHEADER::biClrUsed</a></div><div class="ttdeci">uint32_t biClrUsed</div><div class="ttdef"><b>Definition:</b> <a href="Data2DCodec_8cpp_source.xhtml#l00050">Data2DCodec.cpp:50</a></div></div>
<div class="ttc" id="classVoxel_1_1Data2DCodec_xhtml_a371575e583f23b65cc1a50e8ae78d6b8"><div class="ttname"><a href="classVoxel_1_1Data2DCodec.xhtml#a371575e583f23b65cc1a50e8ae78d6b8">Voxel::Data2DCodec::compress</a></div><div class="ttdeci">bool compress(const Array2D &amp;in, const ArrayBool2D &amp;invalidPixels, ByteArray &amp;out)</div><div class="ttdef"><b>Definition:</b> <a href="Data2DCodec_8cpp_source.xhtml#l00196">Data2DCodec.cpp:196</a></div></div>
<div class="ttc" id="Data2DCodec_8cpp_xhtml_aa7aa152dbd176b6ea6045313160f4c85"><div class="ttname"><a href="Data2DCodec_8cpp.xhtml#aa7aa152dbd176b6ea6045313160f4c85">MAX_OFFSET_COUNT</a></div><div class="ttdeci">#define MAX_OFFSET_COUNT</div><div class="ttdef"><b>Definition:</b> <a href="Data2DCodec_8cpp_source.xhtml#l00013">Data2DCodec.cpp:13</a></div></div>
<div class="ttc" id="structVoxel_1_1Data2DCodec_1_1EightBitOffset_xhtml_aef5d4a753e88fc0f44ed2d07024a4ced"><div class="ttname"><a href="structVoxel_1_1Data2DCodec_1_1EightBitOffset.xhtml#aef5d4a753e88fc0f44ed2d07024a4ced">Voxel::Data2DCodec::EightBitOffset::r</a></div><div class="ttdeci">int r</div><div class="ttdef"><b>Definition:</b> <a href="Data2DCodec_8h_source.xhtml#l00034">Data2DCodec.h:34</a></div></div>
<div class="ttc" id="classVoxel_1_1SerializedObject_xhtml_a93bedaae4489eeac130ea6a98be2589c"><div class="ttname"><a href="classVoxel_1_1SerializedObject.xhtml#a93bedaae4489eeac130ea6a98be2589c">Voxel::SerializedObject::put</a></div><div class="ttdeci">size_t put(const char *bytes, size_t size)</div><div class="ttdef"><b>Definition:</b> <a href="SerializedObject_8h_source.xhtml#l00068">SerializedObject.h:68</a></div></div>
<div class="ttc" id="group__Util_xhtml_gabd012fcbae5565e03008afef1fd4f261"><div class="ttname"><a href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">Voxel::logger</a></div><div class="ttdeci">Logger logger(LOG_WARNING)</div><div class="ttdef"><b>Definition:</b> <a href="Logger_8h_source.xhtml#l00180">Logger.h:180</a></div></div>
<div class="ttc" id="structVoxel_1_1BMP_1_1BITMAPINFOHEADER_xhtml_a78e6891c30b75b2323d6f1cf55fc7d7c"><div class="ttname"><a href="structVoxel_1_1BMP_1_1BITMAPINFOHEADER.xhtml#a78e6891c30b75b2323d6f1cf55fc7d7c">Voxel::BMP::BITMAPINFOHEADER::biPlanes</a></div><div class="ttdeci">uint16_t biPlanes</div><div class="ttdef"><b>Definition:</b> <a href="Data2DCodec_8cpp_source.xhtml#l00044">Data2DCodec.cpp:44</a></div></div>
<div class="ttc" id="group__Util_xhtml_gaf37e7f5948ef68c00b6597335b3eedc4"><div class="ttname"><a href="group__Util.xhtml#gaf37e7f5948ef68c00b6597335b3eedc4">Voxel::InputFileStream</a></div><div class="ttdeci">std::ifstream InputFileStream</div><div class="ttdef"><b>Definition:</b> <a href="Common_8h_source.xhtml#l00100">Common.h:100</a></div></div>
<div class="ttc" id="structVoxel_1_1BMP_1_1BITMAPINFOHEADER_xhtml_a7d2096d6a78ed7fa3d2fc2ab8b9fddfe"><div class="ttname"><a href="structVoxel_1_1BMP_1_1BITMAPINFOHEADER.xhtml#a7d2096d6a78ed7fa3d2fc2ab8b9fddfe">Voxel::BMP::BITMAPINFOHEADER::biYPelsPerMeter</a></div><div class="ttdeci">uint32_t biYPelsPerMeter</div><div class="ttdef"><b>Definition:</b> <a href="Data2DCodec_8cpp_source.xhtml#l00049">Data2DCodec.cpp:49</a></div></div>
<div class="ttc" id="classVoxel_1_1Data2DCodec_xhtml_af19bf3b5b14e9010e924a7d2125120c9"><div class="ttname"><a href="classVoxel_1_1Data2DCodec.xhtml#af19bf3b5b14e9010e924a7d2125120c9">Voxel::Data2DCodec::decompress</a></div><div class="ttdeci">bool decompress(const ByteArray &amp;in, Array2D &amp;out)</div><div class="ttdef"><b>Definition:</b> <a href="Data2DCodec_8cpp_source.xhtml#l00357">Data2DCodec.cpp:357</a></div></div>
<div class="ttc" id="group__Util_xhtml_gga3b552e0c33cfe1ca3a0752dbd986b758ad625895b380d0d8fc7ef71ef75429b7a"><div class="ttname"><a href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758ad625895b380d0d8fc7ef71ef75429b7a">Voxel::LOG_DEBUG</a></div><div class="ttdef"><b>Definition:</b> <a href="Logger_8h_source.xhtml#l00030">Logger.h:30</a></div></div>
<div class="ttc" id="classVoxel_1_1Data2DCodec_xhtml_a2ebae68b9bb6653938e5d87850cd37d2"><div class="ttname"><a href="classVoxel_1_1Data2DCodec.xhtml#a2ebae68b9bb6653938e5d87850cd37d2">Voxel::Data2DCodec::ByteArray</a></div><div class="ttdeci">Vector&lt; ByteType &gt; ByteArray</div><div class="ttdef"><b>Definition:</b> <a href="Data2DCodec_8h_source.xhtml#l00043">Data2DCodec.h:43</a></div></div>
<div class="ttc" id="structVoxel_1_1BMP_1_1BITMAPFILEHEADER_xhtml"><div class="ttname"><a href="structVoxel_1_1BMP_1_1BITMAPFILEHEADER.xhtml">Voxel::BMP::BITMAPFILEHEADER</a></div><div class="ttdef"><b>Definition:</b> <a href="Data2DCodec_8cpp_source.xhtml#l00027">Data2DCodec.cpp:27</a></div></div>
<div class="ttc" id="classVoxel_1_1Data2DCodec_xhtml_aebdd2f897283ea3bee494ed3cfec2328"><div class="ttname"><a href="classVoxel_1_1Data2DCodec.xhtml#aebdd2f897283ea3bee494ed3cfec2328">Voxel::Data2DCodec::ArrayBool2D</a></div><div class="ttdeci">Vector&lt; uint8_t &gt; ArrayBool2D</div><div class="ttdef"><b>Definition:</b> <a href="Data2DCodec_8h_source.xhtml#l00044">Data2DCodec.h:44</a></div></div>
<div class="ttc" id="classList_xhtml"><div class="ttname"><a href="classList.xhtml">List</a></div></div>
<div class="ttc" id="structVoxel_1_1BMP_1_1BITMAPINFOHEADER_xhtml_acbd2bdb09b2fb9fad1ddd073036f027d"><div class="ttname"><a href="structVoxel_1_1BMP_1_1BITMAPINFOHEADER.xhtml#acbd2bdb09b2fb9fad1ddd073036f027d">Voxel::BMP::BITMAPINFOHEADER::biXPelsPerMeter</a></div><div class="ttdeci">uint32_t biXPelsPerMeter</div><div class="ttdef"><b>Definition:</b> <a href="Data2DCodec_8cpp_source.xhtml#l00048">Data2DCodec.cpp:48</a></div></div>
<div class="ttc" id="structVoxel_1_1BMP_1_1BITMAPINFOHEADER_xhtml_a763dd5ab422f5c03fc0637d1adc989bc"><div class="ttname"><a href="structVoxel_1_1BMP_1_1BITMAPINFOHEADER.xhtml#a763dd5ab422f5c03fc0637d1adc989bc">Voxel::BMP::BITMAPINFOHEADER::biHeight</a></div><div class="ttdeci">uint32_t biHeight</div><div class="ttdef"><b>Definition:</b> <a href="Data2DCodec_8cpp_source.xhtml#l00043">Data2DCodec.cpp:43</a></div></div>
<div class="ttc" id="Data2DCodec_8h_xhtml"><div class="ttname"><a href="Data2DCodec_8h.xhtml">Data2DCodec.h</a></div></div>
<div class="ttc" id="structVoxel_1_1Data2DCodec_1_1EightBitOffset_xhtml_acf2a11e2bbe551ecf6680906264e4dc8"><div class="ttname"><a href="structVoxel_1_1Data2DCodec_1_1EightBitOffset.xhtml#acf2a11e2bbe551ecf6680906264e4dc8">Voxel::Data2DCodec::EightBitOffset::index</a></div><div class="ttdeci">int index</div><div class="ttdef"><b>Definition:</b> <a href="Data2DCodec_8h_source.xhtml#l00037">Data2DCodec.h:37</a></div></div>
<div class="ttc" id="classString_xhtml"><div class="ttname"><a href="classString.xhtml">String</a></div></div>
<div class="ttc" id="group__Util_xhtml_gga3b552e0c33cfe1ca3a0752dbd986b758a927dfc961ff499047d5b1c67981bbd31"><div class="ttname"><a href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758a927dfc961ff499047d5b1c67981bbd31">Voxel::LOG_INFO</a></div><div class="ttdef"><b>Definition:</b> <a href="Logger_8h_source.xhtml#l00029">Logger.h:29</a></div></div>
<div class="ttc" id="classVoxel_1_1SerializedObject_xhtml_a2044534dbfab4e75452288a0223dae7b"><div class="ttname"><a href="classVoxel_1_1SerializedObject.xhtml#a2044534dbfab4e75452288a0223dae7b">Voxel::SerializedObject::get</a></div><div class="ttdeci">size_t get(char *bytes, size_t size)</div><div class="ttdef"><b>Definition:</b> <a href="SerializedObject_8h_source.xhtml#l00054">SerializedObject.h:54</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Tue Jul 21 2015 20:56:03 for Voxel by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.6
</small></address>
</body>
</html>
