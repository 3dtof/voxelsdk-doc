<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.7"/>
<title>Voxel: Voxel::Data2DCodec Class Reference</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Voxel
   &#160;<span id="projectnumber">0.5.6</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.7 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li class="current"><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="annotated.xhtml"><span>Class&#160;List</span></a></li>
      <li><a href="classes.xhtml"><span>Class&#160;Index</span></a></li>
      <li><a href="inherits.xhtml"><span>Class&#160;Hierarchy</span></a></li>
      <li><a href="functions.xhtml"><span>Class&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="namespaceVoxel.xhtml">Voxel</a></li><li class="navelem"><a class="el" href="classVoxel_1_1Data2DCodec.xhtml">Data2DCodec</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="summary">
<a href="#nested-classes">Classes</a> &#124;
<a href="#pub-types">Public Types</a> &#124;
<a href="#pub-methods">Public Member Functions</a> &#124;
<a href="classVoxel_1_1Data2DCodec-members.xhtml">List of all members</a>  </div>
  <div class="headertitle">
<div class="title">Voxel::Data2DCodec Class Reference<div class="ingroups"><a class="el" href="group__Flt.xhtml">Filter related classes</a></div></div>  </div>
</div><!--header-->
<div class="contents">

<p>This class is used for compressing and decompressing 16-bit signed data.  
 <a href="classVoxel_1_1Data2DCodec.xhtml#details">More...</a></p>

<p><code>#include &lt;<a class="el" href="Data2DCodec_8h_source.xhtml">Data2DCodec.h</a>&gt;</code></p>
<table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="nested-classes"></a>
Classes</h2></td></tr>
<tr class="memitem:"><td class="memItemLeft" align="right" valign="top">struct &#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="structVoxel_1_1Data2DCodec_1_1EightBitOffset.xhtml">EightBitOffset</a></td></tr>
<tr class="separator:"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-types"></a>
Public Types</h2></td></tr>
<tr class="memitem:a2ebae68b9bb6653938e5d87850cd37d2"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="group__Util.xhtml#ga8a21cf7475356ae552da8952ebf885b4">Vector</a>&lt; <a class="el" href="group__Util.xhtml#ga4a84235fd75760811d3cbb1d041fb583">ByteType</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classVoxel_1_1Data2DCodec.xhtml#a2ebae68b9bb6653938e5d87850cd37d2">ByteArray</a></td></tr>
<tr class="separator:a2ebae68b9bb6653938e5d87850cd37d2"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:aebdd2f897283ea3bee494ed3cfec2328"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="group__Util.xhtml#ga8a21cf7475356ae552da8952ebf885b4">Vector</a>&lt; uint8_t &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classVoxel_1_1Data2DCodec.xhtml#aebdd2f897283ea3bee494ed3cfec2328">ArrayBool2D</a></td></tr>
<tr class="separator:aebdd2f897283ea3bee494ed3cfec2328"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a19ead1ede4e11749c91bf115666765f4"><td class="memItemLeft" align="right" valign="top">typedef int16_t&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classVoxel_1_1Data2DCodec.xhtml#a19ead1ede4e11749c91bf115666765f4">Array2DElementType</a></td></tr>
<tr class="separator:a19ead1ede4e11749c91bf115666765f4"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a44af60ef9ca7e9889c4cc09cffde9ee8"><td class="memItemLeft" align="right" valign="top">typedef <a class="el" href="group__Util.xhtml#ga8a21cf7475356ae552da8952ebf885b4">Vector</a><br class="typebreak" />
&lt; <a class="el" href="classVoxel_1_1Data2DCodec.xhtml#a19ead1ede4e11749c91bf115666765f4">Array2DElementType</a> &gt;&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classVoxel_1_1Data2DCodec.xhtml#a44af60ef9ca7e9889c4cc09cffde9ee8">Array2D</a></td></tr>
<tr class="separator:a44af60ef9ca7e9889c4cc09cffde9ee8"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table><table class="memberdecls">
<tr class="heading"><td colspan="2"><h2 class="groupheader"><a name="pub-methods"></a>
Public Member Functions</h2></td></tr>
<tr class="memitem:ad8d2e502f7444fefcbae77b25e224769"><td class="memItemLeft" align="right" valign="top">&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classVoxel_1_1Data2DCodec.xhtml#ad8d2e502f7444fefcbae77b25e224769">Data2DCodec</a> ()</td></tr>
<tr class="separator:ad8d2e502f7444fefcbae77b25e224769"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a371575e583f23b65cc1a50e8ae78d6b8"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classbool.xhtml">bool</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classVoxel_1_1Data2DCodec.xhtml#a371575e583f23b65cc1a50e8ae78d6b8">compress</a> (const <a class="el" href="classVoxel_1_1Data2DCodec.xhtml#a44af60ef9ca7e9889c4cc09cffde9ee8">Array2D</a> &amp;in, const <a class="el" href="classVoxel_1_1Data2DCodec.xhtml#aebdd2f897283ea3bee494ed3cfec2328">ArrayBool2D</a> &amp;invalidPixels, <a class="el" href="classVoxel_1_1Data2DCodec.xhtml#a2ebae68b9bb6653938e5d87850cd37d2">ByteArray</a> &amp;out)</td></tr>
<tr class="separator:a371575e583f23b65cc1a50e8ae78d6b8"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:af19bf3b5b14e9010e924a7d2125120c9"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classbool.xhtml">bool</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classVoxel_1_1Data2DCodec.xhtml#af19bf3b5b14e9010e924a7d2125120c9">decompress</a> (const <a class="el" href="classVoxel_1_1Data2DCodec.xhtml#a2ebae68b9bb6653938e5d87850cd37d2">ByteArray</a> &amp;in, <a class="el" href="classVoxel_1_1Data2DCodec.xhtml#a44af60ef9ca7e9889c4cc09cffde9ee8">Array2D</a> &amp;out)</td></tr>
<tr class="separator:af19bf3b5b14e9010e924a7d2125120c9"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a7de3e8541aa3e9e032a50b5d2452929c"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classbool.xhtml">bool</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classVoxel_1_1Data2DCodec.xhtml#a7de3e8541aa3e9e032a50b5d2452929c">writeGrayBMPImage</a> (const <a class="el" href="group__Util.xhtml#gafd72f3b1c8c89d947c44f85bf983f852">String</a> &amp;fileName, const <a class="el" href="classVoxel_1_1Data2DCodec.xhtml#a44af60ef9ca7e9889c4cc09cffde9ee8">Array2D</a> &amp;a, const uint16_t rows, const uint16_t columns)</td></tr>
<tr class="separator:a7de3e8541aa3e9e032a50b5d2452929c"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a6af62b84efc67d7fbfedaf5aa963eb68"><td class="memItemLeft" align="right" valign="top"><a class="el" href="classbool.xhtml">bool</a>&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classVoxel_1_1Data2DCodec.xhtml#a6af62b84efc67d7fbfedaf5aa963eb68">writeGrayBMPImage</a> (const <a class="el" href="group__Util.xhtml#gafd72f3b1c8c89d947c44f85bf983f852">String</a> &amp;fileName, const <a class="el" href="group__Flt.xhtml#ga4f70c821c1dcdad3b6afe85fcfc97e0e">Complex2D</a> &amp;c)</td></tr>
<tr class="separator:a6af62b84efc67d7fbfedaf5aa963eb68"><td class="memSeparator" colspan="2">&#160;</td></tr>
<tr class="memitem:a3a9c9b42e8d8c3e1386aeabeec9c9a4e"><td class="memItemLeft" align="right" valign="top">virtual&#160;</td><td class="memItemRight" valign="bottom"><a class="el" href="classVoxel_1_1Data2DCodec.xhtml#a3a9c9b42e8d8c3e1386aeabeec9c9a4e">~Data2DCodec</a> ()</td></tr>
<tr class="separator:a3a9c9b42e8d8c3e1386aeabeec9c9a4e"><td class="memSeparator" colspan="2">&#160;</td></tr>
</table>
<a name="details" id="details"></a><h2 class="groupheader">Detailed Description</h2>
<div class="textblock"><p>This class is used for compressing and decompressing 16-bit signed data. </p>
<p>Primary application of this is for 2D phase offset data compression to store in permanent memory of depth camera </p>

<p>Definition at line <a class="el" href="Data2DCodec_8h_source.xhtml#l00030">30</a> of file <a class="el" href="Data2DCodec_8h_source.xhtml">Data2DCodec.h</a>.</p>
</div><h2 class="groupheader">Member Typedef Documentation</h2>
<a class="anchor" id="a44af60ef9ca7e9889c4cc09cffde9ee8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="group__Util.xhtml#ga8a21cf7475356ae552da8952ebf885b4">Vector</a>&lt;<a class="el" href="classVoxel_1_1Data2DCodec.xhtml#a19ead1ede4e11749c91bf115666765f4">Array2DElementType</a>&gt; <a class="el" href="classVoxel_1_1Data2DCodec.xhtml#a44af60ef9ca7e9889c4cc09cffde9ee8">Voxel::Data2DCodec::Array2D</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="Data2DCodec_8h_source.xhtml#l00046">46</a> of file <a class="el" href="Data2DCodec_8h_source.xhtml">Data2DCodec.h</a>.</p>

</div>
</div>
<a class="anchor" id="a19ead1ede4e11749c91bf115666765f4"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef int16_t <a class="el" href="classVoxel_1_1Data2DCodec.xhtml#a19ead1ede4e11749c91bf115666765f4">Voxel::Data2DCodec::Array2DElementType</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="Data2DCodec_8h_source.xhtml#l00045">45</a> of file <a class="el" href="Data2DCodec_8h_source.xhtml">Data2DCodec.h</a>.</p>

</div>
</div>
<a class="anchor" id="aebdd2f897283ea3bee494ed3cfec2328"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="group__Util.xhtml#ga8a21cf7475356ae552da8952ebf885b4">Vector</a>&lt;uint8_t&gt; <a class="el" href="classVoxel_1_1Data2DCodec.xhtml#aebdd2f897283ea3bee494ed3cfec2328">Voxel::Data2DCodec::ArrayBool2D</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="Data2DCodec_8h_source.xhtml#l00044">44</a> of file <a class="el" href="Data2DCodec_8h_source.xhtml">Data2DCodec.h</a>.</p>

</div>
</div>
<a class="anchor" id="a2ebae68b9bb6653938e5d87850cd37d2"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname">typedef <a class="el" href="group__Util.xhtml#ga8a21cf7475356ae552da8952ebf885b4">Vector</a>&lt;<a class="el" href="group__Util.xhtml#ga4a84235fd75760811d3cbb1d041fb583">ByteType</a>&gt; <a class="el" href="classVoxel_1_1Data2DCodec.xhtml#a2ebae68b9bb6653938e5d87850cd37d2">Voxel::Data2DCodec::ByteArray</a></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="Data2DCodec_8h_source.xhtml#l00043">43</a> of file <a class="el" href="Data2DCodec_8h_source.xhtml">Data2DCodec.h</a>.</p>

</div>
</div>
<h2 class="groupheader">Constructor &amp; Destructor Documentation</h2>
<a class="anchor" id="ad8d2e502f7444fefcbae77b25e224769"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">Voxel::Data2DCodec::Data2DCodec </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="Data2DCodec_8h_source.xhtml#l00049">49</a> of file <a class="el" href="Data2DCodec_8h_source.xhtml">Data2DCodec.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;{}</div>
</div><!-- fragment -->
</div>
</div>
<a class="anchor" id="a3a9c9b42e8d8c3e1386aeabeec9c9a4e"></a>
<div class="memitem">
<div class="memproto">
<table class="mlabels">
  <tr>
  <td class="mlabels-left">
      <table class="memname">
        <tr>
          <td class="memname">virtual Voxel::Data2DCodec::~Data2DCodec </td>
          <td>(</td>
          <td class="paramname"></td><td>)</td>
          <td></td>
        </tr>
      </table>
  </td>
  <td class="mlabels-right">
<span class="mlabels"><span class="mlabel">inline</span><span class="mlabel">virtual</span></span>  </td>
  </tr>
</table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="Data2DCodec_8h_source.xhtml#l00057">57</a> of file <a class="el" href="Data2DCodec_8h_source.xhtml">Data2DCodec.h</a>.</p>
<div class="fragment"><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;{}</div>
</div><!-- fragment -->
</div>
</div>
<h2 class="groupheader">Member Function Documentation</h2>
<a class="anchor" id="a371575e583f23b65cc1a50e8ae78d6b8"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classbool.xhtml">bool</a> Voxel::Data2DCodec::compress </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classVoxel_1_1Data2DCodec.xhtml#a44af60ef9ca7e9889c4cc09cffde9ee8">Array2D</a> &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classVoxel_1_1Data2DCodec.xhtml#aebdd2f897283ea3bee494ed3cfec2328">ArrayBool2D</a> &amp;&#160;</td>
          <td class="paramname"><em>invalidPixels</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classVoxel_1_1Data2DCodec.xhtml#a2ebae68b9bb6653938e5d87850cd37d2">ByteArray</a> &amp;&#160;</td>
          <td class="paramname"><em>out</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="Data2DCodec_8cpp_source.xhtml#l00196">196</a> of file <a class="el" href="Data2DCodec_8cpp_source.xhtml">Data2DCodec.cpp</a>.</p>

<p>References <a class="el" href="Data2DCodec_8h_source.xhtml#l00034">Voxel::Data2DCodec::EightBitOffset::c</a>, <a class="el" href="SerializedObject_8h_source.xhtml#l00030">Voxel::SerializedObject::currentPutOffset()</a>, <a class="el" href="SerializedObject_8h_source.xhtml#l00032">Voxel::SerializedObject::getBytes()</a>, <a class="el" href="Data2DCodec_8h_source.xhtml#l00037">Voxel::Data2DCodec::EightBitOffset::index</a>, <a class="el" href="Logger_8h_source.xhtml#l00030">Voxel::LOG_DEBUG</a>, <a class="el" href="Logger_8h_source.xhtml#l00027">Voxel::LOG_ERROR</a>, <a class="el" href="Logger_8h_source.xhtml#l00180">Voxel::logger</a>, <a class="el" href="Data2DCodec_8cpp_source.xhtml#l00013">MAX_OFFSET_COUNT</a>, <a class="el" href="SerializedObject_8h_source.xhtml#l00068">Voxel::SerializedObject::put()</a>, <a class="el" href="Data2DCodec_8cpp_source.xhtml#l00015">QUANTIZATION</a>, <a class="el" href="Data2DCodec_8h_source.xhtml#l00034">Voxel::Data2DCodec::EightBitOffset::r</a>, and <a class="el" href="SerializedObject_8h_source.xhtml#l00035">Voxel::SerializedObject::resize()</a>.</p>

<p>Referenced by <a class="el" href="Configuration_8cpp_source.xhtml#l00512">Voxel::ConfigurationFile::_serializeAllDataFiles()</a>, and <a class="el" href="Data2DCodecTest_8cpp_source.xhtml#l00045">main()</a>.</p>
<div class="fragment"><div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;{</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;  uint16_t rows = *(uint16_t *)&amp;in[0];</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;  uint16_t columns = *(uint16_t *)&amp;in[1];</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;  uint16_t dealiasPhaseMask = *(uint16_t *)&amp;in[2];</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;  </div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;  <span class="keyword">const</span> int16_t *inData = &amp;in[3];</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;  </div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;  <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758ad625895b380d0d8fc7ef71ef75429b7a">LOG_DEBUG</a>) &lt;&lt; <span class="stringliteral">&quot;Data2DCodec: rows = &quot;</span> &lt;&lt; rows &lt;&lt; <span class="stringliteral">&quot;, columns = &quot;</span> &lt;&lt; columns &lt;&lt; std::endl;</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;  </div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;  <span class="keywordtype">bool</span> noInvalidPixels = (invalidPixels.size() == 0);</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    </div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;  </div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;  <span class="keywordflow">if</span>(in.size() != rows*columns + 3 || (!noInvalidPixels &amp;&amp; invalidPixels.size() != rows*columns))</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;  {</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;    <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;Data2DCodec: Invalid input data size. Expected &quot;</span> &lt;&lt; rows*columns*2 + 6</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    &lt;&lt; <span class="stringliteral">&quot; bytes, got &quot;</span> &lt;&lt; in.size()*2 &lt;&lt; <span class="stringliteral">&quot; bytes&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;  }</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;  </div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;  <span class="keywordflow">if</span>(rows % 8 != 0 || columns % 8 != 0)</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;  {</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;Data2DCodec: Invalid input data. This codec is designed for only rows and columns which are multiples of 8.&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;  }</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;  </div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;  SerializedObject so;</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;  so.resize(rows*columns*<span class="keyword">sizeof</span>(in[0])*10); <span class="comment">// Maximum size needed</span></div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;  </div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;  uint16_t version = 0;</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;  so.put((<span class="keyword">const</span> <span class="keywordtype">char</span> *)&amp;version, <span class="keyword">sizeof</span>(version));</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;  </div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;  so.put((<span class="keyword">const</span> <span class="keywordtype">char</span> *)&amp;rows, <span class="keyword">sizeof</span>(rows));</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;  so.put((<span class="keyword">const</span> <span class="keywordtype">char</span> *)&amp;columns, <span class="keyword">sizeof</span>(columns));</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;  so.put((<span class="keyword">const</span> <span class="keywordtype">char</span> *)&amp;dealiasPhaseMask, <span class="keyword">sizeof</span>(dealiasPhaseMask));</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;  </div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;  <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758ad625895b380d0d8fc7ef71ef75429b7a">LOG_DEBUG</a>) &lt;&lt; <span class="stringliteral">&quot;Data2DCodec: current number of bytes = &quot;</span> &lt;&lt; so.currentPutOffset() &lt;&lt; std::endl;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;  </div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;  Vector&lt;int32_t&gt; averages(rows/8*columns/8);</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;  </div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;  <a class="code" href="classList.xhtml">List&lt;EightBitOffset&gt;</a> offsets;</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;  </div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;  Vector&lt;int8_t&gt; fourBitOffsets;</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;  fourBitOffsets.resize(rows*columns);</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;  </div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;  <span class="keywordflow">for</span>(<span class="keyword">auto</span> i = 0; i &lt; averages.size(); i++)</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    averages[i] = 0;</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;  </div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;  <span class="keywordflow">for</span>(<span class="keyword">auto</span> i = 0; i &lt; rows; i++)</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> j = 0; j &lt; columns; j++)</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;      averages[i/8*columns/8 + j/8] += inData[i*columns + j];</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;  </div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;  <span class="keywordflow">for</span>(<span class="keyword">auto</span> i = 0; i &lt; averages.size(); i++)</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;  {</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    averages[i] /= 64;</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    int16_t d = averages[i];</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    so.put((<span class="keyword">const</span> <span class="keywordtype">char</span> *)&amp;d, <span class="keyword">sizeof</span>(d));</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;  }</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;  </div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;  <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758ad625895b380d0d8fc7ef71ef75429b7a">LOG_DEBUG</a>) &lt;&lt; <span class="stringliteral">&quot;Data2DCodec: current number of bytes = &quot;</span> &lt;&lt; so.currentPutOffset() &lt;&lt; std::endl;</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;  </div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;  uint32_t invalidPixelCount = 0;</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;  </div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;  <span class="keywordflow">for</span>(<span class="keyword">auto</span> i = 0; i &lt; rows; i++)</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;  {</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> j = 0; j &lt; columns; j++)</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    {</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;      <span class="keywordtype">int</span> index = i/8*columns/8 + j/8;</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;      </div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;      int16_t v = (inData[i*columns + j] - averages[index])/<a class="code" href="Data2DCodec_8cpp.xhtml#a62c0b0360e91b76e9c91b2276275e5ef">QUANTIZATION</a>;</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;      </div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;      <span class="keywordflow">if</span>(!noInvalidPixels &amp;&amp; invalidPixels[i*columns + j])</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;      {</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        invalidPixelCount++;</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;        v = 0;</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;      }</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;      </div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;      <span class="keywordflow">if</span>(v &gt; 7 || v &lt; -7)</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;      {</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;        <span class="keywordflow">if</span>(v &gt; 127)</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;          v = 127;</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span>(v &lt; -128)</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;          v = -128;</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;        </div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;        offsets.push_back(EightBitOffset(i, j, v, offsets.size()));</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;        </div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;        fourBitOffsets[i*columns + j] = 8;</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;      }</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;      <span class="keywordflow">else</span></div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;        fourBitOffsets[i*columns + j] = v;</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;    }</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;  }</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;  </div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;  <span class="keywordtype">int</span> midRow = rows/2, midColumn = columns/2;</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;  </div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;  uint32_t offsetCount = offsets.size();</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;  </div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;  <span class="keywordflow">if</span>(offsets.size() &gt; <a class="code" href="Data2DCodec_8cpp.xhtml#aa7aa152dbd176b6ea6045313160f4c85">MAX_OFFSET_COUNT</a>)</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;  {</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;    <span class="comment">// Ignore extra offsets near the edges</span></div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    offsets.sort([&amp;](<span class="keyword">const</span> EightBitOffset &amp;a, <span class="keyword">const</span> EightBitOffset &amp;b) -&gt; <span class="keywordtype">bool</span>  { </div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;        <span class="keywordflow">return</span> (a.r - midRow)*(a.r - midRow) + (a.c - midColumn)*(a.c - midColumn) &lt; </div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;            (b.r - midRow)*(b.r - midRow) + (b.c - midColumn)*(b.c - midColumn);</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;      });</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;    </div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;    <span class="keyword">auto</span> o = offsets.begin();</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;    std::advance(o, <a class="code" href="Data2DCodec_8cpp.xhtml#aa7aa152dbd176b6ea6045313160f4c85">MAX_OFFSET_COUNT</a>);</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;    </div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <span class="keywordflow">for</span>(; o != offsets.end(); o++)</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    {</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;      <span class="keywordflow">if</span>(o-&gt;offset &gt; 0)</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;        fourBitOffsets[o-&gt;r*columns + o-&gt;c] = 7;</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;      <span class="keywordflow">else</span></div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;        fourBitOffsets[o-&gt;r*columns + o-&gt;c] = -7;</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    }</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    </div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;    o = offsets.begin();</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;    std::advance(o, <a class="code" href="Data2DCodec_8cpp.xhtml#aa7aa152dbd176b6ea6045313160f4c85">MAX_OFFSET_COUNT</a>);</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    offsets.erase(o, offsets.end());</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    </div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;    <span class="comment">// Reorder in index order</span></div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    offsets.sort([&amp;](<span class="keyword">const</span> EightBitOffset &amp;a, <span class="keyword">const</span> EightBitOffset &amp;b) -&gt; <span class="keywordtype">bool</span>  { </div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;      <span class="keywordflow">return</span> a.index &lt; b.index;</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;    });</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;  }</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;  </div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;  <span class="keywordflow">for</span>(<span class="keyword">auto</span> i = 0; i &lt; fourBitOffsets.size(); i += 2)</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;  {</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;    uint8_t d = (((uint8_t)fourBitOffsets[i]) &amp; 0xF) + ((((uint8_t)fourBitOffsets[i + 1]) &amp; 0xF) &lt;&lt; 4);</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    </div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;    so.put((<span class="keyword">const</span> <span class="keywordtype">char</span> *)&amp;d, 1);</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;  }</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;  </div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;  <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758ad625895b380d0d8fc7ef71ef75429b7a">LOG_DEBUG</a>) &lt;&lt; <span class="stringliteral">&quot;Data2DCodec: current number of bytes = &quot;</span> &lt;&lt; so.currentPutOffset() &lt;&lt; std::endl;</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;  </div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;  <span class="keywordflow">for</span>(<span class="keyword">auto</span> o = offsets.begin(); o != offsets.end(); o++)</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;  {</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    so.put((<span class="keyword">const</span> <span class="keywordtype">char</span> *)&amp;o-&gt;offset, 1);</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;  }</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;  </div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;  so.put((<span class="keyword">const</span> <span class="keywordtype">char</span> *)&amp;offsetCount, <span class="keyword">sizeof</span>(offsetCount));</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;  so.put((<span class="keyword">const</span> <span class="keywordtype">char</span> *)&amp;invalidPixelCount, <span class="keyword">sizeof</span>(invalidPixelCount));</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;  </div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;  <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758ad625895b380d0d8fc7ef71ef75429b7a">LOG_DEBUG</a>) &lt;&lt; <span class="stringliteral">&quot;Data2DCodec: Number of 8-bit offsets = &quot;</span> &lt;&lt; offsetCount &lt;&lt; std::endl;</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;  <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758ad625895b380d0d8fc7ef71ef75429b7a">LOG_DEBUG</a>) &lt;&lt; <span class="stringliteral">&quot;Data2DCodec: Number of invalid pixels = &quot;</span> &lt;&lt; invalidPixelCount &lt;&lt; std::endl;</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;  </div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;  <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758ad625895b380d0d8fc7ef71ef75429b7a">LOG_DEBUG</a>) &lt;&lt; <span class="stringliteral">&quot;Data2DCodec: current number of bytes = &quot;</span> &lt;&lt; so.currentPutOffset() &lt;&lt; std::endl;</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;  </div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;  out.resize(so.currentPutOffset());</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;  </div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;  memcpy(out.data(), so.getBytes().data(), out.size());</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;}</div>
<div class="ttc" id="group__Util_xhtml_gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0"><div class="ttname"><a href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">Voxel::LOG_ERROR</a></div><div class="ttdef"><b>Definition:</b> <a href="Logger_8h_source.xhtml#l00027">Logger.h:27</a></div></div>
<div class="ttc" id="Data2DCodec_8cpp_xhtml_a62c0b0360e91b76e9c91b2276275e5ef"><div class="ttname"><a href="Data2DCodec_8cpp.xhtml#a62c0b0360e91b76e9c91b2276275e5ef">QUANTIZATION</a></div><div class="ttdeci">#define QUANTIZATION</div><div class="ttdef"><b>Definition:</b> <a href="Data2DCodec_8cpp_source.xhtml#l00015">Data2DCodec.cpp:15</a></div></div>
<div class="ttc" id="Data2DCodec_8cpp_xhtml_aa7aa152dbd176b6ea6045313160f4c85"><div class="ttname"><a href="Data2DCodec_8cpp.xhtml#aa7aa152dbd176b6ea6045313160f4c85">MAX_OFFSET_COUNT</a></div><div class="ttdeci">#define MAX_OFFSET_COUNT</div><div class="ttdef"><b>Definition:</b> <a href="Data2DCodec_8cpp_source.xhtml#l00013">Data2DCodec.cpp:13</a></div></div>
<div class="ttc" id="group__Util_xhtml_gabd012fcbae5565e03008afef1fd4f261"><div class="ttname"><a href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">Voxel::logger</a></div><div class="ttdeci">Logger logger(LOG_WARNING)</div><div class="ttdef"><b>Definition:</b> <a href="Logger_8h_source.xhtml#l00180">Logger.h:180</a></div></div>
<div class="ttc" id="group__Util_xhtml_gga3b552e0c33cfe1ca3a0752dbd986b758ad625895b380d0d8fc7ef71ef75429b7a"><div class="ttname"><a href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758ad625895b380d0d8fc7ef71ef75429b7a">Voxel::LOG_DEBUG</a></div><div class="ttdef"><b>Definition:</b> <a href="Logger_8h_source.xhtml#l00030">Logger.h:30</a></div></div>
<div class="ttc" id="classList_xhtml"><div class="ttname"><a href="classList.xhtml">List</a></div></div>
</div><!-- fragment -->
<p><div id="dynsection-0" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-0-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-0-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-0-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classVoxel_1_1Data2DCodec_a371575e583f23b65cc1a50e8ae78d6b8_cgraph.svg" width="598" height="234"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</p>

<p><div id="dynsection-1" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-1-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-1-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-1-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classVoxel_1_1Data2DCodec_a371575e583f23b65cc1a50e8ae78d6b8_icgraph.svg" width="368" height="103"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</p>

</div>
</div>
<a class="anchor" id="af19bf3b5b14e9010e924a7d2125120c9"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classbool.xhtml">bool</a> Voxel::Data2DCodec::decompress </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="classVoxel_1_1Data2DCodec.xhtml#a2ebae68b9bb6653938e5d87850cd37d2">ByteArray</a> &amp;&#160;</td>
          <td class="paramname"><em>in</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype"><a class="el" href="classVoxel_1_1Data2DCodec.xhtml#a44af60ef9ca7e9889c4cc09cffde9ee8">Array2D</a> &amp;&#160;</td>
          <td class="paramname"><em>out</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="Data2DCodec_8cpp_source.xhtml#l00359">359</a> of file <a class="el" href="Data2DCodec_8cpp_source.xhtml">Data2DCodec.cpp</a>.</p>

<p>References <a class="el" href="SerializedObject_8h_source.xhtml#l00029">Voxel::SerializedObject::currentGetOffset()</a>, <a class="el" href="SerializedObject_8h_source.xhtml#l00054">Voxel::SerializedObject::get()</a>, <a class="el" href="Logger_8h_source.xhtml#l00030">Voxel::LOG_DEBUG</a>, <a class="el" href="Logger_8h_source.xhtml#l00027">Voxel::LOG_ERROR</a>, <a class="el" href="Logger_8h_source.xhtml#l00029">Voxel::LOG_INFO</a>, <a class="el" href="Logger_8h_source.xhtml#l00180">Voxel::logger</a>, <a class="el" href="SerializedObject_8h_source.xhtml#l00068">Voxel::SerializedObject::put()</a>, <a class="el" href="Data2DCodec_8cpp_source.xhtml#l00015">QUANTIZATION</a>, and <a class="el" href="SerializedObject_8h_source.xhtml#l00035">Voxel::SerializedObject::resize()</a>.</p>

<p>Referenced by <a class="el" href="Data2DCodecTest_8cpp_source.xhtml#l00045">main()</a>, and <a class="el" href="Configuration_8cpp_source.xhtml#l01177">Voxel::MainConfigurationFile::readFromHardware()</a>.</p>
<div class="fragment"><div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;{</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;  SerializedObject so;</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;  so.resize(in.size()); <span class="comment">// Maximum size needed</span></div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;  so.put((<span class="keyword">const</span> <span class="keywordtype">char</span> *)in.data(), in.size()*<span class="keyword">sizeof</span>(in[0]));</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;  </div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;  uint16_t version;</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;  so.get((<span class="keywordtype">char</span> *)&amp;version, <span class="keyword">sizeof</span>(version));</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;  </div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;  uint16_t rows, columns, dealiasPhaseMask;</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;  </div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;  so.get((<span class="keywordtype">char</span> *)&amp;rows, <span class="keyword">sizeof</span>(rows));</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;  so.get((<span class="keywordtype">char</span> *)&amp;columns, <span class="keyword">sizeof</span>(columns));</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;  so.get((<span class="keywordtype">char</span> *)&amp;dealiasPhaseMask, <span class="keyword">sizeof</span>(dealiasPhaseMask));</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;  </div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;  <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758ad625895b380d0d8fc7ef71ef75429b7a">LOG_DEBUG</a>) &lt;&lt; <span class="stringliteral">&quot;Data2DCodec: current number of bytes = &quot;</span> &lt;&lt; so.currentGetOffset() &lt;&lt; std::endl;</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;  </div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;  <span class="keywordflow">if</span>(rows % 8 != 0 || columns % 8 != 0)</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;  {</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;Data2DCodec: Invalid input data. This codec is designed for only rows and columns which are multiples of 8.&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;  }</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;  </div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;  <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758ad625895b380d0d8fc7ef71ef75429b7a">LOG_DEBUG</a>) &lt;&lt; <span class="stringliteral">&quot;Data2DCodec: rows = &quot;</span> &lt;&lt; rows &lt;&lt; <span class="stringliteral">&quot;, columns = &quot;</span> &lt;&lt; columns &lt;&lt; std::endl;</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;  </div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;  Vector&lt;int16_t&gt; averages(rows/8*columns/8);</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;  </div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;  so.get((<span class="keywordtype">char</span> *)averages.data(), averages.size()*<span class="keyword">sizeof</span>(averages[0]));</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;  </div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;  <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758ad625895b380d0d8fc7ef71ef75429b7a">LOG_DEBUG</a>) &lt;&lt; <span class="stringliteral">&quot;Data2DCodec: current number of bytes = &quot;</span> &lt;&lt; so.currentGetOffset() &lt;&lt; std::endl;</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;  </div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;  out.resize(rows*columns + 3);</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;  </div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;  *(uint16_t *)&amp;out[0] = rows;</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;  *(uint16_t *)&amp;out[1] = columns;</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;  *(uint16_t *)&amp;out[2] = dealiasPhaseMask;</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;  </div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;  int16_t *outData = &amp;out[3];</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;  </div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;  <span class="keywordflow">for</span>(<span class="keyword">auto</span> i = 0; i &lt; rows; i++)</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;  {</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> j = 0; j &lt; columns; j++)</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    {</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;      outData[i*columns + j] = averages[i/8*columns/8 + j/8];</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    }</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;  }</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;  </div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;  <span class="comment">//writeGrayBMPImage(&quot;trialI0.bmp&quot;, out, rows, columns);</span></div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;  </div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;  Vector&lt;uint8_t&gt; fourBitOffsets;</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;  fourBitOffsets.resize(rows*columns/2);</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;  </div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;  so.get((<span class="keywordtype">char</span> *)fourBitOffsets.data(), fourBitOffsets.size());</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;  </div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;  <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758ad625895b380d0d8fc7ef71ef75429b7a">LOG_DEBUG</a>) &lt;&lt; <span class="stringliteral">&quot;Data2DCodec: current number of bytes = &quot;</span> &lt;&lt; so.currentGetOffset() &lt;&lt; std::endl;</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;  </div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;  uint32_t offsetCount = 0;</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;  </div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;  <span class="keywordflow">for</span>(<span class="keyword">auto</span> i = 0; i &lt; rows; i++)</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;  {</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> j = 0; j &lt; columns; j += 2)</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;    {</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;      uint8_t d = fourBitOffsets[i*columns/2 + j/2];</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;      </div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;      int8_t d1 = d &amp; 0xF;</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;      </div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;      <span class="keywordflow">if</span>(d1 != 8)</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;      {</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;        <span class="keywordflow">if</span>(d1 &gt; 8)</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;          d1 = d1 - 16;</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;        outData[i*columns + j] += d1*<a class="code" href="Data2DCodec_8cpp.xhtml#a62c0b0360e91b76e9c91b2276275e5ef">QUANTIZATION</a>;</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;      }</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;      <span class="keywordflow">else</span></div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;      {</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;        int8_t o;</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;        so.get((<span class="keywordtype">char</span> *)&amp;o, <span class="keyword">sizeof</span>(o));</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;        </div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;        outData[i*columns + j] += o;</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;        </div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;        offsetCount++;</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;      }</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;      </div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;      int8_t d2 = (d &amp; 0xF0) &gt;&gt; 4;</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;      </div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;      <span class="keywordflow">if</span>(d2 != 8)</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;      {</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;        <span class="keywordflow">if</span>(d2 &gt; 8)</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;          d2 = d2 - 16;</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;        outData[i*columns + j + 1] += d2*<a class="code" href="Data2DCodec_8cpp.xhtml#a62c0b0360e91b76e9c91b2276275e5ef">QUANTIZATION</a>;</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;      }</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;      <span class="keywordflow">else</span></div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;      {</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;        int8_t o;</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;        so.get((<span class="keywordtype">char</span> *)&amp;o, <span class="keyword">sizeof</span>(o));</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;        </div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;        outData[i*columns + j + 1] += o*<a class="code" href="Data2DCodec_8cpp.xhtml#a62c0b0360e91b76e9c91b2276275e5ef">QUANTIZATION</a>;</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;        offsetCount++;</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;      }</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;    }</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;  }</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;  </div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;  <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758ad625895b380d0d8fc7ef71ef75429b7a">LOG_DEBUG</a>) &lt;&lt; <span class="stringliteral">&quot;Data2DCodec: current number of bytes = &quot;</span> &lt;&lt; so.currentGetOffset() &lt;&lt; std::endl;</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;  </div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;  <span class="comment">//writeGrayBMPImage(&quot;trialI1.bmp&quot;, out, rows, columns);</span></div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;  </div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;  uint32_t totalOffsetCount;</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;  so.get((<span class="keywordtype">char</span> *)&amp;totalOffsetCount, <span class="keyword">sizeof</span>(totalOffsetCount));</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;  </div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;  uint32_t invalidPixelCount;</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;  so.get((<span class="keywordtype">char</span> *)&amp;invalidPixelCount, <span class="keyword">sizeof</span>(invalidPixelCount));</div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;  </div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;  <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758a927dfc961ff499047d5b1c67981bbd31">LOG_INFO</a>) &lt;&lt; <span class="stringliteral">&quot;Data2DCodec: Original number of 8-bit offsets = &quot;</span> &lt;&lt; totalOffsetCount &lt;&lt; std::endl;</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;  <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758a927dfc961ff499047d5b1c67981bbd31">LOG_INFO</a>) &lt;&lt; <span class="stringliteral">&quot;Data2DCodec: Number of invalid pixels in original data = &quot;</span> &lt;&lt; invalidPixelCount &lt;&lt; std::endl;</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;  <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758a927dfc961ff499047d5b1c67981bbd31">LOG_INFO</a>) &lt;&lt; <span class="stringliteral">&quot;Data2DCodec: Current number of 8-bit offsets = &quot;</span> &lt;&lt; offsetCount &lt;&lt; std::endl;</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;  </div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;}</div>
<div class="ttc" id="group__Util_xhtml_gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0"><div class="ttname"><a href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">Voxel::LOG_ERROR</a></div><div class="ttdef"><b>Definition:</b> <a href="Logger_8h_source.xhtml#l00027">Logger.h:27</a></div></div>
<div class="ttc" id="Data2DCodec_8cpp_xhtml_a62c0b0360e91b76e9c91b2276275e5ef"><div class="ttname"><a href="Data2DCodec_8cpp.xhtml#a62c0b0360e91b76e9c91b2276275e5ef">QUANTIZATION</a></div><div class="ttdeci">#define QUANTIZATION</div><div class="ttdef"><b>Definition:</b> <a href="Data2DCodec_8cpp_source.xhtml#l00015">Data2DCodec.cpp:15</a></div></div>
<div class="ttc" id="group__Util_xhtml_gabd012fcbae5565e03008afef1fd4f261"><div class="ttname"><a href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">Voxel::logger</a></div><div class="ttdeci">Logger logger(LOG_WARNING)</div><div class="ttdef"><b>Definition:</b> <a href="Logger_8h_source.xhtml#l00180">Logger.h:180</a></div></div>
<div class="ttc" id="group__Util_xhtml_gga3b552e0c33cfe1ca3a0752dbd986b758ad625895b380d0d8fc7ef71ef75429b7a"><div class="ttname"><a href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758ad625895b380d0d8fc7ef71ef75429b7a">Voxel::LOG_DEBUG</a></div><div class="ttdef"><b>Definition:</b> <a href="Logger_8h_source.xhtml#l00030">Logger.h:30</a></div></div>
<div class="ttc" id="group__Util_xhtml_gga3b552e0c33cfe1ca3a0752dbd986b758a927dfc961ff499047d5b1c67981bbd31"><div class="ttname"><a href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758a927dfc961ff499047d5b1c67981bbd31">Voxel::LOG_INFO</a></div><div class="ttdef"><b>Definition:</b> <a href="Logger_8h_source.xhtml#l00029">Logger.h:29</a></div></div>
</div><!-- fragment -->
<p><div id="dynsection-2" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-2-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-2-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-2-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classVoxel_1_1Data2DCodec_af19bf3b5b14e9010e924a7d2125120c9_cgraph.svg" width="598" height="219"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</p>

<p><div id="dynsection-3" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-3-trigger" src="closed.png" alt="+"/> Here is the caller graph for this function:</div>
<div id="dynsection-3-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-3-content" class="dyncontent" style="display:none;">
<div class="center"><div class="zoom"><iframe scrolling="no" frameborder="0" src="classVoxel_1_1Data2DCodec_af19bf3b5b14e9010e924a7d2125120c9_icgraph.svg" width="100%" height="583"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe></div>
</div>
</div>
</p>

</div>
</div>
<a class="anchor" id="a7de3e8541aa3e9e032a50b5d2452929c"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classbool.xhtml">bool</a> Voxel::Data2DCodec::writeGrayBMPImage </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="group__Util.xhtml#gafd72f3b1c8c89d947c44f85bf983f852">String</a> &amp;&#160;</td>
          <td class="paramname"><em>fileName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="classVoxel_1_1Data2DCodec.xhtml#a44af60ef9ca7e9889c4cc09cffde9ee8">Array2D</a> &amp;&#160;</td>
          <td class="paramname"><em>a</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint16_t&#160;</td>
          <td class="paramname"><em>rows</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const uint16_t&#160;</td>
          <td class="paramname"><em>columns</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

<p>Definition at line <a class="el" href="Data2DCodec_8cpp_source.xhtml#l00350">350</a> of file <a class="el" href="Data2DCodec_8cpp_source.xhtml">Data2DCodec.cpp</a>.</p>

<p>References <a class="el" href="Data2DCodec_8cpp_source.xhtml#l00138">Voxel::BMP::writeGrayScale()</a>.</p>
<div class="fragment"><div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;{</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;  <a class="code" href="classBMP.xhtml">BMP</a> bmp;</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;  </div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;  <span class="keywordflow">return</span> bmp.writeGrayScale(fileName, a, rows, columns);</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;}</div>
<div class="ttc" id="classBMP_xhtml"><div class="ttname"><a href="classBMP.xhtml">BMP</a></div><div class="ttdef"><b>Definition:</b> <a href="DFTTest_8cpp_source.xhtml#l00024">DFTTest.cpp:24</a></div></div>
</div><!-- fragment -->
<p><div id="dynsection-4" onclick="return toggleVisibility(this)" class="dynheader closed" style="cursor:pointer;">
  <img id="dynsection-4-trigger" src="closed.png" alt="+"/> Here is the call graph for this function:</div>
<div id="dynsection-4-summary" class="dynsummary" style="display:block;">
</div>
<div id="dynsection-4-content" class="dyncontent" style="display:none;">
<div class="center"><iframe scrolling="no" frameborder="0" src="classVoxel_1_1Data2DCodec_a7de3e8541aa3e9e032a50b5d2452929c_cgraph.svg" width="400" height="51"><p><b>This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.</b></p></iframe>
</div>
</div>
</p>

</div>
</div>
<a class="anchor" id="a6af62b84efc67d7fbfedaf5aa963eb68"></a>
<div class="memitem">
<div class="memproto">
      <table class="memname">
        <tr>
          <td class="memname"><a class="el" href="classbool.xhtml">bool</a> Voxel::Data2DCodec::writeGrayBMPImage </td>
          <td>(</td>
          <td class="paramtype">const <a class="el" href="group__Util.xhtml#gafd72f3b1c8c89d947c44f85bf983f852">String</a> &amp;&#160;</td>
          <td class="paramname"><em>fileName</em>, </td>
        </tr>
        <tr>
          <td class="paramkey"></td>
          <td></td>
          <td class="paramtype">const <a class="el" href="group__Flt.xhtml#ga4f70c821c1dcdad3b6afe85fcfc97e0e">Complex2D</a> &amp;&#160;</td>
          <td class="paramname"><em>c</em>&#160;</td>
        </tr>
        <tr>
          <td></td>
          <td>)</td>
          <td></td><td></td>
        </tr>
      </table>
</div><div class="memdoc">

</div>
</div>
<hr/>The documentation for this class was generated from the following files:<ul>
<li><a class="el" href="Data2DCodec_8h_source.xhtml">Data2DCodec.h</a></li>
<li><a class="el" href="Data2DCodec_8cpp_source.xhtml">Data2DCodec.cpp</a></li>
</ul>
</div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Sun Sep 27 2015 19:36:59 for Voxel by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.7
</small></address>
</body>
</html>
