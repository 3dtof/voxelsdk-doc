<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.6"/>
<title>Voxel: UVCStreamer.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Voxel
   &#160;<span id="projectnumber">0.5.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.6 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_e7f07c35b19a6de9638fcd101b463d91.xhtml">Voxel</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">UVCStreamer.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="UVCStreamer_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * TI Voxel Lib component.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * Copyright (c) 2014 Texas Instruments Inc.</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;</div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="UVCStreamer_8h.xhtml">UVCStreamer.h</a>&quot;</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="Logger_8h.xhtml">Logger.h</a>&quot;</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;</div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;</div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;errno.h&gt;</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="preprocessor">#include &lt;memory.h&gt;</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="preprocessor">#include &lt;assert.h&gt;</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;</div>
<div class="line"><a name="l00015"></a><span class="lineno"><a class="line" href="UVCStreamer_8cpp.xhtml#a433048abeb218e08e3f423032b6c537c">   15</a></span>&#160;<span class="preprocessor">#define MAX_BUFFER_COUNT 2</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="preprocessor">#ifdef LINUX</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &lt;linux/videodev2.h&gt;</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="UVCPrivateLinux_8h.xhtml">UVCPrivateLinux.h</a>&quot;</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="preprocessor">#elif defined(WINDOWS)</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &quot;<a class="code" href="FrameBuffer_8h.xhtml">FrameBuffer.h</a>&quot;</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="UVCPrivateWindows_8h.xhtml">UVCPrivateWindows.h</a>&quot;</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#include &lt;dshow.h&gt;</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#include &lt;comdef.h&gt;</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;DEFINE_GUID(IID_ISampleGrabber, 0x6b652fff, 0x11fe, 0x4fce, 0x92, 0xad, 0x02, 0x66, 0xb5, 0xd7, 0xc7, 0x8f);</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;DEFINE_GUID(CLSID_NullRenderer, 0xc1f400a4, 0x3f08, 0x11d3, 0x9f, 0x0b, 0x00, 0x60, 0x08, 0x03, 0x9e, 0x37);</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="keyword">static</span> <span class="keyword">const</span> CLSID CLSID_SampleGrabber = { 0xC1F400A0, 0x3F08, 0x11d3, { 0x9F, 0x0B, 0x00, 0x60, 0x08, 0x03, 0x9E, 0x37 } };</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="keyword">interface </span>ISampleGrabberCB : <span class="keyword">public</span> IUnknown</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;{</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;  <span class="keyword">virtual</span> HRESULT STDMETHODCALLTYPE SampleCB(</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keywordtype">double</span> SampleTime,</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    IMediaSample *pSample) = 0;</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;  <span class="keyword">virtual</span> HRESULT STDMETHODCALLTYPE BufferCB(</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;    <span class="keywordtype">double</span> SampleTime,</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;    BYTE *pBuffer,</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;    LONG BufferLen) = 0;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;  <span class="keyword">virtual</span> ~ISampleGrabberCB() {}</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;};</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="keyword">interface </span>ISampleGrabber : <span class="keyword">public</span> IUnknown</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;{</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;  <span class="keyword">virtual</span> HRESULT STDMETHODCALLTYPE SetOneShot(</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;    BOOL OneShot) = 0;</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;  <span class="keyword">virtual</span> HRESULT STDMETHODCALLTYPE SetMediaType(</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;    <span class="keyword">const</span> AM_MEDIA_TYPE *pType) = 0;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;</div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;  <span class="keyword">virtual</span> HRESULT STDMETHODCALLTYPE GetConnectedMediaType(</div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    AM_MEDIA_TYPE *pType) = 0;</div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;</div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;  <span class="keyword">virtual</span> HRESULT STDMETHODCALLTYPE SetBufferSamples(</div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;    BOOL BufferThem) = 0;</div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;  <span class="keyword">virtual</span> HRESULT STDMETHODCALLTYPE GetCurrentBuffer(</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;    LONG *pBufferSize,</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;    LONG *pBuffer) = 0;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;</div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;  <span class="keyword">virtual</span> HRESULT STDMETHODCALLTYPE GetCurrentSample(</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;    IMediaSample **ppSample) = 0;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;  <span class="keyword">virtual</span> HRESULT STDMETHODCALLTYPE SetCallback(</div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;    ISampleGrabberCB *pCallback,</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    LONG WhichMethodToCallback) = 0;</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;  <span class="keyword">virtual</span> ~ISampleGrabber() {}</div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;};</div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="keyword">namespace </span>Voxel</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;{</div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div>
<div class="line"><a name="l00082"></a><span class="lineno"><a class="line" href="classVoxel_1_1UVCStreamer_1_1UVCStreamerPrivate.xhtml">   82</a></span>&#160;<span class="keyword">class </span><a class="code" href="classVoxel_1_1UVCStreamer_1_1UVCStreamerPrivate.xhtml">UVCStreamer::UVCStreamerPrivate</a></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;#ifdef WINDOWS</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;  : <span class="keyword">public</span> ISampleGrabberCB</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="preprocessor"></span>{</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="preprocessor">#ifdef LINUX</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="preprocessor"></span>  <span class="keyword">enum</span> CaptureMode</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;  {</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    CAPTURE_READ_WRITE,</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;    CAPTURE_MMAP,</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;    CAPTURE_USER_POINTER,</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;    CAPTURE_STREAMING <span class="comment">// This is an intermediate which will be used to decide whether CAPTURE_MMAP or CAPTURE_USER_POINTER can be used</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;  } captureMode;</div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;  <a class="code" href="group__Util.xhtml#ga8a21cf7475356ae552da8952ebf885b4">Vector&lt;UVCRawData&gt;</a> rawDataBuffers;</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;  <span class="keywordtype">size_t</span> frameByteSize;</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;  <span class="keywordtype">void</span> updateFrameByteSize(uint32_t width, uint32_t height, uint32_t bytesPerLine, uint32_t <a class="code" href="namespaceCameraSystemTest.xhtml#ac0913e3b4768858f3236123c3040a226">frameSize</a>)</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;  {</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="comment">/* Buggy driver paranoia. */</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keywordtype">size_t</span> min = width * 2;</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;    <span class="keywordflow">if</span> (bytesPerLine &lt; min)</div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;      bytesPerLine = min;</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    min = bytesPerLine * height;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;</div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keywordflow">if</span> (frameSize &lt; min)</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;      frameByteSize = min;</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;      frameByteSize = <a class="code" href="namespaceCameraSystemTest.xhtml#ac0913e3b4768858f3236123c3040a226">frameSize</a>;</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;  }</div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="preprocessor">#elif defined(WINDOWS)</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="preprocessor"></span>  ICaptureGraphBuilder2 *captureGraphBuilder2 = 0;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;  IGraphBuilder *filterGraph = 0;</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;  IMediaFilter *mediaFilter = 0;</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;  IMediaControl *mediaControl = 0;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;  IMediaEventEx *mediaEventEx = 0;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;  IBaseFilter *sampleGrabberFilter = 0;</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;  ISampleGrabber *sampleGrabber = 0;</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;  IBaseFilter *nullRendererFilter = 0;</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;  IAMDroppedFrames *droppedFrames = 0;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;  IAMVideoProcAmp *videoProcAmp = 0;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00129"></a><span class="lineno"><a class="line" href="classVoxel_1_1UVCStreamer_1_1UVCStreamerPrivate.xhtml#a852a32c88bb5189e574e64f4aa340c3a">  129</a></span>&#160;<span class="preprocessor"></span>  <span class="keywordtype">bool</span> <a class="code" href="classVoxel_1_1UVCStreamer_1_1UVCStreamerPrivate.xhtml#a852a32c88bb5189e574e64f4aa340c3a">initialized</a> = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00130"></a><span class="lineno"><a class="line" href="classVoxel_1_1UVCStreamer_1_1UVCStreamerPrivate.xhtml#aae7f14fd52fa13f93db1326748270616">  130</a></span>&#160;  <a class="code" href="classVoxel_1_1Ptr.xhtml">Ptr&lt;UVC&gt;</a> <a class="code" href="classVoxel_1_1UVCStreamer_1_1UVCStreamerPrivate.xhtml#aae7f14fd52fa13f93db1326748270616">uvc</a>;</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div>
<div class="line"><a name="l00132"></a><span class="lineno"><a class="line" href="classVoxel_1_1UVCStreamer_1_1UVCStreamerPrivate.xhtml#a68f53022e6f2bd9e7e8a46dbc7a1b9be">  132</a></span>&#160;  <a class="code" href="classVoxel_1_1UVCStreamer_1_1UVCStreamerPrivate.xhtml#a68f53022e6f2bd9e7e8a46dbc7a1b9be">UVCStreamerPrivate</a>()</div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="preprocessor">#ifdef WINDOWS</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="preprocessor"></span>    : _rawBuffers(2)</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="preprocessor"></span>  {</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;  }</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;</div>
<div class="line"><a name="l00139"></a><span class="lineno"><a class="line" href="classVoxel_1_1UVCStreamer_1_1UVCStreamerPrivate.xhtml#a94976ada2effd204699aec22c5e5e082">  139</a></span>&#160;  <a class="code" href="classVoxel_1_1UVCStreamer_1_1UVCStreamerPrivate.xhtml#a94976ada2effd204699aec22c5e5e082">~UVCStreamerPrivate</a>()</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;  {</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="preprocessor">#if defined(WINDOWS)</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="preprocessor"></span>    <span class="keywordflow">if</span> (captureGraphBuilder2) captureGraphBuilder2-&gt;Release();</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    <span class="keywordflow">if</span> (filterGraph) filterGraph-&gt;Release();</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keywordflow">if</span> (mediaFilter) mediaFilter-&gt;Release();</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    <span class="keywordflow">if</span> (mediaControl) mediaControl-&gt;Release();</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;    <span class="keywordflow">if</span> (mediaEventEx) mediaEventEx-&gt;Release();</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    <span class="keywordflow">if</span> (sampleGrabber) sampleGrabber-&gt;Release();</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;    <span class="keywordflow">if</span> (sampleGrabberFilter) sampleGrabberFilter-&gt;Release();</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    <span class="keywordflow">if</span> (nullRendererFilter) nullRendererFilter-&gt;Release();</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;    <span class="keywordflow">if</span> (droppedFrames) droppedFrames-&gt;Release();</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="keywordflow">if</span> (videoProcAmp) videoProcAmp-&gt;Release();</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="preprocessor"></span>  }</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;<span class="preprocessor">#ifdef WINDOWS</span></div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;<span class="preprocessor"></span><span class="keyword">protected</span>:</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;  <a class="code" href="group__Util.xhtml#ga336d5597ccfb20c79696370b1982dc0e">TimeStampType</a> _sampleStart = 0;</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;  <a class="code" href="classVoxel_1_1Timer.xhtml">Timer</a> _timer;</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;  <a class="code" href="classVoxel_1_1FrameBufferManager.xhtml">FrameBufferManager&lt;RawDataFrame&gt;</a> _rawBuffers;</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;  <a class="code" href="classList.xhtml">List&lt;FrameBuffer&lt;RawDataFrame&gt;</a>&gt; _inUseBuffers;</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div>
<div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;  <a class="code" href="group__Util.xhtml#ga12f64c7826c44420564715a1dbae5709">Mutex</a> _dataAccessMutex;</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;  <a class="code" href="group__Util.xhtml#ga471af898800b97a74afc1daeb9f0e18c">ConditionVariable</a> _dataAvailableCondition;</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="keyword">public</span>:</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;  STDMETHODIMP_(<a class="code" href="group__IO.xhtml#ga9c6ee30a321d6103b2a9842ac25327cf">ULONG</a>) AddRef() { <span class="keywordflow">return</span> 1; }</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;  STDMETHODIMP_(<a class="code" href="group__IO.xhtml#ga9c6ee30a321d6103b2a9842ac25327cf">ULONG</a>) Release() { <span class="keywordflow">return</span> 2; }</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;  STDMETHODIMP QueryInterface(REFIID, <span class="keywordtype">void</span> **ppvObject)</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;  {</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;    *ppvObject = <span class="keyword">static_cast&lt;</span>ISampleGrabberCB*<span class="keyword">&gt;</span>(<span class="keyword">this</span>);</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;    <span class="keywordflow">return</span> S_OK;</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;  }</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;  STDMETHODIMP SampleCB(<span class="keywordtype">double</span>, IMediaSample *pSample)</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;  {</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <span class="keywordflow">return</span> E_NOTIMPL;</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;  }</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;  STDMETHODIMP BufferCB(<span class="keywordtype">double</span> timestamp, BYTE *buffer, <span class="keywordtype">long</span> bufferLength)</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;  {</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keywordflow">if</span> (_sampleStart == 0)</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;    {</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;      _sampleStart = _timer.getCurentRealTime() - (<a class="code" href="group__Util.xhtml#ga336d5597ccfb20c79696370b1982dc0e">TimeStampType</a>)(timestamp*1E6); <span class="comment">// in micro seconds</span></div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    }</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;</div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;    <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758ad625895b380d0d8fc7ef71ef75429b7a">LOG_DEBUG</a>) &lt;&lt; <span class="stringliteral">&quot;UVCStreamer: Got sample buffer at &quot;</span> &lt;&lt; timestamp &lt;&lt; std::endl;</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;    Lock&lt;Mutex&gt; _(_dataAccessMutex);</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;    <span class="keywordflow">if</span> (_inUseBuffers.size() &gt;= <a class="code" href="UVCStreamer_8cpp.xhtml#a433048abeb218e08e3f423032b6c537c">MAX_BUFFER_COUNT</a>)</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;    {</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;      <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758ad0982c0e5a750625d98e16b2877dedd8">LOG_WARNING</a>) &lt;&lt; <span class="stringliteral">&quot;UVCStreamer: Dropping a frame because of slow forward pipeline.&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;      _inUseBuffers.pop_front();</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    }</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;    <span class="keyword">auto</span> f = _rawBuffers.get();</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    <a class="code" href="group__Frm.xhtml#ga5ba7e0c57baf013d4f6aec578c449b68">RawDataFramePtr</a> &amp;raw = *f;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keywordflow">if</span> (!raw || raw-&gt;data.size() != bufferLength)</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;    {</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;      raw = <a class="code" href="group__Frm.xhtml#ga5ba7e0c57baf013d4f6aec578c449b68">RawDataFramePtr</a>(<span class="keyword">new</span> RawDataFrame());</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;      raw-&gt;data.resize(bufferLength);</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;    }</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    memcpy(raw-&gt;data.data(), buffer, bufferLength);</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;    raw-&gt;timestamp = _sampleStart + (<a class="code" href="group__Util.xhtml#ga336d5597ccfb20c79696370b1982dc0e">TimeStampType</a>)(timestamp*1E6);</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;    _inUseBuffers.push_back(f);</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    _dataAvailableCondition.notify_all();</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    <span class="keywordflow">return</span> S_OK;</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;  }</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;  <span class="comment">// timeout in milliseconds</span></div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;  <span class="keywordtype">bool</span> getBuffer(<span class="keywordtype">long</span> timeout, <a class="code" href="group__Frm.xhtml#ga5ba7e0c57baf013d4f6aec578c449b68">RawDataFramePtr</a> &amp;raw)</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;  {</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    Lock&lt;Mutex&gt; _(_dataAccessMutex);</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;    <span class="keywordflow">if</span> (!_dataAvailableCondition.wait_for(_, std::chrono::milliseconds(timeout), [<span class="keyword">this</span>] { <span class="keywordflow">return</span> _inUseBuffers.size() &gt; 0; }))</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;    FrameBuffer&lt;RawDataFrame&gt; f = *_inUseBuffers.begin();</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;    _inUseBuffers.pop_front();</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;    <span class="keywordflow">if</span> (!raw || raw-&gt;data.size() != (*f)-&gt;data.size())</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    {</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;      raw = <a class="code" href="group__Frm.xhtml#ga5ba7e0c57baf013d4f6aec578c449b68">RawDataFramePtr</a>(<span class="keyword">new</span> RawDataFrame());</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;      raw-&gt;data.resize((*f)-&gt;data.size());</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    }</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;    memcpy(raw-&gt;data.data(), (*f)-&gt;data.data(), raw-&gt;data.size());</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;    raw-&gt;timestamp = (*f)-&gt;timestamp;</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    f.reset();</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;  }</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;  <span class="comment">// The following two functions add and remove Directshow graph</span></div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;  <a class="code" href="group__IO.xhtml#ga21dc16e4a3028a99c0be8f3943bfb699">DWORD</a> rotRegister = 0;</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;  HRESULT AddGraphToRot()</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;  {</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    IMoniker *pMoniker;</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;    IRunningObjectTable *pROT;</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;    WCHAR wsz[128];</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;    HRESULT hr;</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;</div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;    <span class="keywordflow">if</span> (!filterGraph || rotRegister)</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;      <span class="keywordflow">return</span> E_POINTER;</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    <span class="keywordflow">if</span> (FAILED(hr = GetRunningObjectTable(0, &amp;pROT)))</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;    {</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;      <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758ad0982c0e5a750625d98e16b2877dedd8">LOG_WARNING</a>) &lt;&lt; <span class="stringliteral">&quot;Could not get ROT. Error: &quot;</span> &lt;&lt; _com_error(hr).ErrorMessage();</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;      <span class="keywordflow">return</span> E_FAIL;</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;    }</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;    hr = StringCchPrintfW(wsz, NUMELMS(wsz), L<span class="stringliteral">&quot;FilterGraph %08x pid %08x\0&quot;</span>, (DWORD_PTR)filterGraph,</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;      GetCurrentProcessId());</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;    hr = CreateItemMoniker(L<span class="stringliteral">&quot;!&quot;</span>, wsz, &amp;pMoniker);</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <span class="keywordflow">if</span> (SUCCEEDED(hr)) </div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    {</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;      <span class="comment">// Use the ROTFLAGS_REGISTRATIONKEEPSALIVE to ensure a strong reference</span></div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;      <span class="comment">// to the object.  Using this flag will cause the object to remain</span></div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;      <span class="comment">// registered until it is explicitly revoked with the Revoke() method.</span></div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;      <span class="comment">//</span></div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;      <span class="comment">// Not using this flag means that if GraphEdit remotely connects</span></div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;      <span class="comment">// to this graph and then GraphEdit exits, this object registration</span></div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;      <span class="comment">// will be deleted, causing future attempts by GraphEdit to fail until</span></div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;      <span class="comment">// this application is restarted or until the graph is registered again.</span></div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;      hr = pROT-&gt;Register(ROTFLAGS_REGISTRATIONKEEPSALIVE, filterGraph,</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;        pMoniker, &amp;rotRegister);</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;    }</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;    <span class="keywordflow">else</span> </div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;      <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758ad0982c0e5a750625d98e16b2877dedd8">LOG_WARNING</a>) &lt;&lt; <span class="stringliteral">&quot;Could not get item moniker. Error: &quot;</span> &lt;&lt; _com_error(hr).ErrorMessage();</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;    pMoniker-&gt;Release();</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;    pROT-&gt;Release();</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;    <span class="keywordflow">return</span> hr;</div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;  }</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;  <span class="comment">// Removes a filter graph from the Running Object Table</span></div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;  <span class="keywordtype">void</span> RemoveGraphFromRot()</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;  {</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <span class="keywordflow">if</span> (!rotRegister)</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;      <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;</div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    IRunningObjectTable *pROT;</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <span class="keywordflow">if</span> (SUCCEEDED(GetRunningObjectTable(0, &amp;pROT))) </div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    {</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;      pROT-&gt;Revoke(rotRegister);</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;      pROT-&gt;Release();</div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;      rotRegister = 0;</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;    }</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;  }</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;  <span class="comment">// Release the format block for a media type.</span></div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;  <span class="keywordtype">void</span> FreeMediaType(AM_MEDIA_TYPE&amp; mt)</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;  {</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;    <span class="keywordflow">if</span> (mt.cbFormat != 0)</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;    {</div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;      CoTaskMemFree((PVOID)mt.pbFormat);</div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;      mt.cbFormat = 0;</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;      mt.pbFormat = NULL;</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    }</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    <span class="keywordflow">if</span> (mt.pUnk != NULL)</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;    {</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;      <span class="comment">// pUnk should not be used.</span></div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;      mt.pUnk-&gt;Release();</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;      mt.pUnk = NULL;</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    }</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;  }</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;  <span class="comment">// Delete a media type structure that was allocated on the heap.</span></div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;  <span class="keywordtype">void</span> DeleteMediaType(AM_MEDIA_TYPE *pmt)</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;  {</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;    <span class="keywordflow">if</span> (pmt != NULL)</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;    {</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;      FreeMediaType(*pmt);</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;      CoTaskMemFree(pmt);</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;    }</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;  }</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;<span class="preprocessor"></span>};</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;</div>
<div class="line"><a name="l00330"></a><span class="lineno"><a class="line" href="classVoxel_1_1UVCStreamer.xhtml#aa1d2a26f98df476ac93ed407273b4405">  330</a></span>&#160;<span class="keywordtype">bool</span> UVCStreamer::isInitialized()</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;{</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;  <span class="keywordflow">return</span> _uvcStreamerPrivate-&gt;uvc &amp;&amp; _uvcStreamerPrivate-&gt;initialized;</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;}</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;  </div>
<div class="line"><a name="l00335"></a><span class="lineno"><a class="line" href="classVoxel_1_1UVCStreamer.xhtml#a6e8d9c7e456ff0f9850666f4871ffcaa">  335</a></span>&#160;UVCStreamer::UVCStreamer(<a class="code" href="classVoxel_1_1Ptr.xhtml">Voxel::DevicePtr</a> device) : <a class="code" href="classVoxel_1_1Streamer.xhtml">Streamer</a>(device)</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;{ </div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;  <span class="keywordflow">if</span> (!<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a3391362f1dd712d193ac53258f08821b">_uvcInit</a>() &amp;&amp; <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>)</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;  {</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;    <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;initialized = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;  }</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;}</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;</div>
<div class="line"><a name="l00344"></a><span class="lineno"><a class="line" href="classVoxel_1_1UVCStreamer.xhtml#a3391362f1dd712d193ac53258f08821b">  344</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a3391362f1dd712d193ac53258f08821b">UVCStreamer::_uvcInit</a>()</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;{</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;  <span class="keywordflow">if</span>(<a class="code" href="classVoxel_1_1Streamer.xhtml#add5e917757e7ebd215ae0450418a4639">_device</a>-&gt;interfaceID() != <a class="code" href="classVoxel_1_1Device.xhtml#a09e82a2c8801d91a67a0c3ae96434e90a8d880d4b536ed3803739132c2e5e0551">Device::USB</a>)</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;  </div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;  <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a> = <a class="code" href="classVoxel_1_1Ptr.xhtml">Ptr&lt;UVCStreamerPrivate&gt;</a>(<span class="keyword">new</span> <a class="code" href="classVoxel_1_1UVCStreamer_1_1UVCStreamerPrivate.xhtml">UVCStreamerPrivate</a>());</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;  <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;uvc = <a class="code" href="classVoxel_1_1Ptr.xhtml">Ptr&lt;UVC&gt;</a>(<span class="keyword">new</span> <a class="code" href="classVoxel_1_1UVC.xhtml">UVC</a>(<a class="code" href="classVoxel_1_1Streamer.xhtml#add5e917757e7ebd215ae0450418a4639">_device</a>));</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;  </div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;<span class="preprocessor">#ifdef WINDOWS</span></div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;<span class="preprocessor"></span>  <span class="keywordflow">if</span> (<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;uvc-&gt;isInitialized())</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;  {</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    HRESULT hr;</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;    <span class="keywordflow">if</span> ((hr = CoCreateInstance(CLSID_FilterGraph, NULL, CLSCTX_INPROC, IID_IGraphBuilder, (<span class="keywordtype">void</span> **)&amp;<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;filterGraph)) != S_OK)</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;    {</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;      <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;Failed to create filter graph. Error: &quot;</span> &lt;&lt; _com_error(hr).ErrorMessage();</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;      <span class="keywordflow">return</span> <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;initialized = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;    }</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;    <span class="keywordflow">if</span> ((hr = <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;filterGraph-&gt;QueryInterface(IID_IMediaControl, (LPVOID *)&amp;<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;mediaControl)) != S_OK)</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;    {</div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;      <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;Failed to get interface for media control. Error: &quot;</span> &lt;&lt; _com_error(hr).ErrorMessage();</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;      <span class="keywordflow">return</span> <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;initialized = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    }</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    <span class="keywordflow">if</span> ((hr = <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;filterGraph-&gt;QueryInterface(IID_IMediaEventEx, (LPVOID *)&amp;<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;mediaEventEx)) != S_OK)</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;    {</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;      <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;Failed to get interface for media filter. Error: &quot;</span> &lt;&lt; _com_error(hr).ErrorMessage();</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;      <span class="keywordflow">return</span> <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;initialized = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;    }</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    <span class="keywordflow">if</span> ((hr = <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;filterGraph-&gt;QueryInterface(IID_IMediaFilter, (LPVOID *)&amp;<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;mediaFilter)) != S_OK)</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    {</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;      <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;Failed to get interface for media filter. Error: &quot;</span> &lt;&lt; _com_error(hr).ErrorMessage();</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;      <span class="keywordflow">return</span> <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;initialized = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;    }</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;    <span class="keywordflow">if</span> ((hr = <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;filterGraph-&gt;AddFilter(<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;uvc-&gt;getUVCPrivate().getCaptureFilter(), L<span class="stringliteral">&quot;UVC Capture&quot;</span>)) != S_OK)</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;    {</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;      <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;Failed to add UVC capture filter. Error: &quot;</span> &lt;&lt; _com_error(hr).ErrorMessage();</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;      <span class="keywordflow">return</span> <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;initialized = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    }</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;    <span class="comment">// Create the Sample Grabber filter.</span></div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;    <span class="keywordflow">if</span> ((hr = CoCreateInstance(CLSID_SampleGrabber, NULL, CLSCTX_INPROC_SERVER, IID_IBaseFilter, (LPVOID *)&amp;<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;sampleGrabberFilter)) != S_OK)</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;    {</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;      <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;Failed to create sample grabber filter. Error: &quot;</span> &lt;&lt; _com_error(hr).ErrorMessage();</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;      <span class="keywordflow">return</span> <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;initialized = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    }</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;    <span class="keywordflow">if</span> ((hr = <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;filterGraph-&gt;AddFilter(<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;sampleGrabberFilter, L<span class="stringliteral">&quot;Sample Grabber&quot;</span>)) != S_OK)</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    {</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;      <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;Failed to add sample grabber filter. Error: &quot;</span> &lt;&lt; _com_error(hr).ErrorMessage();</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;      <span class="keywordflow">return</span> <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;initialized = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    }</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    <span class="keywordflow">if</span> ((hr = <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;sampleGrabberFilter-&gt;QueryInterface(IID_ISampleGrabber, (LPVOID *)&amp;<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;sampleGrabber)) != S_OK)</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;    {</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;      <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;Failed to get sample grabber interface. Error: &quot;</span> &lt;&lt; _com_error(hr).ErrorMessage();</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;      <span class="keywordflow">return</span> <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;initialized = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;    }</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;    AM_MEDIA_TYPE mt;</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    ZeroMemory(&amp;mt, <span class="keyword">sizeof</span>(AM_MEDIA_TYPE));</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;    mt.majortype = MEDIATYPE_Video;</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;    mt.subtype = MEDIASUBTYPE_YUY2;</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;    mt.formattype = FORMAT_VideoInfo;</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    <span class="keywordflow">if</span> ((hr = <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;sampleGrabber-&gt;SetMediaType(&amp;mt)) != S_OK)</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;    {</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;      <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;Failed to set YUY2 as media subtype. Error: &quot;</span> &lt;&lt; _com_error(hr).ErrorMessage();</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;      <span class="keywordflow">return</span> <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;initialized = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;    }</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;    <span class="keywordflow">if</span> ((hr = <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;sampleGrabber-&gt;SetBufferSamples(FALSE)) != S_OK)</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;    {</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;      <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;Failed to configure sample grabber. Error: &quot;</span> &lt;&lt; _com_error(hr).ErrorMessage();</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;      <span class="keywordflow">return</span> <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;initialized = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    }</div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;    <span class="keywordflow">if</span> ((hr = <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;sampleGrabber-&gt;SetOneShot(FALSE)) != S_OK)</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    {</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;      <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;Failed to configure sample grabber. Error: &quot;</span> &lt;&lt; _com_error(hr).ErrorMessage();</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;      <span class="keywordflow">return</span> <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;initialized = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    }</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;    <span class="keywordflow">if</span> ((hr = <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;sampleGrabber-&gt;SetCallback(&amp;*<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>, 1)) != S_OK)</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    {</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;      <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;Failed to configure sample grabber. Error: &quot;</span> &lt;&lt; _com_error(hr).ErrorMessage();</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;      <span class="keywordflow">return</span> <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;initialized = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;    }</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;    <span class="keywordflow">if</span> ((hr = CoCreateInstance(CLSID_NullRenderer, NULL, CLSCTX_INPROC_SERVER, IID_IBaseFilter, (LPVOID *)&amp;<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;nullRendererFilter)) != S_OK)</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    {</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;      <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;Failed to create null renderer filter. Error: &quot;</span> &lt;&lt; _com_error(hr).ErrorMessage();</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;      <span class="keywordflow">return</span> <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;initialized = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;    }</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;    <span class="keywordflow">if</span> ((hr = <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;filterGraph-&gt;AddFilter(<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;nullRendererFilter, L<span class="stringliteral">&quot;Null Renderer&quot;</span>)) != S_OK)</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    {</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;      <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;Failed to add null renderer filter. Error: &quot;</span> &lt;&lt; _com_error(hr).ErrorMessage();</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;      <span class="keywordflow">return</span> <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;initialized = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;    }</div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;    <span class="keywordflow">if</span> ((hr = CoCreateInstance(CLSID_CaptureGraphBuilder2, NULL, CLSCTX_INPROC, IID_ICaptureGraphBuilder2, (<span class="keywordtype">void</span> **)&amp;<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;captureGraphBuilder2)) != S_OK)</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;    {</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;      <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;Failed to create capture graph builder. Error: &quot;</span> &lt;&lt; _com_error(hr).ErrorMessage();</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;      <span class="keywordflow">return</span> <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;initialized = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    }</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;    <span class="keywordflow">if</span> ((hr = <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;captureGraphBuilder2-&gt;SetFiltergraph(<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;filterGraph)) != S_OK)</div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;    {</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;      <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;Failed to set filter graph to capture graph builder. Error: &quot;</span> &lt;&lt; _com_error(hr).ErrorMessage();</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;      <span class="keywordflow">return</span> <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;initialized = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;    }</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;    <span class="keywordflow">if</span> ((hr = <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;captureGraphBuilder2-&gt;RenderStream(&amp;PIN_CATEGORY_CAPTURE, &amp;MEDIATYPE_Video,</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;      <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;uvc-&gt;getUVCPrivate().getCaptureFilter(), <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;sampleGrabberFilter, <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;nullRendererFilter)) != S_OK)</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;    {</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;      <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;Failed to connect filters in the capture graph builder. Error: &quot;</span> &lt;&lt; _com_error(hr).ErrorMessage();</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;      <span class="keywordflow">return</span> <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;initialized = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;    }</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;  }</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;<span class="preprocessor"></span>  </div>
<div class="line"><a name="l00469"></a><span class="lineno">  469</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;uvc-&gt;isInitialized();</div>
<div class="line"><a name="l00470"></a><span class="lineno">  470</span>&#160;</div>
<div class="line"><a name="l00471"></a><span class="lineno">  471</span>&#160;}</div>
<div class="line"><a name="l00472"></a><span class="lineno">  472</span>&#160;</div>
<div class="line"><a name="l00473"></a><span class="lineno"><a class="line" href="classVoxel_1_1UVCStreamer.xhtml#a090323f66d0dd822d05063b16029ea12">  473</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a090323f66d0dd822d05063b16029ea12">UVCStreamer::getCurrentVideoMode</a>(<a class="code" href="classVoxel_1_1VideoMode.xhtml">VideoMode</a> &amp;videoMode)</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;{</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;  <span class="keywordflow">if</span>(!<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#aa1d2a26f98df476ac93ed407273b4405">isInitialized</a>())</div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;  </div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;<span class="preprocessor">#ifdef LINUX</span></div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;<span class="preprocessor"></span>  <span class="keyword">struct </span>v4l2_format fmt;</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;  memset(&amp;fmt, 0, <span class="keyword">sizeof</span>(fmt));</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;  </div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;  fmt.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;  <span class="keywordflow">if</span>(<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;uvc-&gt;getUVCPrivate().xioctl(VIDIOC_G_FMT, &amp;fmt) == -1)</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;  {</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;    <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;UVCStreamer: Could not get current frame format&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;  }</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;  </div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;  videoMode.<a class="code" href="classVoxel_1_1VideoMode.xhtml#a48b5eb13a5c9f7d0a1641a261e056375">frameSize</a>.<a class="code" href="classVoxel_1_1FrameSize.xhtml#ac3d47cd9b7887dc3de31d95c7b39e8a7">width</a> = fmt.fmt.pix.width;</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;  videoMode.<a class="code" href="classVoxel_1_1VideoMode.xhtml#a48b5eb13a5c9f7d0a1641a261e056375">frameSize</a>.<a class="code" href="classVoxel_1_1FrameSize.xhtml#ae6de6f5d7fed5fd0af1985f86e3b9e55">height</a> = fmt.fmt.pix.height;</div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;  </div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;  <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;updateFrameByteSize(fmt.fmt.pix.width, fmt.fmt.pix.height, fmt.fmt.pix.bytesperline, fmt.fmt.pix.sizeimage);</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;  </div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;  <span class="keyword">struct </span>v4l2_streamparm parm;</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;  memset(&amp;parm, 0, <span class="keyword">sizeof</span>(parm));</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;  </div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;  parm.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;  </div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;  <span class="keywordflow">if</span>(<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;uvc-&gt;getUVCPrivate().xioctl(VIDIOC_G_PARM, &amp;parm) == -1)</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;  {</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;    <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;UVCStreamer: Could not get current capture parameters&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;  }</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;  </div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;  videoMode.<a class="code" href="classVoxel_1_1VideoMode.xhtml#afb470b6a3a2e8fc7770ae7373fa8fe61">frameRate</a>.<a class="code" href="classVoxel_1_1FrameRate.xhtml#a0423f6c7e1e11a552cb08147bfd93cd0">numerator</a> = parm.parm.capture.timeperframe.denominator;</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;  videoMode.<a class="code" href="classVoxel_1_1VideoMode.xhtml#afb470b6a3a2e8fc7770ae7373fa8fe61">frameRate</a>.<a class="code" href="classVoxel_1_1FrameRate.xhtml#abce5ac3ab79442b76758484110258e82">denominator</a> = parm.parm.capture.timeperframe.numerator;</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;<span class="preprocessor">#elif defined(WINDOWS)</span></div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00509"></a><span class="lineno">  509</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00510"></a><span class="lineno">  510</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00511"></a><span class="lineno">  511</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;}</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;</div>
<div class="line"><a name="l00514"></a><span class="lineno"><a class="line" href="classVoxel_1_1UVCStreamer.xhtml#aecd50d2937da72beedea5df3868b8d4d">  514</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#aecd50d2937da72beedea5df3868b8d4d">UVCStreamer::_storeCurrentVideoMode</a>(<span class="keyword">const</span> <a class="code" href="classVoxel_1_1VideoMode.xhtml">VideoMode</a> &amp;videoMode)</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;{</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;  <span class="keywordflow">if</span> (!<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#ac1d2b3ea57b26c46c8cba420a9644705">_currentVideoMode</a>)</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#ac1d2b3ea57b26c46c8cba420a9644705">_currentVideoMode</a> = <a class="code" href="classVoxel_1_1Ptr.xhtml">Ptr&lt;VideoMode&gt;</a>(<span class="keyword">new</span> <a class="code" href="classVoxel_1_1VideoMode.xhtml">VideoMode</a>());</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;  *<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#ac1d2b3ea57b26c46c8cba420a9644705">_currentVideoMode</a> = videoMode;</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;}</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;</div>
<div class="line"><a name="l00522"></a><span class="lineno"><a class="line" href="classVoxel_1_1UVCStreamer.xhtml#a7babd2f4cbe6152499b4c49b0137b6b4">  522</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a7babd2f4cbe6152499b4c49b0137b6b4">UVCStreamer::setVideoMode</a>(<span class="keyword">const</span> <a class="code" href="classVoxel_1_1VideoMode.xhtml">VideoMode</a> &amp;videoMode)</div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;{</div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;  <span class="keywordflow">if</span>(!<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#aa1d2a26f98df476ac93ed407273b4405">isInitialized</a>() || <a class="code" href="classVoxel_1_1Streamer.xhtml#ab1cfea9ca2c261a33c38ccc00bc97c77">isRunning</a>())</div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;  </div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;  <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758ad625895b380d0d8fc7ef71ef75429b7a">LOG_DEBUG</a>) &lt;&lt; <span class="stringliteral">&quot;UVCStreamer: Setting video mode = &quot;</span> </div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;    &lt;&lt; videoMode.<a class="code" href="classVoxel_1_1VideoMode.xhtml#a48b5eb13a5c9f7d0a1641a261e056375">frameSize</a>.<a class="code" href="classVoxel_1_1FrameSize.xhtml#ac3d47cd9b7887dc3de31d95c7b39e8a7">width</a> &lt;&lt; <span class="stringliteral">&quot;x&quot;</span> &lt;&lt; videoMode.<a class="code" href="classVoxel_1_1VideoMode.xhtml#a48b5eb13a5c9f7d0a1641a261e056375">frameSize</a>.<a class="code" href="classVoxel_1_1FrameSize.xhtml#ae6de6f5d7fed5fd0af1985f86e3b9e55">height</a> </div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;    &lt;&lt; <span class="stringliteral">&quot;@&quot;</span> &lt;&lt; videoMode.<a class="code" href="classVoxel_1_1VideoMode.xhtml#a99b3955c15011399b66cbf609afdbacb">getFrameRate</a>() &lt;&lt; <span class="stringliteral">&quot;fps&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;  </div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;<span class="preprocessor">#ifdef LINUX</span></div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;<span class="preprocessor"></span>  <span class="keyword">struct </span>v4l2_format fmt;</div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;  memset(&amp;fmt, 0, <span class="keyword">sizeof</span>(fmt));</div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;  </div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;  fmt.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;  <span class="keywordflow">if</span>(<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;uvc-&gt;getUVCPrivate().xioctl(VIDIOC_G_FMT, &amp;fmt) == -1)</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;  {</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;    <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;UVCStreamer: Could not get current frame format&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;  }</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;  </div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;  fmt.fmt.pix.width = videoMode.<a class="code" href="classVoxel_1_1VideoMode.xhtml#a48b5eb13a5c9f7d0a1641a261e056375">frameSize</a>.<a class="code" href="classVoxel_1_1FrameSize.xhtml#ac3d47cd9b7887dc3de31d95c7b39e8a7">width</a>;</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;  fmt.fmt.pix.height = videoMode.<a class="code" href="classVoxel_1_1VideoMode.xhtml#a48b5eb13a5c9f7d0a1641a261e056375">frameSize</a>.<a class="code" href="classVoxel_1_1FrameSize.xhtml#ae6de6f5d7fed5fd0af1985f86e3b9e55">height</a>;</div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;  </div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;  <span class="keywordflow">if</span>(<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;uvc-&gt;getUVCPrivate().xioctl(VIDIOC_S_FMT, &amp;fmt) == -1)</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;  {</div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;    <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;UVCStreamer: Could not set current frame format&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;  }</div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;  </div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;  <span class="keywordflow">if</span>(<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;uvc-&gt;getUVCPrivate().xioctl(VIDIOC_G_FMT, &amp;fmt) == -1)</div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;  {</div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;    <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;UVCStreamer: Could not set current frame format&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;  }</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;  </div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;  <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;updateFrameByteSize(fmt.fmt.pix.width, fmt.fmt.pix.height, fmt.fmt.pix.bytesperline, fmt.fmt.pix.sizeimage);</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;  </div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;  <span class="keyword">struct </span>v4l2_streamparm parm;</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;  memset(&amp;parm, 0, <span class="keyword">sizeof</span>(parm));</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;  </div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;  parm.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;  <span class="keywordflow">if</span>(<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;uvc-&gt;getUVCPrivate().xioctl(VIDIOC_G_PARM, &amp;parm) == -1)</div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;  {</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;    <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;UVCStreamer: Could not get current capture parameters&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;  }</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;  </div>
<div class="line"><a name="l00570"></a><span class="lineno">  570</span>&#160;  parm.parm.capture.timeperframe.denominator = videoMode.<a class="code" href="classVoxel_1_1VideoMode.xhtml#afb470b6a3a2e8fc7770ae7373fa8fe61">frameRate</a>.<a class="code" href="classVoxel_1_1FrameRate.xhtml#a0423f6c7e1e11a552cb08147bfd93cd0">numerator</a>;</div>
<div class="line"><a name="l00571"></a><span class="lineno">  571</span>&#160;  parm.parm.capture.timeperframe.numerator = videoMode.<a class="code" href="classVoxel_1_1VideoMode.xhtml#afb470b6a3a2e8fc7770ae7373fa8fe61">frameRate</a>.<a class="code" href="classVoxel_1_1FrameRate.xhtml#abce5ac3ab79442b76758484110258e82">denominator</a>;</div>
<div class="line"><a name="l00572"></a><span class="lineno">  572</span>&#160;  </div>
<div class="line"><a name="l00573"></a><span class="lineno">  573</span>&#160;  <span class="keywordflow">if</span>(<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;uvc-&gt;getUVCPrivate().xioctl(VIDIOC_S_PARM, &amp;parm) == -1)</div>
<div class="line"><a name="l00574"></a><span class="lineno">  574</span>&#160;  {</div>
<div class="line"><a name="l00575"></a><span class="lineno">  575</span>&#160;    <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;UVCStreamer: Could not set current capture parameters&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00576"></a><span class="lineno">  576</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00577"></a><span class="lineno">  577</span>&#160;  }</div>
<div class="line"><a name="l00578"></a><span class="lineno">  578</span>&#160;<span class="preprocessor">#elif defined(WINDOWS)</span></div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;<span class="preprocessor"></span>  HRESULT hr;</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;  IAMStreamConfig *config;</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;  <span class="keywordflow">if</span>((hr = <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;captureGraphBuilder2-&gt;FindInterface(&amp;PIN_CATEGORY_CAPTURE, &amp;MEDIATYPE_Video, </div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;    <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;uvc-&gt;getUVCPrivate().getCaptureFilter(), IID_IAMStreamConfig, (<span class="keywordtype">void</span>**)&amp;config)) != S_OK)</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;  {</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;    <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;UVCStreamer: Could not get stream configurator. Error: &quot;</span> &lt;&lt; _com_error(hr).ErrorMessage();</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;  }</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;  AM_MEDIA_TYPE *mtConfig = NULL;</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;  <span class="keywordflow">if</span> ((hr = config-&gt;GetFormat(&amp;mtConfig)) != S_OK)</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;  {</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;    <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;UVCStreamer: Could not get current format. Error: &quot;</span> &lt;&lt; _com_error(hr).ErrorMessage();</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;    config-&gt;Release();</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;  }</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;  VIDEOINFOHEADER *videoHeader = (VIDEOINFOHEADER*)mtConfig-&gt;pbFormat;</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;  videoHeader-&gt;AvgTimePerFrame = videoMode.<a class="code" href="classVoxel_1_1VideoMode.xhtml#afb470b6a3a2e8fc7770ae7373fa8fe61">frameRate</a>.<a class="code" href="classVoxel_1_1FrameRate.xhtml#abce5ac3ab79442b76758484110258e82">denominator</a> / videoMode.<a class="code" href="classVoxel_1_1VideoMode.xhtml#afb470b6a3a2e8fc7770ae7373fa8fe61">frameRate</a>.<a class="code" href="classVoxel_1_1FrameRate.xhtml#a0423f6c7e1e11a552cb08147bfd93cd0">numerator</a>;</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;  videoHeader-&gt;bmiHeader.biWidth = videoMode.<a class="code" href="classVoxel_1_1VideoMode.xhtml#a48b5eb13a5c9f7d0a1641a261e056375">frameSize</a>.<a class="code" href="classVoxel_1_1FrameSize.xhtml#ac3d47cd9b7887dc3de31d95c7b39e8a7">width</a>;</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;  videoHeader-&gt;bmiHeader.biHeight = videoMode.<a class="code" href="classVoxel_1_1VideoMode.xhtml#a48b5eb13a5c9f7d0a1641a261e056375">frameSize</a>.<a class="code" href="classVoxel_1_1FrameSize.xhtml#ae6de6f5d7fed5fd0af1985f86e3b9e55">height</a>;</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;  if ((hr = config-&gt;SetFormat(mtConfig)) != S_OK)</div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;  {</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;    <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;UVCStreamer: Could not get current format. Error: &quot;</span> &lt;&lt; _com_error(hr).ErrorMessage();</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;    config-&gt;Release();</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;    <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;DeleteMediaType(mtConfig);</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;  }</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;  config-&gt;Release();</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;  <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;DeleteMediaType(mtConfig);</div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;<span class="preprocessor"></span>  <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#aecd50d2937da72beedea5df3868b8d4d">_storeCurrentVideoMode</a>(videoMode);</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;}</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;</div>
<div class="line"><a name="l00618"></a><span class="lineno"><a class="line" href="classVoxel_1_1UVCStreamer.xhtml#acc806ec3fc0f1e55739a844a0ff0f3c0">  618</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#acc806ec3fc0f1e55739a844a0ff0f3c0">UVCStreamer::_initForCapture</a>()</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;{</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;  <span class="keywordflow">if</span>(!<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a3391362f1dd712d193ac53258f08821b">_uvcInit</a>())</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;  </div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;<span class="preprocessor">#ifdef LINUX</span></div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;<span class="preprocessor"></span>  <span class="keyword">struct </span>v4l2_capability cap;</div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;  </div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;  <span class="keywordflow">if</span>(<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;uvc-&gt;getUVCPrivate().xioctl(VIDIOC_QUERYCAP, &amp;cap) == -1)</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;  {</div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;    <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;UVCStreamer: &quot;</span> &lt;&lt; <a class="code" href="classVoxel_1_1Streamer.xhtml#add5e917757e7ebd215ae0450418a4639">_device</a>-&gt;id() &lt;&lt; <span class="stringliteral">&quot; is not a V4L2 device&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;initialized = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;  }</div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;  </div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;  <span class="keywordflow">if</span>(!(cap.capabilities &amp; V4L2_CAP_VIDEO_CAPTURE))</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;  {</div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;    <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;UVCStreamer: &quot;</span> &lt;&lt; <a class="code" href="classVoxel_1_1Streamer.xhtml#add5e917757e7ebd215ae0450418a4639">_device</a>-&gt;id() &lt;&lt; <span class="stringliteral">&quot; is no video capture device&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;initialized = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;  }</div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;  </div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;  <span class="keywordflow">if</span>(cap.capabilities &amp; V4L2_CAP_READWRITE)</div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;  {</div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;    <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758a927dfc961ff499047d5b1c67981bbd31">LOG_INFO</a>) &lt;&lt; <span class="stringliteral">&quot;UVCStreamer: &quot;</span> &lt;&lt; <a class="code" href="classVoxel_1_1Streamer.xhtml#add5e917757e7ebd215ae0450418a4639">_device</a>-&gt;id() &lt;&lt; <span class="stringliteral">&quot; does not support read()/write() calls&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;    <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;captureMode = UVCStreamerPrivate::CAPTURE_READ_WRITE;</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;  }</div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;  <span class="keywordflow">else</span> <span class="keywordflow">if</span>(cap.capabilities &amp; V4L2_CAP_STREAMING)</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;  {</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;    <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758a927dfc961ff499047d5b1c67981bbd31">LOG_INFO</a>) &lt;&lt; <span class="stringliteral">&quot;UVCStreamer: &quot;</span> &lt;&lt; <a class="code" href="classVoxel_1_1Streamer.xhtml#add5e917757e7ebd215ae0450418a4639">_device</a>-&gt;id() &lt;&lt; <span class="stringliteral">&quot; supports streaming modes&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;    <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;captureMode = UVCStreamerPrivate::CAPTURE_STREAMING;</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;  }</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;<span class="preprocessor"></span>  </div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;  <span class="keywordflow">if</span> (<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#ac1d2b3ea57b26c46c8cba420a9644705">_currentVideoMode</a> &amp;&amp; !<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a7babd2f4cbe6152499b4c49b0137b6b4">setVideoMode</a>(*<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#ac1d2b3ea57b26c46c8cba420a9644705">_currentVideoMode</a>))</div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;  {</div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;    <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;UVCStreamer: Could not set the current video mode&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;initialized = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;  }</div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;</div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;  <a class="code" href="classVoxel_1_1VideoMode.xhtml">VideoMode</a> currentVideoMode;</div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;  </div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;  <span class="keywordflow">if</span>(!<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a090323f66d0dd822d05063b16029ea12">getCurrentVideoMode</a>(currentVideoMode))</div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;  {</div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;    <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;UVCStreamer: Could not get the current video mode&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;initialized = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;  }</div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;  </div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;initialized = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;}</div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;</div>
<div class="line"><a name="l00669"></a><span class="lineno"><a class="line" href="classVoxel_1_1UVCStreamer.xhtml#a3bf08c2dd6922d8e4a44a63840095d97">  669</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a3bf08c2dd6922d8e4a44a63840095d97">UVCStreamer::_start</a>()</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;{</div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;  <span class="keywordflow">if</span>(!<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#acc806ec3fc0f1e55739a844a0ff0f3c0">_initForCapture</a>())</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;  </div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;<span class="preprocessor">#ifdef LINUX</span></div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;<span class="preprocessor"></span>  <span class="keywordflow">if</span>(<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;captureMode == UVCStreamerPrivate::CAPTURE_STREAMING)</div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;  {</div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;    <span class="keyword">struct </span>v4l2_requestbuffers req;</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;    </div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;    memset(&amp;req, 0, <span class="keyword">sizeof</span>(req));</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;    </div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;    req.count = <a class="code" href="UVCStreamer_8cpp.xhtml#a433048abeb218e08e3f423032b6c537c">MAX_BUFFER_COUNT</a>;</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;    req.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;    req.memory = V4L2_MEMORY_MMAP;</div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;    </div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;uvc-&gt;getUVCPrivate().xioctl(VIDIOC_REQBUFS, &amp;req) == -1)</div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;    {</div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;      <span class="keywordflow">if</span>(EINVAL == errno)</div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;      {</div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;        <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;UVCStreamer: &quot;</span> &lt;&lt; <a class="code" href="classVoxel_1_1Streamer.xhtml#add5e917757e7ebd215ae0450418a4639">_device</a>-&gt;id() &lt;&lt; <span class="stringliteral">&quot; does not support mmap&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;        </div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;        memset(&amp;req, 0, <span class="keyword">sizeof</span>(req));</div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;        </div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;        req.count = <a class="code" href="UVCStreamer_8cpp.xhtml#a433048abeb218e08e3f423032b6c537c">MAX_BUFFER_COUNT</a>;</div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;        req.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;</div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;        req.memory = V4L2_MEMORY_USERPTR;</div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;        </div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;        <span class="keywordflow">if</span>(<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;uvc-&gt;getUVCPrivate().xioctl(VIDIOC_REQBUFS, &amp;req) == -1)</div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;        {</div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;          <span class="keywordflow">if</span>(EINVAL == errno)</div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;          {</div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;            <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;UVCStreamer: &quot;</span> &lt;&lt; <a class="code" href="classVoxel_1_1Streamer.xhtml#add5e917757e7ebd215ae0450418a4639">_device</a>-&gt;id() &lt;&lt; <span class="stringliteral">&quot; does not support user pointer&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;initialized = <span class="keyword">false</span>; <span class="comment">// No usable capture mode available</span></div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;          }</div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;        }</div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;        {</div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;          <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758a927dfc961ff499047d5b1c67981bbd31">LOG_INFO</a>) &lt;&lt; <span class="stringliteral">&quot;UVCStreamer: &quot;</span> &lt;&lt; <a class="code" href="classVoxel_1_1Streamer.xhtml#add5e917757e7ebd215ae0450418a4639">_device</a>-&gt;id() &lt;&lt; <span class="stringliteral">&quot; supports user pointer&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;          <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;captureMode = UVCStreamerPrivate::CAPTURE_USER_POINTER;</div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;          </div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;          <span class="keywordflow">if</span>(req.count &lt; 2)</div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;          {</div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;            <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;UVCStreamer: &quot;</span> &lt;&lt; <a class="code" href="classVoxel_1_1Streamer.xhtml#add5e917757e7ebd215ae0450418a4639">_device</a>-&gt;id() &lt;&lt; <span class="stringliteral">&quot; insufficient buffers to capture&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;            <span class="keywordflow">return</span> <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;initialized = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;          }</div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;          </div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;          <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;rawDataBuffers.resize(req.count);</div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;        }</div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;      }</div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;      <span class="keywordflow">else</span></div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;      {</div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;        <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;UVCStreamer: &quot;</span> &lt;&lt; <a class="code" href="classVoxel_1_1Streamer.xhtml#add5e917757e7ebd215ae0450418a4639">_device</a>-&gt;id() &lt;&lt; <span class="stringliteral">&quot; VIDIC_REQBUFS failed&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;initialized = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;      }</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;    }</div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;    {</div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;      <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758a927dfc961ff499047d5b1c67981bbd31">LOG_INFO</a>) &lt;&lt; <span class="stringliteral">&quot;UVCStreamer: &quot;</span> &lt;&lt; <a class="code" href="classVoxel_1_1Streamer.xhtml#add5e917757e7ebd215ae0450418a4639">_device</a>-&gt;id() &lt;&lt; <span class="stringliteral">&quot; supports mmap&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;      <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;captureMode = UVCStreamerPrivate::CAPTURE_MMAP;</div>
<div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;      </div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;      <span class="keywordflow">if</span>(req.count &lt; 2)</div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;      {</div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;        <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;UVCStreamer: &quot;</span> &lt;&lt; <a class="code" href="classVoxel_1_1Streamer.xhtml#add5e917757e7ebd215ae0450418a4639">_device</a>-&gt;id() &lt;&lt; <span class="stringliteral">&quot; insufficient buffers to capture&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;initialized = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;      }</div>
<div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;      </div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;      <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;rawDataBuffers.resize(req.count);</div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;    }</div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;  }</div>
<div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;  </div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;  <span class="keywordflow">if</span>(<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;captureMode == UVCStreamerPrivate::CAPTURE_MMAP)</div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;  {</div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> i = 0; i &lt; <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;rawDataBuffers.size(); i++)</div>
<div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;    {</div>
<div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;      <span class="keyword">struct </span>v4l2_buffer buf;</div>
<div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;      </div>
<div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;      memset(&amp;buf, 0, <span class="keyword">sizeof</span>(buf));</div>
<div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;      </div>
<div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;      buf.type   = V4L2_BUF_TYPE_VIDEO_CAPTURE;</div>
<div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;      buf.memory = V4L2_MEMORY_MMAP;</div>
<div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;      buf.index  = i;</div>
<div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;      </div>
<div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;      <span class="keywordflow">if</span>(<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;uvc-&gt;getUVCPrivate().xioctl(VIDIOC_QUERYBUF, &amp;buf) == -1)</div>
<div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;      {</div>
<div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;        <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;UVCStreamer: Could not prepare raw data buffer &#39;&quot;</span> &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot;&#39;&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;initialized = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;      }</div>
<div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;      </div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;      <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;rawDataBuffers[i].size = buf.length;</div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;      </div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;      <span class="keywordflow">if</span>(!<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;uvc-&gt;getUVCPrivate().mmap(buf.m.offset, <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;rawDataBuffers[i]))</div>
<div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;      {</div>
<div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;        <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;UVCStreamer: Failed to get raw memory mapped buffer &#39;&quot;</span> &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot;&#39;&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;initialized = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;      }</div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;    }</div>
<div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;  }</div>
<div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;  <span class="keywordflow">else</span> <span class="keywordflow">if</span>(<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;captureMode == UVCStreamerPrivate::CAPTURE_USER_POINTER)</div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;  {</div>
<div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> i = 0; i &lt; <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;rawDataBuffers.size(); i++)</div>
<div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;    {</div>
<div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;      <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;rawDataBuffers[i].size = <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;frameByteSize;</div>
<div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;      <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;rawDataBuffers[i].data = <a class="code" href="classVoxel_1_1Ptr.xhtml">Ptr&lt;ByteType&gt;</a>(<span class="keyword">new</span> <a class="code" href="group__Util.xhtml#ga4a84235fd75760811d3cbb1d041fb583">ByteType</a>[<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;frameByteSize], </div>
<div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;                                              [](ByteType *d){ <span class="keyword">delete</span> []d; });</div>
<div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;    }</div>
<div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;  }</div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;  </div>
<div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;  <span class="keywordflow">if</span>(<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;captureMode == UVCStreamerPrivate::CAPTURE_MMAP || <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;captureMode == UVCStreamerPrivate::CAPTURE_USER_POINTER)</div>
<div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;  {</div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;    <span class="keywordflow">for</span>(<span class="keyword">auto</span> i = 0; i &lt; <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;rawDataBuffers.size(); i++)</div>
<div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;    {</div>
<div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;      <span class="keyword">struct </span>v4l2_buffer buf;</div>
<div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;      </div>
<div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;      memset(&amp;buf, 0, <span class="keyword">sizeof</span>(buf));</div>
<div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;      </div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;      buf.type   = V4L2_BUF_TYPE_VIDEO_CAPTURE;</div>
<div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;      buf.memory = (<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;captureMode == UVCStreamerPrivate::CAPTURE_MMAP)?V4L2_MEMORY_MMAP:V4L2_MEMORY_USERPTR;</div>
<div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;      buf.index  = i;</div>
<div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;      </div>
<div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;      <span class="keywordflow">if</span>(<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;captureMode == UVCStreamerPrivate::CAPTURE_USER_POINTER)</div>
<div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;      {</div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;        buf.m.userptr = (<span class="keywordtype">unsigned</span> long)&amp;*<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;rawDataBuffers[i].data;</div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;        buf.length = <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;rawDataBuffers[i].size;</div>
<div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;      }</div>
<div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;      </div>
<div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;      <span class="keywordflow">if</span>(<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;uvc-&gt;getUVCPrivate().xioctl(VIDIOC_QBUF, &amp;buf) == -1)</div>
<div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;      {</div>
<div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;        <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;UVCStreamer: Could not queue raw data buffer &#39;&quot;</span> &lt;&lt; i &lt;&lt; <span class="stringliteral">&quot;&#39;&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;initialized = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;      }</div>
<div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;    }</div>
<div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;    </div>
<div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;    <span class="keyword">enum</span> v4l2_buf_type type = V4L2_BUF_TYPE_VIDEO_CAPTURE;</div>
<div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;    </div>
<div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;uvc-&gt;getUVCPrivate().xioctl(VIDIOC_STREAMON, &amp;type) == -1)</div>
<div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;    {</div>
<div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;      <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;UVCStreamer: Failed to start capture stream&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;      <span class="keywordflow">return</span> <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;initialized = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;    }</div>
<div class="line"><a name="l00811"></a><span class="lineno">  811</span>&#160;  }</div>
<div class="line"><a name="l00812"></a><span class="lineno">  812</span>&#160;<span class="preprocessor">#elif defined(WINDOWS)</span></div>
<div class="line"><a name="l00813"></a><span class="lineno">  813</span>&#160;<span class="preprocessor"></span>  HRESULT hr;</div>
<div class="line"><a name="l00814"></a><span class="lineno">  814</span>&#160;  <span class="keywordflow">if</span> ((hr = <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;mediaControl-&gt;Run()) &lt; 0)</div>
<div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;  {</div>
<div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;    <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;Failed to start the capture filter. Error: &quot;</span> &lt;&lt; _com_error(hr).ErrorMessage();</div>
<div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;  }</div>
<div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;</div>
<div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;  OAFilterState state;</div>
<div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;  <span class="keywordflow">if</span> ((hr == <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;mediaControl-&gt;GetState(INFINITE, &amp;state)) != S_OK)</div>
<div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;  {</div>
<div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;    <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;Failed to start the capture filter. Error: &quot;</span> &lt;&lt; _com_error(hr).ErrorMessage();</div>
<div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;  }</div>
<div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;</div>
<div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;  <span class="keywordflow">if</span> (state != State_Running)</div>
<div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;  {</div>
<div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;    <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;Filter is not running. Current state: &quot;</span> &lt;&lt; state &lt;&lt; std::endl;</div>
<div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;  }</div>
<div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;</div>
<div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;  <span class="keywordflow">if</span> ((hr = <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;AddGraphToRot()) != S_OK) <span class="comment">// Allow for graph debugging via graphedit</span></div>
<div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;  {</div>
<div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;    <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758ad0982c0e5a750625d98e16b2877dedd8">LOG_WARNING</a>) &lt;&lt; <span class="stringliteral">&quot;Could not add filter graph to ROT&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;  }</div>
<div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;}</div>
<div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;</div>
<div class="line"><a name="l00842"></a><span class="lineno"><a class="line" href="classVoxel_1_1UVCStreamer.xhtml#aa1e3461a21667822e145032dc4b4e399">  842</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#aa1e3461a21667822e145032dc4b4e399">UVCStreamer::_stop</a>()</div>
<div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;{</div>
<div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;  <span class="keywordflow">if</span>(!<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#aa1d2a26f98df476ac93ed407273b4405">isInitialized</a>())</div>
<div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;</div>
<div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;<span class="preprocessor">#ifdef LINUX  </span></div>
<div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;<span class="preprocessor"></span>  <span class="keyword">enum</span> v4l2_buf_type type = V4L2_BUF_TYPE_VIDEO_CAPTURE;</div>
<div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;  </div>
<div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;  <span class="keywordflow">if</span>(<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;uvc-&gt;getUVCPrivate().xioctl(VIDIOC_STREAMOFF, &amp;type) == -1)</div>
<div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;  {</div>
<div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;    <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;UVCStreamer: Failed to stop capture stream&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;initialized = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;  }</div>
<div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;  </div>
<div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;  <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;uvc-&gt;getUVCPrivate().clearMMap();</div>
<div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;  </div>
<div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;  <span class="keyword">struct </span>v4l2_requestbuffers req;</div>
<div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;  </div>
<div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;  memset(&amp;req, 0, <span class="keyword">sizeof</span>(req));</div>
<div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;  </div>
<div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;  req.count = 0;</div>
<div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;  req.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;</div>
<div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;  req.memory = (<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;captureMode == UVCStreamerPrivate::CAPTURE_MMAP)?V4L2_MEMORY_MMAP:V4L2_MEMORY_USERPTR;</div>
<div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;  </div>
<div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;  <span class="keywordflow">if</span>(<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;uvc-&gt;getUVCPrivate().xioctl(VIDIOC_REQBUFS, &amp;req) == -1)</div>
<div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;  {</div>
<div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;    <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;UVCStreamer: Failed to remove buffers&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;    <span class="keywordflow">return</span> <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;initialized = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;  }</div>
<div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;  </div>
<div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;  <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;rawDataBuffers.clear();</div>
<div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;<span class="preprocessor">#elif defined(WINDOWS)</span></div>
<div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;<span class="preprocessor"></span>  <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;mediaControl-&gt;Stop();</div>
<div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;  <span class="keywordtype">long</span> evCode;</div>
<div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;  <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;mediaEventEx-&gt;WaitForCompletion(500, &amp;evCode);</div>
<div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;  <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;RemoveGraphFromRot(); <span class="comment">// Remove graph for debugging via graphedit</span></div>
<div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;<span class="preprocessor"></span>  </div>
<div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;}</div>
<div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;</div>
<div class="line"><a name="l00887"></a><span class="lineno"><a class="line" href="classVoxel_1_1UVCStreamer.xhtml#a5a3e48eab120d389b3970c64877f7f98">  887</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a5a3e48eab120d389b3970c64877f7f98">UVCStreamer::_capture</a>(<a class="code" href="classVoxel_1_1Ptr.xhtml">RawDataFramePtr</a> &amp;p)</div>
<div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;{</div>
<div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;  <a class="code" href="group__Util.xhtml#ga336d5597ccfb20c79696370b1982dc0e">TimeStampType</a> waitTime = 2000;<span class="comment">//ms</span></div>
<div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;  </div>
<div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;<span class="preprocessor">#ifdef LINUX</span></div>
<div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;<span class="preprocessor"></span>  <span class="keywordtype">bool</span> timedOut;</div>
<div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;  <span class="keywordflow">if</span>(!<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#aa1d2a26f98df476ac93ed407273b4405">isInitialized</a>() || !<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;uvc-&gt;getUVCPrivate().isReadReady(waitTime, timedOut))</div>
<div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;  {</div>
<div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;    <span class="keywordflow">if</span>(timedOut)</div>
<div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;      <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;No data available. Waited for &quot;</span> &lt;&lt; waitTime &lt;&lt; <span class="stringliteral">&quot; ms&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;    </div>
<div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;  }</div>
<div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;  </div>
<div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;  <span class="keywordflow">if</span>(<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;captureMode == UVCStreamerPrivate::CAPTURE_READ_WRITE)</div>
<div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;  {</div>
<div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;    <span class="keywordflow">if</span>(!p || p-&gt;data.size() != <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;frameByteSize)</div>
<div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;    {</div>
<div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;      p = <a class="code" href="group__Frm.xhtml#ga5ba7e0c57baf013d4f6aec578c449b68">RawDataFramePtr</a>(<span class="keyword">new</span> <a class="code" href="classVoxel_1_1RawDataFrame.xhtml">RawDataFrame</a>());</div>
<div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;      p-&gt;data.resize(<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;frameByteSize);</div>
<div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;      <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758ad625895b380d0d8fc7ef71ef75429b7a">LOG_DEBUG</a>) &lt;&lt; <span class="stringliteral">&quot;UVCStreamer: Frame provided is not of appropriate size. Recreating a new frame.&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;    }</div>
<div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;    </div>
<div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;    <span class="keywordtype">bool</span> ret = <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;uvc-&gt;read(p-&gt;data.data(), <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;frameByteSize);</div>
<div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;    </div>
<div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;    <span class="keywordflow">if</span>(ret)</div>
<div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;    {</div>
<div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;      p-&gt;id = <a class="code" href="classVoxel_1_1Streamer.xhtml#a492777901439cbece3cb15053b0c89bc">_currentID</a>++;</div>
<div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;      p-&gt;timestamp = <a class="code" href="classVoxel_1_1Streamer.xhtml#abb256799c485ffcf0f3c70565807ef07">_time</a>.<a class="code" href="classVoxel_1_1Timer.xhtml#a363a248fe7dd94ae58681cf145b23a23">getCurentRealTime</a>();</div>
<div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;    }</div>
<div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;  }</div>
<div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;  <span class="keywordflow">else</span> <span class="keywordflow">if</span>(<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;captureMode == UVCStreamerPrivate::CAPTURE_MMAP || <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;captureMode == UVCStreamerPrivate::CAPTURE_USER_POINTER)</div>
<div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;  {</div>
<div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;    <span class="keyword">struct </span>v4l2_buffer buf;</div>
<div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;    memset(&amp;buf, 0, <span class="keyword">sizeof</span>(buf));</div>
<div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;    </div>
<div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;    buf.type = V4L2_BUF_TYPE_VIDEO_CAPTURE;</div>
<div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;    buf.memory = (<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;captureMode == UVCStreamerPrivate::CAPTURE_MMAP)?V4L2_MEMORY_MMAP:V4L2_MEMORY_USERPTR;</div>
<div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;    </div>
<div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;uvc-&gt;getUVCPrivate().xioctl(VIDIOC_DQBUF, &amp;buf) == -1)</div>
<div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;    {</div>
<div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;      <span class="keywordflow">switch</span>(errno)</div>
<div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;      {</div>
<div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;        <span class="keywordflow">case</span> EIO:</div>
<div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;          <span class="comment">/* Could ignore EIO, see spec. */</span></div>
<div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;          <span class="comment">/* fall through */</span></div>
<div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;          </div>
<div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;        <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;          <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;UVCStreamer: Failed to dequeue a raw frame buffer&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;          <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00939"></a><span class="lineno">  939</span>&#160;      }</div>
<div class="line"><a name="l00940"></a><span class="lineno">  940</span>&#160;    }</div>
<div class="line"><a name="l00941"></a><span class="lineno">  941</span>&#160;    </div>
<div class="line"><a name="l00942"></a><span class="lineno">  942</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;captureMode == UVCStreamerPrivate::CAPTURE_USER_POINTER)</div>
<div class="line"><a name="l00943"></a><span class="lineno">  943</span>&#160;    {</div>
<div class="line"><a name="l00944"></a><span class="lineno">  944</span>&#160;      buf.index = <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;rawDataBuffers.size();</div>
<div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;      <span class="keywordflow">for</span>(<span class="keyword">auto</span> i = 0; i &lt; <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;rawDataBuffers.size(); i++)</div>
<div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;        <span class="keywordflow">if</span>(&amp;*<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;rawDataBuffers[i].data == (<a class="code" href="group__Util.xhtml#ga4a84235fd75760811d3cbb1d041fb583">ByteType</a> *)buf.m.userptr &amp;&amp; <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;rawDataBuffers[i].size == buf.bytesused)</div>
<div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;        {</div>
<div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;          buf.index = i;</div>
<div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;          <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;        }</div>
<div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;    }</div>
<div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;    </div>
<div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;    assert(buf.index &lt; <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;rawDataBuffers.size());</div>
<div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;    </div>
<div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;    <span class="keywordflow">if</span>(buf.bytesused &lt; <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;frameByteSize)</div>
<div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;    {</div>
<div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;      <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;Incomplete frame data. Skipping it. Expected bytes = &quot;</span> </div>
<div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;      &lt;&lt; <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;frameByteSize &lt;&lt; <span class="stringliteral">&quot;, got bytes = &quot;</span> &lt;&lt; buf.bytesused &lt;&lt; std::endl;</div>
<div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;      </div>
<div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;      <span class="keywordflow">if</span>(<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;uvc-&gt;getUVCPrivate().xioctl(VIDIOC_QBUF, &amp;buf) == -1)</div>
<div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;      {</div>
<div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;        <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;UVCStreamer: Failed to enqueue back the raw frame buffer&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;      }</div>
<div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;      </div>
<div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;    }</div>
<div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;    </div>
<div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;    <span class="keywordflow">if</span>(!p || p-&gt;data.size() != buf.bytesused)</div>
<div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;    {</div>
<div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;      p = <a class="code" href="group__Frm.xhtml#ga5ba7e0c57baf013d4f6aec578c449b68">RawDataFramePtr</a>(<span class="keyword">new</span> <a class="code" href="classVoxel_1_1RawDataFrame.xhtml">RawDataFrame</a>());</div>
<div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;      p-&gt;data.resize(buf.bytesused);</div>
<div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;      <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758ad625895b380d0d8fc7ef71ef75429b7a">LOG_DEBUG</a>) &lt;&lt; <span class="stringliteral">&quot;UVCStreamer: Frame provided is not of appropriate size. Recreating a new frame.&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;    }</div>
<div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;    </div>
<div class="line"><a name="l00976"></a><span class="lineno">  976</span>&#160;    p-&gt;timestamp = <a class="code" href="classVoxel_1_1Streamer.xhtml#abb256799c485ffcf0f3c70565807ef07">_time</a>.<a class="code" href="classVoxel_1_1Timer.xhtml#aaad32c9851453120b2fee8fa4bb1ef66">convertToRealTime</a>(buf.timestamp.tv_sec*1000000L + buf.timestamp.tv_usec);</div>
<div class="line"><a name="l00977"></a><span class="lineno">  977</span>&#160;    memcpy(p-&gt;data.data(), &amp;*<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;rawDataBuffers[buf.index].data, buf.bytesused);</div>
<div class="line"><a name="l00978"></a><span class="lineno">  978</span>&#160;    </div>
<div class="line"><a name="l00979"></a><span class="lineno">  979</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;uvc-&gt;getUVCPrivate().xioctl(VIDIOC_QBUF, &amp;buf) == -1)</div>
<div class="line"><a name="l00980"></a><span class="lineno">  980</span>&#160;    {</div>
<div class="line"><a name="l00981"></a><span class="lineno">  981</span>&#160;      <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;UVCStreamer: Failed to enqueue back the raw frame buffer&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;    }</div>
<div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;    </div>
<div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;    p-&gt;id = <a class="code" href="classVoxel_1_1Streamer.xhtml#a492777901439cbece3cb15053b0c89bc">_currentID</a>++;</div>
<div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;    </div>
<div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;  }</div>
<div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;<span class="preprocessor">#elif defined(WINDOWS)</span></div>
<div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;<span class="preprocessor"></span>  <span class="keywordflow">if</span> (<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;getBuffer(waitTime, p))</div>
<div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;  {</div>
<div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;    p-&gt;id = <a class="code" href="classVoxel_1_1Streamer.xhtml#a492777901439cbece3cb15053b0c89bc">_currentID</a>++;</div>
<div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;  }</div>
<div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;<span class="preprocessor"></span>}</div>
<div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;</div>
<div class="line"><a name="l00999"></a><span class="lineno"><a class="line" href="classVoxel_1_1UVCStreamer.xhtml#ab7a867f901051bcfa97501edc881ea9c">  999</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classVoxel_1_1UVCStreamer.xhtml#ab7a867f901051bcfa97501edc881ea9c">UVCStreamer::getSupportedVideoModes</a>(<a class="code" href="group__Util.xhtml#ga8a21cf7475356ae552da8952ebf885b4">Vector&lt;VideoMode&gt;</a> &amp;videoModes)</div>
<div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;{</div>
<div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;  <span class="keywordflow">if</span>(!<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#aa1d2a26f98df476ac93ed407273b4405">isInitialized</a>())</div>
<div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;  </div>
<div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;  videoModes.clear();</div>
<div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;  </div>
<div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;<span class="preprocessor">#ifdef LINUX</span></div>
<div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;<span class="preprocessor"></span>  <span class="keywordtype">int</span> frameSizeIndex = 0;</div>
<div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;  <span class="keywordtype">int</span> frameRateIndex = 0;</div>
<div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;  </div>
<div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;  uint32_t frameWidth, frameHeight;</div>
<div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;  </div>
<div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;  </div>
<div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;  <span class="keyword">struct </span>v4l2_frmsizeenum frameSizeEnum;</div>
<div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;  <span class="keyword">struct </span>v4l2_frmivalenum frameIntervalEnum;</div>
<div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;  </div>
<div class="line"><a name="l01016"></a><span class="lineno"> 1016</span>&#160;  <span class="keywordflow">while</span>(1)</div>
<div class="line"><a name="l01017"></a><span class="lineno"> 1017</span>&#160;  {</div>
<div class="line"><a name="l01018"></a><span class="lineno"> 1018</span>&#160;    memset(&amp;frameSizeEnum, 0, <span class="keyword">sizeof</span>(frameSizeEnum));</div>
<div class="line"><a name="l01019"></a><span class="lineno"> 1019</span>&#160;    </div>
<div class="line"><a name="l01020"></a><span class="lineno"> 1020</span>&#160;    frameSizeEnum.index = frameSizeIndex++;</div>
<div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;    frameSizeEnum.pixel_format = V4L2_PIX_FMT_YUYV;<span class="comment">//V4L2_PIX_FMT_UYVY;//V4L2_PIX_FMT_YUYV;</span></div>
<div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;    </div>
<div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;    <span class="keywordflow">if</span>(<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;uvc-&gt;getUVCPrivate().xioctl(VIDIOC_ENUM_FRAMESIZES, &amp;frameSizeEnum) == -1)</div>
<div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;    {</div>
<div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;      <span class="keywordflow">if</span>(errno == EINVAL)</div>
<div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;      <span class="keywordflow">else</span></div>
<div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;    }</div>
<div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;    </div>
<div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;    <span class="keywordflow">if</span>(frameSizeEnum.type != V4L2_FRMSIZE_TYPE_DISCRETE)</div>
<div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;    {</div>
<div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;      <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758ad0982c0e5a750625d98e16b2877dedd8">LOG_WARNING</a>) &lt;&lt; <span class="stringliteral">&quot;Frame types other than discrete, are not supported currently.&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;      <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;    }</div>
<div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;    </div>
<div class="line"><a name="l01037"></a><span class="lineno"> 1037</span>&#160;    frameWidth = frameSizeEnum.discrete.width;</div>
<div class="line"><a name="l01038"></a><span class="lineno"> 1038</span>&#160;    frameHeight = frameSizeEnum.discrete.height;</div>
<div class="line"><a name="l01039"></a><span class="lineno"> 1039</span>&#160;    </div>
<div class="line"><a name="l01040"></a><span class="lineno"> 1040</span>&#160;    frameRateIndex = 0;</div>
<div class="line"><a name="l01041"></a><span class="lineno"> 1041</span>&#160;    <span class="keywordflow">while</span>(1)</div>
<div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;    {</div>
<div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;      memset(&amp;frameIntervalEnum, 0, <span class="keyword">sizeof</span>(frameIntervalEnum));</div>
<div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;      </div>
<div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;      frameIntervalEnum.index = frameRateIndex++;</div>
<div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;      frameIntervalEnum.pixel_format = V4L2_PIX_FMT_YUYV;</div>
<div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;      frameIntervalEnum.width = frameWidth;</div>
<div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;      frameIntervalEnum.height = frameHeight;</div>
<div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;      </div>
<div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;      <span class="keywordflow">if</span>(<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">_uvcStreamerPrivate</a>-&gt;uvc-&gt;getUVCPrivate().xioctl(VIDIOC_ENUM_FRAMEINTERVALS, &amp;frameIntervalEnum) == -1)</div>
<div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;      {</div>
<div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;        <span class="keywordflow">if</span>(errno == EINVAL)</div>
<div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;          <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01054"></a><span class="lineno"> 1054</span>&#160;        <span class="keywordflow">else</span></div>
<div class="line"><a name="l01055"></a><span class="lineno"> 1055</span>&#160;          <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l01056"></a><span class="lineno"> 1056</span>&#160;      }</div>
<div class="line"><a name="l01057"></a><span class="lineno"> 1057</span>&#160;      </div>
<div class="line"><a name="l01058"></a><span class="lineno"> 1058</span>&#160;      <span class="keywordflow">if</span>(frameIntervalEnum.type != V4L2_FRMIVAL_TYPE_DISCRETE)</div>
<div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;      {</div>
<div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;        <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758ad0982c0e5a750625d98e16b2877dedd8">LOG_WARNING</a>) &lt;&lt; <span class="stringliteral">&quot;Frame interval types other than discrete, are not supported currently.&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;        <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;      }</div>
<div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;      </div>
<div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;      <a class="code" href="classVoxel_1_1VideoMode.xhtml">VideoMode</a> vm;</div>
<div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;      vm.<a class="code" href="classVoxel_1_1VideoMode.xhtml#a48b5eb13a5c9f7d0a1641a261e056375">frameSize</a>.<a class="code" href="classVoxel_1_1FrameSize.xhtml#ac3d47cd9b7887dc3de31d95c7b39e8a7">width</a> = frameWidth;</div>
<div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;      vm.<a class="code" href="classVoxel_1_1VideoMode.xhtml#a48b5eb13a5c9f7d0a1641a261e056375">frameSize</a>.<a class="code" href="classVoxel_1_1FrameSize.xhtml#ae6de6f5d7fed5fd0af1985f86e3b9e55">height</a> = frameHeight;</div>
<div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;      vm.<a class="code" href="classVoxel_1_1VideoMode.xhtml#afb470b6a3a2e8fc7770ae7373fa8fe61">frameRate</a>.<a class="code" href="classVoxel_1_1FrameRate.xhtml#a0423f6c7e1e11a552cb08147bfd93cd0">numerator</a> = frameIntervalEnum.discrete.denominator;</div>
<div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;      vm.<a class="code" href="classVoxel_1_1VideoMode.xhtml#afb470b6a3a2e8fc7770ae7373fa8fe61">frameRate</a>.<a class="code" href="classVoxel_1_1FrameRate.xhtml#abce5ac3ab79442b76758484110258e82">denominator</a> = frameIntervalEnum.discrete.numerator;</div>
<div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;      </div>
<div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;      videoModes.push_back(vm);</div>
<div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;    }</div>
<div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;  }</div>
<div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;<span class="preprocessor">#elif defined(WINDOWS)</span></div>
<div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;<span class="preprocessor"></span>  <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;}</div>
<div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;</div>
<div class="line"><a name="l01078"></a><span class="lineno"><a class="line" href="classVoxel_1_1UVCStreamer.xhtml#a3310a4b702610446c70967ccc6b23b14"> 1078</a></span>&#160;<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#a3310a4b702610446c70967ccc6b23b14">UVCStreamer::~UVCStreamer</a>()</div>
<div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;{</div>
<div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;  <span class="keywordflow">if</span>(<a class="code" href="classVoxel_1_1UVCStreamer.xhtml#aa1d2a26f98df476ac93ed407273b4405">isInitialized</a>() &amp;&amp; <a class="code" href="classVoxel_1_1Streamer.xhtml#ab1cfea9ca2c261a33c38ccc00bc97c77">isRunning</a>())</div>
<div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;    <a class="code" href="classVoxel_1_1Streamer.xhtml#a3cb2a1d6b7ae774f34726a079c6e032e">stop</a>(); <span class="comment">// NOTE This cannot be called in the base class desctructor as UVCStreamer would already be destroyed by then</span></div>
<div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;}</div>
<div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;</div>
<div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;  </div>
<div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;}</div>
<div class="ttc" id="classVoxel_1_1VideoMode_xhtml_afb470b6a3a2e8fc7770ae7373fa8fe61"><div class="ttname"><a href="classVoxel_1_1VideoMode.xhtml#afb470b6a3a2e8fc7770ae7373fa8fe61">Voxel::VideoMode::frameRate</a></div><div class="ttdeci">FrameRate frameRate</div><div class="ttdef"><b>Definition:</b> <a href="VideoMode_8h_source.xhtml#l00063">VideoMode.h:63</a></div></div>
<div class="ttc" id="classVoxel_1_1UVCStreamer_xhtml_a3391362f1dd712d193ac53258f08821b"><div class="ttname"><a href="classVoxel_1_1UVCStreamer.xhtml#a3391362f1dd712d193ac53258f08821b">Voxel::UVCStreamer::_uvcInit</a></div><div class="ttdeci">bool _uvcInit()</div><div class="ttdef"><b>Definition:</b> <a href="UVCStreamer_8cpp_source.xhtml#l00344">UVCStreamer.cpp:344</a></div></div>
<div class="ttc" id="classVoxel_1_1UVCStreamer_xhtml_a7babd2f4cbe6152499b4c49b0137b6b4"><div class="ttname"><a href="classVoxel_1_1UVCStreamer.xhtml#a7babd2f4cbe6152499b4c49b0137b6b4">Voxel::UVCStreamer::setVideoMode</a></div><div class="ttdeci">virtual bool setVideoMode(const VideoMode &amp;videoMode)</div><div class="ttdef"><b>Definition:</b> <a href="UVCStreamer_8cpp_source.xhtml#l00522">UVCStreamer.cpp:522</a></div></div>
<div class="ttc" id="group__Util_xhtml_ga471af898800b97a74afc1daeb9f0e18c"><div class="ttname"><a href="group__Util.xhtml#ga471af898800b97a74afc1daeb9f0e18c">Voxel::ConditionVariable</a></div><div class="ttdeci">std::condition_variable ConditionVariable</div><div class="ttdef"><b>Definition:</b> <a href="Common_8h_source.xhtml#l00098">Common.h:98</a></div></div>
<div class="ttc" id="group__Util_xhtml_gga3b552e0c33cfe1ca3a0752dbd986b758ad0982c0e5a750625d98e16b2877dedd8"><div class="ttname"><a href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758ad0982c0e5a750625d98e16b2877dedd8">Voxel::LOG_WARNING</a></div><div class="ttdef"><b>Definition:</b> <a href="Logger_8h_source.xhtml#l00028">Logger.h:28</a></div></div>
<div class="ttc" id="group__Util_xhtml_gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0"><div class="ttname"><a href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">Voxel::LOG_ERROR</a></div><div class="ttdef"><b>Definition:</b> <a href="Logger_8h_source.xhtml#l00027">Logger.h:27</a></div></div>
<div class="ttc" id="classVoxel_1_1UVC_xhtml"><div class="ttname"><a href="classVoxel_1_1UVC.xhtml">Voxel::UVC</a></div><div class="ttdef"><b>Definition:</b> <a href="UVC_8h_source.xhtml#l00031">UVC.h:31</a></div></div>
<div class="ttc" id="group__Util_xhtml_ga12f64c7826c44420564715a1dbae5709"><div class="ttname"><a href="group__Util.xhtml#ga12f64c7826c44420564715a1dbae5709">Voxel::Mutex</a></div><div class="ttdeci">std::mutex Mutex</div><div class="ttdef"><b>Definition:</b> <a href="Common_8h_source.xhtml#l00097">Common.h:97</a></div></div>
<div class="ttc" id="classVoxel_1_1UVCStreamer_1_1UVCStreamerPrivate_xhtml_aae7f14fd52fa13f93db1326748270616"><div class="ttname"><a href="classVoxel_1_1UVCStreamer_1_1UVCStreamerPrivate.xhtml#aae7f14fd52fa13f93db1326748270616">Voxel::UVCStreamer::UVCStreamerPrivate::uvc</a></div><div class="ttdeci">Ptr&lt; UVC &gt; uvc</div><div class="ttdef"><b>Definition:</b> <a href="UVCStreamer_8cpp_source.xhtml#l00130">UVCStreamer.cpp:130</a></div></div>
<div class="ttc" id="classVoxel_1_1FrameBufferManager_xhtml"><div class="ttname"><a href="classVoxel_1_1FrameBufferManager.xhtml">Voxel::FrameBufferManager</a></div><div class="ttdef"><b>Definition:</b> <a href="FrameBuffer_8h_source.xhtml#l00027">FrameBuffer.h:27</a></div></div>
<div class="ttc" id="classVoxel_1_1Streamer_xhtml_a3cb2a1d6b7ae774f34726a079c6e032e"><div class="ttname"><a href="classVoxel_1_1Streamer.xhtml#a3cb2a1d6b7ae774f34726a079c6e032e">Voxel::Streamer::stop</a></div><div class="ttdeci">virtual bool stop()</div><div class="ttdef"><b>Definition:</b> <a href="Streamer_8cpp_source.xhtml#l00031">Streamer.cpp:31</a></div></div>
<div class="ttc" id="classVoxel_1_1Device_xhtml_a09e82a2c8801d91a67a0c3ae96434e90a8d880d4b536ed3803739132c2e5e0551"><div class="ttname"><a href="classVoxel_1_1Device.xhtml#a09e82a2c8801d91a67a0c3ae96434e90a8d880d4b536ed3803739132c2e5e0551">Voxel::Device::USB</a></div><div class="ttdef"><b>Definition:</b> <a href="Device_8h_source.xhtml#l00024">Device.h:24</a></div></div>
<div class="ttc" id="classVoxel_1_1UVCStreamer_xhtml_aecd50d2937da72beedea5df3868b8d4d"><div class="ttname"><a href="classVoxel_1_1UVCStreamer.xhtml#aecd50d2937da72beedea5df3868b8d4d">Voxel::UVCStreamer::_storeCurrentVideoMode</a></div><div class="ttdeci">void _storeCurrentVideoMode(const VideoMode &amp;videoMode)</div><div class="ttdef"><b>Definition:</b> <a href="UVCStreamer_8cpp_source.xhtml#l00514">UVCStreamer.cpp:514</a></div></div>
<div class="ttc" id="group__Util_xhtml_ga8a21cf7475356ae552da8952ebf885b4"><div class="ttname"><a href="group__Util.xhtml#ga8a21cf7475356ae552da8952ebf885b4">Voxel::Vector</a></div><div class="ttdeci">std::vector&lt; T &gt; Vector</div><div class="ttdef"><b>Definition:</b> <a href="Common_8h_source.xhtml#l00051">Common.h:51</a></div></div>
<div class="ttc" id="classVoxel_1_1UVCStreamer_xhtml_aa1d2a26f98df476ac93ed407273b4405"><div class="ttname"><a href="classVoxel_1_1UVCStreamer.xhtml#aa1d2a26f98df476ac93ed407273b4405">Voxel::UVCStreamer::isInitialized</a></div><div class="ttdeci">virtual bool isInitialized()</div><div class="ttdef"><b>Definition:</b> <a href="UVCStreamer_8cpp_source.xhtml#l00330">UVCStreamer.cpp:330</a></div></div>
<div class="ttc" id="group__Frm_xhtml_ga5ba7e0c57baf013d4f6aec578c449b68"><div class="ttname"><a href="group__Frm.xhtml#ga5ba7e0c57baf013d4f6aec578c449b68">Voxel::RawDataFramePtr</a></div><div class="ttdeci">Ptr&lt; RawDataFrame &gt; RawDataFramePtr</div><div class="ttdef"><b>Definition:</b> <a href="Frame_8h_source.xhtml#l00642">Frame.h:642</a></div></div>
<div class="ttc" id="classVoxel_1_1Ptr_xhtml"><div class="ttname"><a href="classVoxel_1_1Ptr.xhtml">Voxel::Ptr</a></div><div class="ttdef"><b>Definition:</b> <a href="Ptr_8h_source.xhtml#l00036">Ptr.h:36</a></div></div>
<div class="ttc" id="classVoxel_1_1UVCStreamer_1_1UVCStreamerPrivate_xhtml_a94976ada2effd204699aec22c5e5e082"><div class="ttname"><a href="classVoxel_1_1UVCStreamer_1_1UVCStreamerPrivate.xhtml#a94976ada2effd204699aec22c5e5e082">Voxel::UVCStreamer::UVCStreamerPrivate::~UVCStreamerPrivate</a></div><div class="ttdeci">~UVCStreamerPrivate()</div><div class="ttdef"><b>Definition:</b> <a href="UVCStreamer_8cpp_source.xhtml#l00139">UVCStreamer.cpp:139</a></div></div>
<div class="ttc" id="classVoxel_1_1VideoMode_xhtml"><div class="ttname"><a href="classVoxel_1_1VideoMode.xhtml">Voxel::VideoMode</a></div><div class="ttdef"><b>Definition:</b> <a href="VideoMode_8h_source.xhtml#l00059">VideoMode.h:59</a></div></div>
<div class="ttc" id="classVoxel_1_1VideoMode_xhtml_a99b3955c15011399b66cbf609afdbacb"><div class="ttname"><a href="classVoxel_1_1VideoMode.xhtml#a99b3955c15011399b66cbf609afdbacb">Voxel::VideoMode::getFrameRate</a></div><div class="ttdeci">float getFrameRate() const </div><div class="ttdef"><b>Definition:</b> <a href="VideoMode_8h_source.xhtml#l00065">VideoMode.h:65</a></div></div>
<div class="ttc" id="classVoxel_1_1UVCStreamer_xhtml_a3310a4b702610446c70967ccc6b23b14"><div class="ttname"><a href="classVoxel_1_1UVCStreamer.xhtml#a3310a4b702610446c70967ccc6b23b14">Voxel::UVCStreamer::~UVCStreamer</a></div><div class="ttdeci">virtual ~UVCStreamer()</div><div class="ttdef"><b>Definition:</b> <a href="UVCStreamer_8cpp_source.xhtml#l01078">UVCStreamer.cpp:1078</a></div></div>
<div class="ttc" id="classVoxel_1_1FrameSize_xhtml_ac3d47cd9b7887dc3de31d95c7b39e8a7"><div class="ttname"><a href="classVoxel_1_1FrameSize.xhtml#ac3d47cd9b7887dc3de31d95c7b39e8a7">Voxel::FrameSize::width</a></div><div class="ttdeci">uint32_t width</div><div class="ttdef"><b>Definition:</b> <a href="VideoMode_8h_source.xhtml#l00022">VideoMode.h:22</a></div></div>
<div class="ttc" id="classVoxel_1_1UVCStreamer_1_1UVCStreamerPrivate_xhtml_a852a32c88bb5189e574e64f4aa340c3a"><div class="ttname"><a href="classVoxel_1_1UVCStreamer_1_1UVCStreamerPrivate.xhtml#a852a32c88bb5189e574e64f4aa340c3a">Voxel::UVCStreamer::UVCStreamerPrivate::initialized</a></div><div class="ttdeci">bool initialized</div><div class="ttdef"><b>Definition:</b> <a href="UVCStreamer_8cpp_source.xhtml#l00129">UVCStreamer.cpp:129</a></div></div>
<div class="ttc" id="classVoxel_1_1UVCStreamer_xhtml_a5a3e48eab120d389b3970c64877f7f98"><div class="ttname"><a href="classVoxel_1_1UVCStreamer.xhtml#a5a3e48eab120d389b3970c64877f7f98">Voxel::UVCStreamer::_capture</a></div><div class="ttdeci">virtual bool _capture(RawDataFramePtr &amp;p)</div><div class="ttdef"><b>Definition:</b> <a href="UVCStreamer_8cpp_source.xhtml#l00887">UVCStreamer.cpp:887</a></div></div>
<div class="ttc" id="group__Util_xhtml_ga4a84235fd75760811d3cbb1d041fb583"><div class="ttname"><a href="group__Util.xhtml#ga4a84235fd75760811d3cbb1d041fb583">Voxel::ByteType</a></div><div class="ttdeci">uint8_t ByteType</div><div class="ttdef"><b>Definition:</b> <a href="Common_8h_source.xhtml#l00086">Common.h:86</a></div></div>
<div class="ttc" id="group__IO_xhtml_ga21dc16e4a3028a99c0be8f3943bfb699"><div class="ttname"><a href="group__IO.xhtml#ga21dc16e4a3028a99c0be8f3943bfb699">Voxel::DWORD</a></div><div class="ttdeci">unsigned long DWORD</div><div class="ttdef"><b>Definition:</b> <a href="USBSystemPrivateWindows_8h_source.xhtml#l00031">USBSystemPrivateWindows.h:31</a></div></div>
<div class="ttc" id="UVCPrivateWindows_8h_xhtml"><div class="ttname"><a href="UVCPrivateWindows_8h.xhtml">UVCPrivateWindows.h</a></div></div>
<div class="ttc" id="classVoxel_1_1FrameSize_xhtml_ae6de6f5d7fed5fd0af1985f86e3b9e55"><div class="ttname"><a href="classVoxel_1_1FrameSize.xhtml#ae6de6f5d7fed5fd0af1985f86e3b9e55">Voxel::FrameSize::height</a></div><div class="ttdeci">uint32_t height</div><div class="ttdef"><b>Definition:</b> <a href="VideoMode_8h_source.xhtml#l00022">VideoMode.h:22</a></div></div>
<div class="ttc" id="classVoxel_1_1Timer_xhtml_a363a248fe7dd94ae58681cf145b23a23"><div class="ttname"><a href="classVoxel_1_1Timer.xhtml#a363a248fe7dd94ae58681cf145b23a23">Voxel::Timer::getCurentRealTime</a></div><div class="ttdeci">TimeStampType getCurentRealTime()</div><div class="ttdef"><b>Definition:</b> <a href="Timer_8cpp_source.xhtml#l00101">Timer.cpp:101</a></div></div>
<div class="ttc" id="classVoxel_1_1UVCStreamer_xhtml_a090323f66d0dd822d05063b16029ea12"><div class="ttname"><a href="classVoxel_1_1UVCStreamer.xhtml#a090323f66d0dd822d05063b16029ea12">Voxel::UVCStreamer::getCurrentVideoMode</a></div><div class="ttdeci">virtual bool getCurrentVideoMode(VideoMode &amp;videoMode)</div><div class="ttdef"><b>Definition:</b> <a href="UVCStreamer_8cpp_source.xhtml#l00473">UVCStreamer.cpp:473</a></div></div>
<div class="ttc" id="classVoxel_1_1UVCStreamer_xhtml_a9568a4affa97c36123533724b9bdbd0f"><div class="ttname"><a href="classVoxel_1_1UVCStreamer.xhtml#a9568a4affa97c36123533724b9bdbd0f">Voxel::UVCStreamer::_uvcStreamerPrivate</a></div><div class="ttdeci">Ptr&lt; UVCStreamerPrivate &gt; _uvcStreamerPrivate</div><div class="ttdef"><b>Definition:</b> <a href="UVCStreamer_8h_source.xhtml#l00027">UVCStreamer.h:27</a></div></div>
<div class="ttc" id="classVoxel_1_1RawDataFrame_xhtml"><div class="ttname"><a href="classVoxel_1_1RawDataFrame.xhtml">Voxel::RawDataFrame</a></div><div class="ttdef"><b>Definition:</b> <a href="Frame_8h_source.xhtml#l00563">Frame.h:563</a></div></div>
<div class="ttc" id="group__IO_xhtml_ga9c6ee30a321d6103b2a9842ac25327cf"><div class="ttname"><a href="group__IO.xhtml#ga9c6ee30a321d6103b2a9842ac25327cf">Voxel::ULONG</a></div><div class="ttdeci">unsigned long ULONG</div><div class="ttdef"><b>Definition:</b> <a href="USBSystemPrivateWindows_8h_source.xhtml#l00032">USBSystemPrivateWindows.h:32</a></div></div>
<div class="ttc" id="classVoxel_1_1Timer_xhtml"><div class="ttname"><a href="classVoxel_1_1Timer.xhtml">Voxel::Timer</a></div><div class="ttdef"><b>Definition:</b> <a href="Timer_8h_source.xhtml#l00021">Timer.h:21</a></div></div>
<div class="ttc" id="Logger_8h_xhtml"><div class="ttname"><a href="Logger_8h.xhtml">Logger.h</a></div></div>
<div class="ttc" id="classVoxel_1_1Streamer_xhtml_abb256799c485ffcf0f3c70565807ef07"><div class="ttname"><a href="classVoxel_1_1Streamer.xhtml#abb256799c485ffcf0f3c70565807ef07">Voxel::Streamer::_time</a></div><div class="ttdeci">Timer _time</div><div class="ttdef"><b>Definition:</b> <a href="Streamer_8h_source.xhtml#l00028">Streamer.h:28</a></div></div>
<div class="ttc" id="classVoxel_1_1UVCStreamer_xhtml_ab7a867f901051bcfa97501edc881ea9c"><div class="ttname"><a href="classVoxel_1_1UVCStreamer.xhtml#ab7a867f901051bcfa97501edc881ea9c">Voxel::UVCStreamer::getSupportedVideoModes</a></div><div class="ttdeci">virtual bool getSupportedVideoModes(Vector&lt; VideoMode &gt; &amp;videoModes)</div><div class="ttdef"><b>Definition:</b> <a href="UVCStreamer_8cpp_source.xhtml#l00999">UVCStreamer.cpp:999</a></div></div>
<div class="ttc" id="classVoxel_1_1Streamer_xhtml_ab1cfea9ca2c261a33c38ccc00bc97c77"><div class="ttname"><a href="classVoxel_1_1Streamer.xhtml#ab1cfea9ca2c261a33c38ccc00bc97c77">Voxel::Streamer::isRunning</a></div><div class="ttdeci">virtual bool isRunning()</div><div class="ttdef"><b>Definition:</b> <a href="Streamer_8h_source.xhtml#l00045">Streamer.h:45</a></div></div>
<div class="ttc" id="classVoxel_1_1UVCStreamer_xhtml_a3bf08c2dd6922d8e4a44a63840095d97"><div class="ttname"><a href="classVoxel_1_1UVCStreamer.xhtml#a3bf08c2dd6922d8e4a44a63840095d97">Voxel::UVCStreamer::_start</a></div><div class="ttdeci">virtual bool _start()</div><div class="ttdef"><b>Definition:</b> <a href="UVCStreamer_8cpp_source.xhtml#l00669">UVCStreamer.cpp:669</a></div></div>
<div class="ttc" id="classVoxel_1_1UVCStreamer_xhtml_aa1e3461a21667822e145032dc4b4e399"><div class="ttname"><a href="classVoxel_1_1UVCStreamer.xhtml#aa1e3461a21667822e145032dc4b4e399">Voxel::UVCStreamer::_stop</a></div><div class="ttdeci">virtual bool _stop()</div><div class="ttdef"><b>Definition:</b> <a href="UVCStreamer_8cpp_source.xhtml#l00842">UVCStreamer.cpp:842</a></div></div>
<div class="ttc" id="classVoxel_1_1UVCStreamer_xhtml_acc806ec3fc0f1e55739a844a0ff0f3c0"><div class="ttname"><a href="classVoxel_1_1UVCStreamer.xhtml#acc806ec3fc0f1e55739a844a0ff0f3c0">Voxel::UVCStreamer::_initForCapture</a></div><div class="ttdeci">bool _initForCapture()</div><div class="ttdef"><b>Definition:</b> <a href="UVCStreamer_8cpp_source.xhtml#l00618">UVCStreamer.cpp:618</a></div></div>
<div class="ttc" id="classVoxel_1_1FrameRate_xhtml_a0423f6c7e1e11a552cb08147bfd93cd0"><div class="ttname"><a href="classVoxel_1_1FrameRate.xhtml#a0423f6c7e1e11a552cb08147bfd93cd0">Voxel::FrameRate::numerator</a></div><div class="ttdeci">uint32_t numerator</div><div class="ttdef"><b>Definition:</b> <a href="VideoMode_8h_source.xhtml#l00054">VideoMode.h:54</a></div></div>
<div class="ttc" id="classVoxel_1_1UVCStreamer_1_1UVCStreamerPrivate_xhtml"><div class="ttname"><a href="classVoxel_1_1UVCStreamer_1_1UVCStreamerPrivate.xhtml">Voxel::UVCStreamer::UVCStreamerPrivate</a></div><div class="ttdef"><b>Definition:</b> <a href="UVCStreamer_8cpp_source.xhtml#l00082">UVCStreamer.cpp:82</a></div></div>
<div class="ttc" id="classVoxel_1_1Timer_xhtml_aaad32c9851453120b2fee8fa4bb1ef66"><div class="ttname"><a href="classVoxel_1_1Timer.xhtml#aaad32c9851453120b2fee8fa4bb1ef66">Voxel::Timer::convertToRealTime</a></div><div class="ttdeci">TimeStampType convertToRealTime(TimeStampType l)</div><div class="ttdef"><b>Definition:</b> <a href="Timer_8cpp_source.xhtml#l00093">Timer.cpp:93</a></div></div>
<div class="ttc" id="UVCPrivateLinux_8h_xhtml"><div class="ttname"><a href="UVCPrivateLinux_8h.xhtml">UVCPrivateLinux.h</a></div></div>
<div class="ttc" id="UVCStreamer_8cpp_xhtml_a433048abeb218e08e3f423032b6c537c"><div class="ttname"><a href="UVCStreamer_8cpp.xhtml#a433048abeb218e08e3f423032b6c537c">MAX_BUFFER_COUNT</a></div><div class="ttdeci">#define MAX_BUFFER_COUNT</div><div class="ttdef"><b>Definition:</b> <a href="UVCStreamer_8cpp_source.xhtml#l00015">UVCStreamer.cpp:15</a></div></div>
<div class="ttc" id="classVoxel_1_1Streamer_xhtml_add5e917757e7ebd215ae0450418a4639"><div class="ttname"><a href="classVoxel_1_1Streamer.xhtml#add5e917757e7ebd215ae0450418a4639">Voxel::Streamer::_device</a></div><div class="ttdeci">DevicePtr _device</div><div class="ttdef"><b>Definition:</b> <a href="Streamer_8h_source.xhtml#l00026">Streamer.h:26</a></div></div>
<div class="ttc" id="classVoxel_1_1FrameRate_xhtml_abce5ac3ab79442b76758484110258e82"><div class="ttname"><a href="classVoxel_1_1FrameRate.xhtml#abce5ac3ab79442b76758484110258e82">Voxel::FrameRate::denominator</a></div><div class="ttdeci">uint32_t denominator</div><div class="ttdef"><b>Definition:</b> <a href="VideoMode_8h_source.xhtml#l00054">VideoMode.h:54</a></div></div>
<div class="ttc" id="classVoxel_1_1UVCStreamer_1_1UVCStreamerPrivate_xhtml_a68f53022e6f2bd9e7e8a46dbc7a1b9be"><div class="ttname"><a href="classVoxel_1_1UVCStreamer_1_1UVCStreamerPrivate.xhtml#a68f53022e6f2bd9e7e8a46dbc7a1b9be">Voxel::UVCStreamer::UVCStreamerPrivate::UVCStreamerPrivate</a></div><div class="ttdeci">UVCStreamerPrivate()</div><div class="ttdef"><b>Definition:</b> <a href="UVCStreamer_8cpp_source.xhtml#l00132">UVCStreamer.cpp:132</a></div></div>
<div class="ttc" id="FrameBuffer_8h_xhtml"><div class="ttname"><a href="FrameBuffer_8h.xhtml">FrameBuffer.h</a></div></div>
<div class="ttc" id="UVCStreamer_8h_xhtml"><div class="ttname"><a href="UVCStreamer_8h.xhtml">UVCStreamer.h</a></div></div>
<div class="ttc" id="classVoxel_1_1UVCStreamer_xhtml_ac1d2b3ea57b26c46c8cba420a9644705"><div class="ttname"><a href="classVoxel_1_1UVCStreamer.xhtml#ac1d2b3ea57b26c46c8cba420a9644705">Voxel::UVCStreamer::_currentVideoMode</a></div><div class="ttdeci">Ptr&lt; VideoMode &gt; _currentVideoMode</div><div class="ttdef"><b>Definition:</b> <a href="UVCStreamer_8h_source.xhtml#l00030">UVCStreamer.h:30</a></div></div>
<div class="ttc" id="namespaceCameraSystemTest_xhtml_ac0913e3b4768858f3236123c3040a226"><div class="ttname"><a href="namespaceCameraSystemTest.xhtml#ac0913e3b4768858f3236123c3040a226">CameraSystemTest.frameSize</a></div><div class="ttdeci">tuple frameSize</div><div class="ttdef"><b>Definition:</b> <a href="CameraSystemTest_8py_source.xhtml#l00052">CameraSystemTest.py:52</a></div></div>
<div class="ttc" id="group__Util_xhtml_gabd012fcbae5565e03008afef1fd4f261"><div class="ttname"><a href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">Voxel::logger</a></div><div class="ttdeci">Logger logger(LOG_WARNING)</div><div class="ttdef"><b>Definition:</b> <a href="Logger_8h_source.xhtml#l00180">Logger.h:180</a></div></div>
<div class="ttc" id="classVoxel_1_1Streamer_xhtml"><div class="ttname"><a href="classVoxel_1_1Streamer.xhtml">Voxel::Streamer</a></div><div class="ttdef"><b>Definition:</b> <a href="Streamer_8h_source.xhtml#l00023">Streamer.h:23</a></div></div>
<div class="ttc" id="classVoxel_1_1VideoMode_xhtml_a48b5eb13a5c9f7d0a1641a261e056375"><div class="ttname"><a href="classVoxel_1_1VideoMode.xhtml#a48b5eb13a5c9f7d0a1641a261e056375">Voxel::VideoMode::frameSize</a></div><div class="ttdeci">FrameSize frameSize</div><div class="ttdef"><b>Definition:</b> <a href="VideoMode_8h_source.xhtml#l00062">VideoMode.h:62</a></div></div>
<div class="ttc" id="group__Util_xhtml_gga3b552e0c33cfe1ca3a0752dbd986b758ad625895b380d0d8fc7ef71ef75429b7a"><div class="ttname"><a href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758ad625895b380d0d8fc7ef71ef75429b7a">Voxel::LOG_DEBUG</a></div><div class="ttdef"><b>Definition:</b> <a href="Logger_8h_source.xhtml#l00030">Logger.h:30</a></div></div>
<div class="ttc" id="classList_xhtml"><div class="ttname"><a href="classList.xhtml">List</a></div></div>
<div class="ttc" id="group__Util_xhtml_gga3b552e0c33cfe1ca3a0752dbd986b758a927dfc961ff499047d5b1c67981bbd31"><div class="ttname"><a href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758a927dfc961ff499047d5b1c67981bbd31">Voxel::LOG_INFO</a></div><div class="ttdef"><b>Definition:</b> <a href="Logger_8h_source.xhtml#l00029">Logger.h:29</a></div></div>
<div class="ttc" id="classVoxel_1_1Streamer_xhtml_a492777901439cbece3cb15053b0c89bc"><div class="ttname"><a href="classVoxel_1_1Streamer.xhtml#a492777901439cbece3cb15053b0c89bc">Voxel::Streamer::_currentID</a></div><div class="ttdeci">int _currentID</div><div class="ttdef"><b>Definition:</b> <a href="Streamer_8h_source.xhtml#l00030">Streamer.h:30</a></div></div>
<div class="ttc" id="group__Util_xhtml_ga336d5597ccfb20c79696370b1982dc0e"><div class="ttname"><a href="group__Util.xhtml#ga336d5597ccfb20c79696370b1982dc0e">Voxel::TimeStampType</a></div><div class="ttdeci">uint64_t TimeStampType</div><div class="ttdef"><b>Definition:</b> <a href="Common_8h_source.xhtml#l00087">Common.h:87</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Tue Jul 21 2015 20:56:03 for Voxel by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.6
</small></address>
</body>
</html>
