<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.7"/>
<title>Voxel: USBSystemPrivateWindows.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Voxel
   &#160;<span id="projectnumber">0.5.6</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.7 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_e7f07c35b19a6de9638fcd101b463d91.xhtml">Voxel</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">USBSystemPrivateWindows.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="USBSystemPrivateWindows_8cpp.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * TI Voxel Lib component.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * Copyright (c) 2014 Texas Instruments Inc.</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> */</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;</div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="USBSystemPrivateWindows_8h.xhtml">USBSystemPrivateWindows.h</a>&quot;</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;</div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="Logger_8h.xhtml">Logger.h</a>&quot;</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;</div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="preprocessor">#include &lt;devguid.h&gt;</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;</div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="keyword">namespace </span>Voxel</div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;{</div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;</div>
<div class="line"><a name="l00016"></a><span class="lineno"><a class="line" href="structVoxel_1_1DeviceInfo.xhtml">   16</a></span>&#160;<span class="keyword">struct </span><a class="code" href="structVoxel_1_1DeviceInfo.xhtml">DeviceInfo</a></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;{</div>
<div class="line"><a name="l00018"></a><span class="lineno"><a class="line" href="structVoxel_1_1DeviceInfo.xhtml#a1061ff33869e063fb23d7cb8987c6a65">   18</a></span>&#160;  SP_DEVINFO_DATA <a class="code" href="structVoxel_1_1DeviceInfo.xhtml#a1061ff33869e063fb23d7cb8987c6a65">devInfo</a>;</div>
<div class="line"><a name="l00019"></a><span class="lineno"><a class="line" href="structVoxel_1_1DeviceInfo.xhtml#a0a2581d443580864ae2c630dc58133c2">   19</a></span>&#160;  SP_DEVICE_INTERFACE_DATA <a class="code" href="structVoxel_1_1DeviceInfo.xhtml#a0a2581d443580864ae2c630dc58133c2">devInterfaceData</a>;</div>
<div class="line"><a name="l00020"></a><span class="lineno"><a class="line" href="structVoxel_1_1DeviceInfo.xhtml#abb44270c0c9e74101614ee53a165469f">   20</a></span>&#160;  <a class="code" href="classVoxel_1_1Ptr.xhtml">Ptr&lt;SP_DEVICE_INTERFACE_DETAIL_DATA&gt;</a> <a class="code" href="structVoxel_1_1DeviceInfo.xhtml#abb44270c0c9e74101614ee53a165469f">devInterfaceDetailData</a>;</div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;};</div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;</div>
<div class="line"><a name="l00023"></a><span class="lineno"><a class="line" href="group__IO.xhtml#gab6c3a2c7db631983faa923d68084fb1d">   23</a></span>&#160;std::string <a class="code" href="group__IO.xhtml#gab6c3a2c7db631983faa923d68084fb1d">getDeviceError</a>()</div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;{</div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;  <a class="code" href="group__IO.xhtml#ga21dc16e4a3028a99c0be8f3943bfb699">DWORD</a> error = GetLastError();</div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;  <span class="keywordflow">if</span> (error)</div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;  {</div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;    LPVOID lpMsgBuf;</div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;    <a class="code" href="group__IO.xhtml#ga21dc16e4a3028a99c0be8f3943bfb699">DWORD</a> bufLen = FormatMessage(</div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;      FORMAT_MESSAGE_ALLOCATE_BUFFER |</div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;      FORMAT_MESSAGE_FROM_SYSTEM |</div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;      FORMAT_MESSAGE_IGNORE_INSERTS,</div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;      NULL,</div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;      error,</div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;      MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),</div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;      (LPTSTR)&amp;lpMsgBuf,</div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;      0, NULL);</div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;    <span class="keywordflow">if</span> (bufLen)</div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;    {</div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;      LPCSTR lpMsgStr = (LPCSTR)lpMsgBuf;</div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;      std::string result(lpMsgStr, lpMsgStr + bufLen);</div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;</div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;      LocalFree(lpMsgBuf);</div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;</div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;      <span class="keywordflow">return</span> result;</div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;    }</div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;  }</div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;  <span class="keywordflow">return</span> std::string();</div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;}</div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;</div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classVoxel_1_1USBSystemPrivate.xhtml#ac06767c16a91d626f545f7463f977c21">USBSystemPrivate::isInitialized</a>()</div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;{</div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;}</div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;  </div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment">//String USBSystemPrivate::getDeviceNode(const USBDevice &amp;usbd)</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">//{</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">//  return String(&quot;&quot;);</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment">//}</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div>
<div class="line"><a name="l00062"></a><span class="lineno"><a class="line" href="classVoxel_1_1USBSystemPrivate.xhtml#a5cc528607175a1d2848e99cac4b29b96">   62</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classVoxel_1_1USBSystemPrivate.xhtml#a5cc528607175a1d2848e99cac4b29b96">USBSystemPrivate::_getDeviceProperty</a>(<a class="code" href="group__IO.xhtml#gaafe7976c9e3804692025b8cc7317ff8e">HDEVINFO</a> devClassInfo, <a class="code" href="structVoxel_1_1DeviceInfo.xhtml">DeviceInfo</a> &amp;devInfo, <a class="code" href="group__IO.xhtml#ga21dc16e4a3028a99c0be8f3943bfb699">DWORD</a> prop, <a class="code" href="classString.xhtml">String</a> &amp;ppBuffer)</div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;{</div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;  BOOL bResult;</div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;  <a class="code" href="group__IO.xhtml#ga21dc16e4a3028a99c0be8f3943bfb699">DWORD</a> requiredLength = 0;</div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;  </div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;  ppBuffer.clear();</div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;</div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;  bResult = SetupDiGetDeviceRegistryProperty(devClassInfo, &amp;devInfo.<a class="code" href="structVoxel_1_1DeviceInfo.xhtml#a1061ff33869e063fb23d7cb8987c6a65">devInfo</a>, prop, NULL, NULL, 0, &amp;requiredLength);</div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;  </div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;  <span class="keywordflow">if</span> ((requiredLength == 0) || (bResult &amp;&amp; GetLastError() != ERROR_INSUFFICIENT_BUFFER))</div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;  </div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;  ppBuffer.resize(requiredLength - 1); <span class="comment">// but set size to one less to not consider null character</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;  ppBuffer.reserve(requiredLength);<span class="comment">// Give space for null character</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;  <span class="keywordflow">return</span> SetupDiGetDeviceRegistryProperty(devClassInfo, &amp;devInfo.<a class="code" href="structVoxel_1_1DeviceInfo.xhtml#a1061ff33869e063fb23d7cb8987c6a65">devInfo</a>, prop, NULL, (PBYTE)ppBuffer.data(), requiredLength, &amp;requiredLength);</div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;}</div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;</div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div>
<div class="line"><a name="l00081"></a><span class="lineno"><a class="line" href="classVoxel_1_1USBSystemPrivate.xhtml#adb08a1c598a9e40b883c3c2cf49baceb">   81</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classVoxel_1_1USBSystemPrivate.xhtml#a5cc528607175a1d2848e99cac4b29b96">USBSystemPrivate::_getDeviceProperty</a>(<a class="code" href="group__IO.xhtml#ga6758195ba2a8511818a354eab109583f">HANDLE</a> devHandle, <a class="code" href="group__IO.xhtml#ga21dc16e4a3028a99c0be8f3943bfb699">DWORD</a> prop, <a class="code" href="classVoxel_1_1Ptr.xhtml">Ptr&lt;T&gt;</a> &amp;result, <a class="code" href="group__Util.xhtml#ga8aaf1e39b1b92e5f2ae6cf09d3ca0623">Function</a>&lt;<span class="keywordtype">void</span>(T &amp;t)&gt; init)</div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;{</div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;  <a class="code" href="group__IO.xhtml#ga9c6ee30a321d6103b2a9842ac25327cf">ULONG</a> nBytes = 0;</div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;</div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;  T t;</div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;</div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;  <span class="keywordflow">if</span> (init)</div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;    init(t);</div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;</div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;  <span class="keywordflow">if</span> (!DeviceIoControl(devHandle, prop, &amp;t, <span class="keyword">sizeof</span>(T), &amp;t, <span class="keyword">sizeof</span>(T), &amp;nBytes, NULL))</div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;</div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;  nBytes = t.ActualLength;</div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;</div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;  result = byteAlloc&lt;T&gt;(t.ActualLength); <span class="comment">// Actual required size with custom deleter to reconvert to byte type and delete.</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;</div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;  <span class="keywordflow">if</span> (!result)</div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;</div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;  <span class="keywordflow">if</span> (init)</div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    init(*result);</div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;  <span class="keywordflow">return</span> DeviceIoControl(devHandle, prop, &amp;*result, nBytes, &amp;*result, nBytes, &amp;nBytes, NULL);</div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;}</div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div>
<div class="line"><a name="l00106"></a><span class="lineno"><a class="line" href="classVoxel_1_1USBSystemPrivate.xhtml#af36cb7f956e2d2a79a9912b725ebada9">  106</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classVoxel_1_1USBSystemPrivate.xhtml#af36cb7f956e2d2a79a9912b725ebada9">USBSystemPrivate::_iterateSetupAPI</a>(LPGUID guid, <a class="code" href="group__Util.xhtml#ga8aaf1e39b1b92e5f2ae6cf09d3ca0623">Function</a>&lt;<span class="keywordtype">void</span>(<a class="code" href="group__IO.xhtml#gaafe7976c9e3804692025b8cc7317ff8e">HDEVINFO</a> devClassInfo, <a class="code" href="structVoxel_1_1DeviceInfo.xhtml">DeviceInfo</a> &amp;devInfo, <a class="code" href="group__IO.xhtml#ga9c6ee30a321d6103b2a9842ac25327cf">ULONG</a> hubIndex)&gt; process)</div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;{</div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;  <a class="code" href="group__IO.xhtml#ga21dc16e4a3028a99c0be8f3943bfb699">DWORD</a> flags = DIGCF_PRESENT;</div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;  </div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;  <span class="keywordflow">if</span> (guid) flags |= DIGCF_DEVICEINTERFACE;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;</div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;  <span class="keywordflow">if</span> (!guid) flags |= DIGCF_ALLCLASSES;</div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;</div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;  <a class="code" href="group__IO.xhtml#gaafe7976c9e3804692025b8cc7317ff8e">HDEVINFO</a> devClassInfo = SetupDiGetClassDevs(guid, NULL, NULL, flags); <span class="comment">// | DIGCF_DEVICEINTERFACE</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;</div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;  <span class="keywordflow">if</span> (devClassInfo == INVALID_HANDLE_VALUE)</div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;  {</div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;    <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;USBSystem: Failed to get handle to device class. Error = &quot;</span> &lt;&lt; <a class="code" href="group__IO.xhtml#gab6c3a2c7db631983faa923d68084fb1d">getDeviceError</a>() &lt;&lt; std::endl;</div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;  }</div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;</div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;  <a class="code" href="structVoxel_1_1DeviceInfo.xhtml">DeviceInfo</a> deviceInfo;</div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;</div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;  deviceInfo.<a class="code" href="structVoxel_1_1DeviceInfo.xhtml#a1061ff33869e063fb23d7cb8987c6a65">devInfo</a>.cbSize = <span class="keyword">sizeof</span>(SP_DEVINFO_DATA);</div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;</div>
<div class="line"><a name="l00126"></a><span class="lineno">  126</span>&#160;  <a class="code" href="group__IO.xhtml#ga9c6ee30a321d6103b2a9842ac25327cf">ULONG</a> requiredLength;</div>
<div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;</div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;  <span class="keywordflow">for</span> (<a class="code" href="group__IO.xhtml#ga9c6ee30a321d6103b2a9842ac25327cf">ULONG</a> index = 0; SetupDiEnumDeviceInfo(devClassInfo, index, &amp;deviceInfo.<a class="code" href="structVoxel_1_1DeviceInfo.xhtml#a1061ff33869e063fb23d7cb8987c6a65">devInfo</a>); index++)</div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;  {</div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;    deviceInfo.<a class="code" href="structVoxel_1_1DeviceInfo.xhtml#a0a2581d443580864ae2c630dc58133c2">devInterfaceData</a>.cbSize = <span class="keyword">sizeof</span>(SP_DEVICE_INTERFACE_DATA);</div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;</div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;    <span class="comment">// FIXME: Currently this considers only the first interface of the device. Should we look for all the interfaces?</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <span class="keywordflow">if</span> (!SetupDiEnumDeviceInterfaces(devClassInfo, &amp;deviceInfo.<a class="code" href="structVoxel_1_1DeviceInfo.xhtml#a1061ff33869e063fb23d7cb8987c6a65">devInfo</a>, guid, 0, &amp;deviceInfo.<a class="code" href="structVoxel_1_1DeviceInfo.xhtml#a0a2581d443580864ae2c630dc58133c2">devInterfaceData</a>))</div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;    {</div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;      <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;USBSystem: Failed to enumerate device interfaces for index = &quot;</span> &lt;&lt; index &lt;&lt; <span class="stringliteral">&quot;. Error = &quot;</span> &lt;&lt; <a class="code" href="group__IO.xhtml#gab6c3a2c7db631983faa923d68084fb1d">getDeviceError</a>() &lt;&lt; std::endl;</div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;      SetupDiDestroyDeviceInfoList(devClassInfo);</div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;    }</div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;</div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keywordflow">if</span> (!SetupDiGetDeviceInterfaceDetail(devClassInfo, &amp;deviceInfo.<a class="code" href="structVoxel_1_1DeviceInfo.xhtml#a0a2581d443580864ae2c630dc58133c2">devInterfaceData</a>, NULL, 0, &amp;requiredLength, NULL) &amp;&amp; GetLastError() != ERROR_INSUFFICIENT_BUFFER)</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;    {</div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;      <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;USBSystem: Failed to get size for interface details for index = &quot;</span> &lt;&lt; index &lt;&lt; <span class="stringliteral">&quot;. Error = &quot;</span> &lt;&lt; <a class="code" href="group__IO.xhtml#gab6c3a2c7db631983faa923d68084fb1d">getDeviceError</a>() &lt;&lt; std::endl;</div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;      SetupDiDestroyDeviceInfoList(devClassInfo);</div>
<div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;    }</div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div>
<div class="line"><a name="l00147"></a><span class="lineno">  147</span>&#160;    deviceInfo.<a class="code" href="structVoxel_1_1DeviceInfo.xhtml#abb44270c0c9e74101614ee53a165469f">devInterfaceDetailData</a> = byteAlloc&lt;SP_DEVICE_INTERFACE_DETAIL_DATA&gt;(requiredLength);</div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;</div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;    deviceInfo.<a class="code" href="structVoxel_1_1DeviceInfo.xhtml#abb44270c0c9e74101614ee53a165469f">devInterfaceDetailData</a>-&gt;cbSize = <span class="keyword">sizeof</span>(SP_DEVICE_INTERFACE_DETAIL_DATA);</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;    <span class="keywordflow">if</span> (!SetupDiGetDeviceInterfaceDetail(devClassInfo, &amp;deviceInfo.<a class="code" href="structVoxel_1_1DeviceInfo.xhtml#a0a2581d443580864ae2c630dc58133c2">devInterfaceData</a>, &amp;*deviceInfo.<a class="code" href="structVoxel_1_1DeviceInfo.xhtml#abb44270c0c9e74101614ee53a165469f">devInterfaceDetailData</a>, requiredLength, &amp;requiredLength, NULL))</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;    {</div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;      <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;USBSystem: Failed to get interface details for index = &quot;</span> &lt;&lt; index &lt;&lt; <span class="stringliteral">&quot;. Error = &quot;</span> &lt;&lt; <a class="code" href="group__IO.xhtml#gab6c3a2c7db631983faa923d68084fb1d">getDeviceError</a>() &lt;&lt; std::endl;</div>
<div class="line"><a name="l00154"></a><span class="lineno">  154</span>&#160;      SetupDiDestroyDeviceInfoList(devClassInfo);</div>
<div class="line"><a name="l00155"></a><span class="lineno">  155</span>&#160;      <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00156"></a><span class="lineno">  156</span>&#160;    }</div>
<div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;</div>
<div class="line"><a name="l00158"></a><span class="lineno">  158</span>&#160;    process(devClassInfo, deviceInfo, index);</div>
<div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;  }</div>
<div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;  SetupDiDestroyDeviceInfoList(devClassInfo);</div>
<div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;}</div>
<div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div>
<div class="line"><a name="l00164"></a><span class="lineno"><a class="line" href="classVoxel_1_1USBSystemPrivate.xhtml#a11c3f6b340a600180de9642fa693955e">  164</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="classVoxel_1_1USBSystemPrivate.xhtml#a11c3f6b340a600180de9642fa693955e">USBSystemPrivate::_enumerateHub</a>(<span class="keywordtype">int</span> busIndex, <span class="keyword">const</span> <a class="code" href="classString.xhtml">String</a> &amp;hubIndex, <span class="keyword">const</span> <a class="code" href="classString.xhtml">String</a> &amp;hubName, <a class="code" href="group__Util.xhtml#ga8aaf1e39b1b92e5f2ae6cf09d3ca0623">Function</a>&lt;<span class="keywordtype">void</span>(<a class="code" href="group__IO.xhtml#ga6758195ba2a8511818a354eab109583f">HANDLE</a> hubDevice, <a class="code" href="group__IO.xhtml#ga9c6ee30a321d6103b2a9842ac25327cf">ULONG</a> portIndex, <span class="keyword">const</span> <a class="code" href="classString.xhtml">String</a> &amp;driverKeyName, <a class="code" href="classVoxel_1_1Ptr.xhtml">DevicePtr</a> &amp;device)&gt; process)</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;{</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;  <a class="code" href="classString.xhtml">String</a> deviceName = <span class="stringliteral">&quot;\\\\.\\&quot;</span> + hubName;</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;  <a class="code" href="group__IO.xhtml#ga6758195ba2a8511818a354eab109583f">HANDLE</a> hHubDevice = CreateFile(deviceName.c_str(), GENERIC_WRITE, FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;  <span class="keywordflow">if</span> (hHubDevice == INVALID_HANDLE_VALUE)</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;  {</div>
<div class="line"><a name="l00172"></a><span class="lineno">  172</span>&#160;    <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;USBSystem: Could not open handle to device = &#39;&quot;</span> &lt;&lt; deviceName &lt;&lt; <span class="stringliteral">&quot;&#39;&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00173"></a><span class="lineno">  173</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;  }</div>
<div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;</div>
<div class="line"><a name="l00176"></a><span class="lineno">  176</span>&#160;  USB_NODE_INFORMATION hubInfo;</div>
<div class="line"><a name="l00177"></a><span class="lineno">  177</span>&#160;</div>
<div class="line"><a name="l00178"></a><span class="lineno">  178</span>&#160;  <a class="code" href="group__IO.xhtml#ga9c6ee30a321d6103b2a9842ac25327cf">ULONG</a> nBytes = 0;</div>
<div class="line"><a name="l00179"></a><span class="lineno">  179</span>&#160;</div>
<div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;  <span class="keywordflow">if</span> (!DeviceIoControl(hHubDevice, IOCTL_USB_GET_NODE_INFORMATION, &amp;hubInfo, <span class="keyword">sizeof</span>(USB_NODE_INFORMATION), &amp;hubInfo, <span class="keyword">sizeof</span>(USB_NODE_INFORMATION), &amp;nBytes, NULL))</div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;  {</div>
<div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;USBSystem: Could not get information about USB hub device = &#39;&quot;</span> &lt;&lt; deviceName &lt;&lt; <span class="stringliteral">&quot;&#39;&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;    CloseHandle(hHubDevice);</div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;  }</div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;  <a class="code" href="group__IO.xhtml#ga9c6ee30a321d6103b2a9842ac25327cf">ULONG</a> numPorts = hubInfo.u.HubInformation.HubDescriptor.bNumberOfPorts;</div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;</div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;  <span class="comment">// Support for information + upto 30 end point informations</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;  nBytes = <span class="keyword">sizeof</span>(USB_NODE_CONNECTION_INFORMATION) + <span class="keyword">sizeof</span>(USB_PIPE_INFO) * 30;</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;  <a class="code" href="classVoxel_1_1Ptr.xhtml">Ptr&lt;USB_NODE_CONNECTION_INFORMATION&gt;</a> connectionInfo = byteAlloc&lt;USB_NODE_CONNECTION_INFORMATION&gt;(nBytes);</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;  <span class="keywordflow">for</span> (<a class="code" href="group__IO.xhtml#ga9c6ee30a321d6103b2a9842ac25327cf">ULONG</a> index = 1; index &lt;= numPorts; index++)</div>
<div class="line"><a name="l00195"></a><span class="lineno">  195</span>&#160;  {</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;    connectionInfo-&gt;ConnectionIndex = index;</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;    <span class="keywordflow">if</span> (!DeviceIoControl(hHubDevice, IOCTL_USB_GET_NODE_CONNECTION_INFORMATION, &amp;*connectionInfo, nBytes, &amp;*connectionInfo, nBytes, &amp;nBytes, NULL))</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    {</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;      <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;USBSystem: Could not get information about device = &quot;</span> &lt;&lt; index &lt;&lt; <span class="stringliteral">&quot; connected to USB hub device = &#39;&quot;</span> &lt;&lt; deviceName &lt;&lt; <span class="stringliteral">&quot;&#39;&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;      <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    }</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;    <span class="keywordflow">if</span> (connectionInfo-&gt;ConnectionStatus != DeviceConnected)</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;      <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;    <a class="code" href="classString.xhtml">String</a> portIndex = (hubIndex.size() ? (hubIndex + <span class="stringliteral">&quot;.&quot;</span> + std::to_string(index)) : std::to_string(index));</div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;    <span class="keywordflow">if</span> (connectionInfo-&gt;DeviceIsHub)</div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;    {</div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;      <a class="code" href="classVoxel_1_1Ptr.xhtml">Ptr&lt;USB_NODE_CONNECTION_NAME&gt;</a> usbNodeName;</div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;      <span class="keywordflow">if</span> (!_getDeviceProperty&lt;USB_NODE_CONNECTION_NAME&gt;(hHubDevice, IOCTL_USB_GET_NODE_CONNECTION_NAME, usbNodeName, [index](USB_NODE_CONNECTION_NAME &amp;t) { t.ConnectionIndex = index; }))</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;      {</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;        <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;USBSystem: Could not get node name of device = &quot;</span> &lt;&lt; index &lt;&lt; <span class="stringliteral">&quot; connected to USB hub device = &#39;&quot;</span> &lt;&lt; deviceName &lt;&lt; <span class="stringliteral">&quot;&#39;&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;        <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;      }</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;      _bstr_t b(usbNodeName-&gt;NodeName);</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;      <a class="code" href="classString.xhtml">String</a> nodeName = b;</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;      <a class="code" href="classVoxel_1_1USBSystemPrivate.xhtml#a11c3f6b340a600180de9642fa693955e">_enumerateHub</a>(busIndex, portIndex, nodeName, process);</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;    }</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    <span class="keywordflow">else</span></div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;    {</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;      <a class="code" href="classVoxel_1_1Ptr.xhtml">Ptr&lt;USB_NODE_CONNECTION_DRIVERKEY_NAME&gt;</a> usbNodeName;</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;      <span class="keywordflow">if</span> (!_getDeviceProperty&lt;USB_NODE_CONNECTION_DRIVERKEY_NAME&gt;(hHubDevice, IOCTL_USB_GET_NODE_CONNECTION_DRIVERKEY_NAME, usbNodeName, [index](USB_NODE_CONNECTION_DRIVERKEY_NAME &amp;t) { t.ConnectionIndex = index; }))</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;      {</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;        <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;USBSystem: Could not get node name of device = &quot;</span> &lt;&lt; index &lt;&lt; <span class="stringliteral">&quot; connected to USB hub device = &#39;&quot;</span> &lt;&lt; deviceName &lt;&lt; <span class="stringliteral">&quot;&#39;&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;        <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;      }</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;      _bstr_t b(usbNodeName-&gt;DriverKeyName);</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;      <a class="code" href="classString.xhtml">String</a> driverKeyName = b;</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;      <a class="code" href="classString.xhtml">String</a> product, manufacturer, serialNumber, description;</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;      <span class="keywordtype">bool</span> ret1 = <a class="code" href="classVoxel_1_1USBSystemPrivate.xhtml#ad30c8db8ace81c4954ba33bdbf3b76b0">_getStringDescriptor</a>(hHubDevice, index, connectionInfo-&gt;DeviceDescriptor.iProduct, product);</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;      <span class="keywordtype">bool</span> ret2 = <a class="code" href="classVoxel_1_1USBSystemPrivate.xhtml#ad30c8db8ace81c4954ba33bdbf3b76b0">_getStringDescriptor</a>(hHubDevice, index, connectionInfo-&gt;DeviceDescriptor.iManufacturer, manufacturer);</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;      <span class="keywordtype">bool</span> ret3 = <a class="code" href="classVoxel_1_1USBSystemPrivate.xhtml#ad30c8db8ace81c4954ba33bdbf3b76b0">_getStringDescriptor</a>(hHubDevice, index, connectionInfo-&gt;DeviceDescriptor.iSerialNumber, serialNumber);</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;      <span class="keywordflow">if</span> (!(ret1 &amp;&amp; ret2 &amp;&amp; ret3))</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;      {</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;        <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758ad625895b380d0d8fc7ef71ef75429b7a">LOG_DEBUG</a>) &lt;&lt; <span class="stringliteral">&quot;USBSystem: Could not get request string descriptors for connection index = &quot;</span> &lt;&lt; index &lt;&lt; <span class="stringliteral">&quot; connected to USB hub device = &#39;&quot;</span> &lt;&lt; deviceName &lt;&lt; <span class="stringliteral">&quot;&#39;&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;      }</div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;</div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;      <span class="keywordflow">if</span> (manufacturer.size() &amp;&amp; product.size())</div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;        description = manufacturer + <span class="stringliteral">&quot; - &quot;</span> + product;</div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (manufacturer.size())</div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        description = manufacturer;</div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (product.size())</div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;        description = product;</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;      </div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;      <span class="keywordflow">if</span> (process)</div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;        process(hHubDevice, index, driverKeyName, <a class="code" href="group__CamSys.xhtml#ga8b8c5a5f71759c97cc49332cfeb89d79">DevicePtr</a>(<span class="keyword">new</span> <a class="code" href="classVoxel_1_1USBDevice.xhtml">USBDevice</a>(connectionInfo-&gt;DeviceDescriptor.idVendor, connectionInfo-&gt;DeviceDescriptor.idProduct, serialNumber, -1, description, std::to_string(busIndex) + <span class="stringliteral">&quot;:&quot;</span> + portIndex)));</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;    }</div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;  }</div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;</div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;  CloseHandle(hHubDevice);</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;}</div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;</div>
<div class="line"><a name="l00263"></a><span class="lineno"><a class="line" href="classVoxel_1_1USBSystemPrivate.xhtml#ad30c8db8ace81c4954ba33bdbf3b76b0">  263</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classVoxel_1_1USBSystemPrivate.xhtml#ad30c8db8ace81c4954ba33bdbf3b76b0">USBSystemPrivate::_getStringDescriptor</a>(<a class="code" href="group__IO.xhtml#ga6758195ba2a8511818a354eab109583f">HANDLE</a> devHandle, <a class="code" href="group__IO.xhtml#ga9c6ee30a321d6103b2a9842ac25327cf">ULONG</a> index, <a class="code" href="group__IO.xhtml#ga2f990e0ad4972e379a182e42f55d6509">UCHAR</a> descriptorIndex, <a class="code" href="classString.xhtml">String</a> &amp;descriptor)</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;{</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;  <a class="code" href="group__IO.xhtml#ga9c6ee30a321d6103b2a9842ac25327cf">ULONG</a>   nBytes = <span class="keyword">sizeof</span>(USB_DESCRIPTOR_REQUEST) + MAXIMUM_USB_STRING_LENGTH;</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;  <a class="code" href="group__IO.xhtml#ga9c6ee30a321d6103b2a9842ac25327cf">ULONG</a>   nBytesReturned = 0;</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;  <span class="keywordflow">if</span> (descriptorIndex == 0) <span class="comment">// No descriptor available</span></div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;  {</div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    descriptor.clear();</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;  }</div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;  <a class="code" href="classVoxel_1_1Ptr.xhtml">Ptr&lt;USB_DESCRIPTOR_REQUEST&gt;</a> request = byteAlloc&lt;USB_DESCRIPTOR_REQUEST&gt;(nBytes);</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;  USB_STRING_DESCRIPTOR *stringDescriptor = (USB_STRING_DESCRIPTOR *)(request.get() + 1); <span class="comment">// Appended to the end after sizeof(USB_DESCRIPTOR_REQUEST)</span></div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;  <span class="comment">// Zero fill the entire request structure</span></div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;  <span class="comment">//</span></div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;  memset(request.get(), 0, nBytes);</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;  <span class="comment">// Indicate the port from which the descriptor will be requested</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;  <span class="comment">//</span></div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;  request-&gt;ConnectionIndex = index;</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;  <span class="comment">//</span></div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;  <span class="comment">// USBHUB uses URB_FUNCTION_GET_DESCRIPTOR_FROM_DEVICE to process this</span></div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;  <span class="comment">// IOCTL_USB_GET_DESCRIPTOR_FROM_NODE_CONNECTION request.</span></div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;  <span class="comment">//</span></div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;  <span class="comment">// USBD will automatically initialize these fields:</span></div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;  <span class="comment">//     bmRequest = 0x80</span></div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;  <span class="comment">//     bRequest  = 0x06</span></div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;  <span class="comment">//</span></div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;  <span class="comment">// We must inititialize these fields:</span></div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;  <span class="comment">//     wValue    = Descriptor Type (high) and Descriptor Index (low byte)</span></div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;  <span class="comment">//     wIndex    = Zero (or Language ID for String Descriptors)</span></div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;  <span class="comment">//     wLength   = Length of descriptor buffer</span></div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;  <span class="comment">//</span></div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;  request-&gt;SetupPacket.wValue = (USB_STRING_DESCRIPTOR_TYPE &lt;&lt; 8) | descriptorIndex;</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;  request-&gt;SetupPacket.wIndex = 0; <span class="comment">// Using language ID zero</span></div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;  request-&gt;SetupPacket.wLength = (USHORT)(nBytes - <span class="keyword">sizeof</span>(USB_DESCRIPTOR_REQUEST));</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;</div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;  <span class="comment">// Now issue the get descriptor request.</span></div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;  <span class="comment">//</span></div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;  <span class="keywordflow">if</span> (!DeviceIoControl(devHandle, IOCTL_USB_GET_DESCRIPTOR_FROM_NODE_CONNECTION, &amp;*request, nBytes, &amp;*request, nBytes, &amp;nBytesReturned, NULL))</div>
<div class="line"><a name="l00308"></a><span class="lineno">  308</span>&#160;  {</div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;    <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758ad625895b380d0d8fc7ef71ef75429b7a">LOG_DEBUG</a>) &lt;&lt; <span class="stringliteral">&quot;USBSystem: Could not get string descriptor = &quot;</span> &lt;&lt; (uint)descriptorIndex &lt;&lt; <span class="stringliteral">&quot; for connection index = &quot;</span> &lt;&lt; index &lt;&lt; std::endl;</div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;  }</div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;</div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;  <span class="keywordflow">if</span> (nBytesReturned &lt; 2 || stringDescriptor-&gt;bDescriptorType != USB_STRING_DESCRIPTOR_TYPE || </div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;    (stringDescriptor-&gt;bLength != nBytesReturned - <span class="keyword">sizeof</span>(USB_DESCRIPTOR_REQUEST)) || </div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;    stringDescriptor-&gt;bLength % 2 != 0)</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;  {</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;    <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758ad625895b380d0d8fc7ef71ef75429b7a">LOG_DEBUG</a>) &lt;&lt; <span class="stringliteral">&quot;USBSystem: Got invalid string descriptor = &quot;</span> &lt;&lt; (uint)descriptorIndex &lt;&lt; <span class="stringliteral">&quot; for connection index = &quot;</span> &lt;&lt; index &lt;&lt; std::endl;</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;    <span class="keywordflow">return</span> <span class="keyword">false</span>;</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;  }</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;</div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;  _bstr_t b(stringDescriptor-&gt;bString);</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;  descriptor = b;</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;  </div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;  <span class="keywordflow">return</span> <span class="keyword">true</span>;</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;}</div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;</div>
<div class="line"><a name="l00327"></a><span class="lineno"><a class="line" href="classVoxel_1_1USBSystemPrivate.xhtml#aa1eb26db84e2fd635daf8489a09815ec">  327</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classVoxel_1_1USBSystemPrivate.xhtml#aa1eb26db84e2fd635daf8489a09815ec">USBSystemPrivate::_iterateOverAllDevices</a>(LPGUID guid, <a class="code" href="group__Util.xhtml#ga8aaf1e39b1b92e5f2ae6cf09d3ca0623">Function</a>&lt;<span class="keywordtype">void</span>(<a class="code" href="group__IO.xhtml#ga6758195ba2a8511818a354eab109583f">HANDLE</a> hubDevice, <a class="code" href="group__IO.xhtml#ga9c6ee30a321d6103b2a9842ac25327cf">ULONG</a> portIndex, <span class="keyword">const</span> <a class="code" href="classString.xhtml">String</a> &amp;driverKeyName, <a class="code" href="classVoxel_1_1Ptr.xhtml">DevicePtr</a> &amp;device)&gt; process)</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;{</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="classVoxel_1_1USBSystemPrivate.xhtml#af36cb7f956e2d2a79a9912b725ebada9">_iterateSetupAPI</a>(guid, [<span class="keyword">this</span>, &amp;process](<a class="code" href="group__IO.xhtml#gaafe7976c9e3804692025b8cc7317ff8e">HDEVINFO</a> devClassInfo, <a class="code" href="structVoxel_1_1DeviceInfo.xhtml">DeviceInfo</a> &amp;devInfo, <a class="code" href="group__IO.xhtml#ga9c6ee30a321d6103b2a9842ac25327cf">ULONG</a> hubIndex) {</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;    <a class="code" href="group__IO.xhtml#ga6758195ba2a8511818a354eab109583f">HANDLE</a> hHCDev = CreateFile(devInfo.<a class="code" href="structVoxel_1_1DeviceInfo.xhtml#abb44270c0c9e74101614ee53a165469f">devInterfaceDetailData</a>-&gt;DevicePath, GENERIC_WRITE, FILE_SHARE_WRITE, NULL, OPEN_EXISTING, 0, NULL);</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;    <span class="keywordflow">if</span> (hHCDev != INVALID_HANDLE_VALUE)</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;    {</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;      <a class="code" href="classVoxel_1_1Ptr.xhtml">Ptr&lt;USB_ROOT_HUB_NAME&gt;</a> rootHubName;</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;      <span class="keywordflow">if</span> (!<a class="code" href="classVoxel_1_1USBSystemPrivate.xhtml#a5cc528607175a1d2848e99cac4b29b96">_getDeviceProperty</a>(hHCDev, IOCTL_USB_GET_ROOT_HUB_NAME, rootHubName))</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;      _bstr_t b(rootHubName-&gt;RootHubName);</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;      </div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;      <a class="code" href="classString.xhtml">String</a> hubName = b;</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;      <a class="code" href="classVoxel_1_1USBSystemPrivate.xhtml#a11c3f6b340a600180de9642fa693955e">_enumerateHub</a>(hubIndex + 1, <span class="stringliteral">&quot;&quot;</span>, hubName, process);</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;    }</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;    CloseHandle(hHCDev);</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;  });</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;}</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;<a class="code" href="group__Util.xhtml#ga8a21cf7475356ae552da8952ebf885b4">Vector&lt;DevicePtr&gt;</a> <a class="code" href="classVoxel_1_1USBSystemPrivate.xhtml#a977ddcd8cd9508c4b598b6f00c89d2a6">USBSystemPrivate::getDevices</a>()</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;{</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;  <a class="code" href="group__Util.xhtml#ga8a21cf7475356ae552da8952ebf885b4">Vector&lt;DevicePtr&gt;</a> <a class="code" href="namespaceCameraSystemTest.xhtml#a9e6d1e12787c05f7e4190828d4d2bfa5">devices</a>;</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;  devices.reserve(10); <span class="comment">// Reserve some 10 slots</span></div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;  <span class="keywordtype">bool</span> ret = <a class="code" href="classVoxel_1_1USBSystemPrivate.xhtml#aa1eb26db84e2fd635daf8489a09815ec">_iterateOverAllDevices</a>((LPGUID)&amp;GUID_CLASS_USB_HOST_CONTROLLER, [&amp;devices](<a class="code" href="group__IO.xhtml#ga6758195ba2a8511818a354eab109583f">HANDLE</a> hubDevice, <a class="code" href="group__IO.xhtml#ga9c6ee30a321d6103b2a9842ac25327cf">ULONG</a> portIndex, <span class="keyword">const</span> <a class="code" href="classString.xhtml">String</a> &amp;driverKeyName, <a class="code" href="classVoxel_1_1Ptr.xhtml">DevicePtr</a> &amp;device) {</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;    devices.push_back(device);</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;  });</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="namespaceCameraSystemTest.xhtml#a9e6d1e12787c05f7e4190828d4d2bfa5">devices</a>;</div>
<div class="line"><a name="l00359"></a><span class="lineno">  359</span>&#160;}</div>
<div class="line"><a name="l00360"></a><span class="lineno">  360</span>&#160;</div>
<div class="line"><a name="l00361"></a><span class="lineno">  361</span>&#160;<a class="code" href="classString.xhtml">String</a> <a class="code" href="classVoxel_1_1USBSystemPrivate.xhtml#af6f114a79ec61cc4815afc7828a84f85">USBSystemPrivate::getDeviceNode</a>(<span class="keyword">const</span> USBDevice &amp;usbd)</div>
<div class="line"><a name="l00362"></a><span class="lineno">  362</span>&#160;{</div>
<div class="line"><a name="l00363"></a><span class="lineno">  363</span>&#160;  Map&lt;String, DeviceInfo&gt; deviceMap; <span class="comment">// driver key name -&gt; DeviceInfo map</span></div>
<div class="line"><a name="l00364"></a><span class="lineno">  364</span>&#160;</div>
<div class="line"><a name="l00365"></a><span class="lineno">  365</span>&#160;  <span class="keywordtype">bool</span> ret = <a class="code" href="classVoxel_1_1USBSystemPrivate.xhtml#af36cb7f956e2d2a79a9912b725ebada9">_iterateSetupAPI</a>((LPGUID)&amp;GUID_DEVINTERFACE_USB_DEVICE, [<span class="keyword">this</span>, &amp;deviceMap](<a class="code" href="group__IO.xhtml#gaafe7976c9e3804692025b8cc7317ff8e">HDEVINFO</a> devClassInfo, DeviceInfo &amp;devInfo, <a class="code" href="group__IO.xhtml#ga9c6ee30a321d6103b2a9842ac25327cf">ULONG</a> hubIndex) {</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;    <a class="code" href="classString.xhtml">String</a> driverKeyName;</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;    <span class="keywordflow">if</span> (!<a class="code" href="classVoxel_1_1USBSystemPrivate.xhtml#a5cc528607175a1d2848e99cac4b29b96">_getDeviceProperty</a>(devClassInfo, devInfo, SPDRP_DRIVER, driverKeyName))</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;    {</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;      <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;USBSystem: Failed to driver key name for index = &quot;</span> &lt;&lt; hubIndex &lt;&lt; <span class="stringliteral">&quot;. Error = &quot;</span> &lt;&lt; <a class="code" href="group__IO.xhtml#gab6c3a2c7db631983faa923d68084fb1d">getDeviceError</a>() &lt;&lt; std::endl;</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;      <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;    }</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;    <span class="keywordflow">if</span> (!driverKeyName.size())</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;    {</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;      <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">LOG_ERROR</a>) &lt;&lt; <span class="stringliteral">&quot;USBSystem: Got blank driver key name for index = &quot;</span> &lt;&lt; hubIndex &lt;&lt; <span class="stringliteral">&quot;. Error = &quot;</span> &lt;&lt; <a class="code" href="group__IO.xhtml#gab6c3a2c7db631983faa923d68084fb1d">getDeviceError</a>() &lt;&lt; std::endl;</div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;      <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;    }</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    deviceMap[driverKeyName] = devInfo;</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;  });</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;  </div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;  <span class="keywordflow">if</span> (!ret)</div>
<div class="line"><a name="l00384"></a><span class="lineno">  384</span>&#160;    <span class="keywordflow">return</span> <span class="stringliteral">&quot;&quot;</span>;</div>
<div class="line"><a name="l00385"></a><span class="lineno">  385</span>&#160;</div>
<div class="line"><a name="l00386"></a><span class="lineno">  386</span>&#160;  <a class="code" href="classString.xhtml">String</a> deviceNodePath;</div>
<div class="line"><a name="l00387"></a><span class="lineno">  387</span>&#160;</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;  <span class="keywordtype">bool</span> pathSet = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;  ret = <a class="code" href="classVoxel_1_1USBSystemPrivate.xhtml#aa1eb26db84e2fd635daf8489a09815ec">_iterateOverAllDevices</a>((LPGUID)&amp;GUID_CLASS_USB_HOST_CONTROLLER, [&amp;usbd, &amp;deviceNodePath, &amp;pathSet, &amp;deviceMap](<a class="code" href="group__IO.xhtml#ga6758195ba2a8511818a354eab109583f">HANDLE</a> hubDevice, <a class="code" href="group__IO.xhtml#ga9c6ee30a321d6103b2a9842ac25327cf">ULONG</a> portIndex, <span class="keyword">const</span> <a class="code" href="classString.xhtml">String</a> &amp;driverKeyName, <a class="code" href="group__CamSys.xhtml#ga8b8c5a5f71759c97cc49332cfeb89d79">DevicePtr</a> &amp;device) {</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;</div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;    <span class="keywordflow">if</span> (pathSet)</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;      <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;    <span class="keywordflow">if</span> (device-&gt;interfaceID() != <a class="code" href="classVoxel_1_1Device.xhtml#a09e82a2c8801d91a67a0c3ae96434e90a8d880d4b536ed3803739132c2e5e0551">Device::USB</a>)</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;      <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    USBDevice &amp;u = (USBDevice &amp;)*device;</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;    <span class="keywordflow">if</span> (usbd.vendorID() == u.vendorID() &amp;&amp; usbd.productID() == u.productID() &amp;&amp;</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;      (!usbd.serialNumber().size() || usbd.serialNumber() == u.serialNumber()))</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    {</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;      <span class="keyword">auto</span> d = deviceMap.find(driverKeyName);</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;      <span class="keywordflow">if</span> (d == deviceMap.end())</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;      {</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;        <a class="code" href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">logger</a>(<a class="code" href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758ad0982c0e5a750625d98e16b2877dedd8">LOG_WARNING</a>) &lt;&lt; <span class="stringliteral">&quot;USBSystem: Got null entry in driver key name = &quot;</span> &lt;&lt; driverKeyName &lt;&lt; <span class="stringliteral">&quot;. Ignoring this device&quot;</span> &lt;&lt; std::endl;</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;        <span class="keywordflow">return</span>;</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;      }</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;</div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;      deviceNodePath = d-&gt;second.devInterfaceDetailData-&gt;DevicePath;</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;      pathSet = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;    }</div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;  });</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;</div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;  <span class="keywordflow">return</span> deviceNodePath;</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;}</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;</div>
<div class="line"><a name="l00418"></a><span class="lineno"><a class="line" href="classVoxel_1_1USBSystemPrivate.xhtml#a8ead463f7493be6e73587a31d7b0f04b">  418</a></span>&#160;<span class="keywordtype">bool</span> <a class="code" href="classVoxel_1_1USBSystemPrivate.xhtml#a8ead463f7493be6e73587a31d7b0f04b">USBSystemPrivate::getDevInst</a>(<span class="keyword">const</span> <a class="code" href="classString.xhtml">String</a> &amp;devicePath, <a class="code" href="group__IO.xhtml#ga21dc16e4a3028a99c0be8f3943bfb699">DWORD</a> &amp;devInst, LPGUID guid)</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;{</div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;  <span class="keywordtype">bool</span> devInstSet = <span class="keyword">false</span>;</div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;  <span class="keywordtype">bool</span> ret = <a class="code" href="classVoxel_1_1USBSystemPrivate.xhtml#af36cb7f956e2d2a79a9912b725ebada9">_iterateSetupAPI</a>(guid, [<span class="keyword">this</span>, &amp;devicePath, &amp;devInst, &amp;devInstSet](<a class="code" href="group__IO.xhtml#gaafe7976c9e3804692025b8cc7317ff8e">HDEVINFO</a> devClassInfo, <a class="code" href="structVoxel_1_1DeviceInfo.xhtml">DeviceInfo</a> &amp;devInfo, <a class="code" href="group__IO.xhtml#ga9c6ee30a321d6103b2a9842ac25327cf">ULONG</a> hubIndex) {</div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;    </div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;    _bstr_t b(devInfo.<a class="code" href="structVoxel_1_1DeviceInfo.xhtml#abb44270c0c9e74101614ee53a165469f">devInterfaceDetailData</a>-&gt;DevicePath);</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    <a class="code" href="classString.xhtml">String</a> devPath = b;</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    <span class="keywordflow">if</span> (!devInstSet &amp;&amp; devPath == devicePath)</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;    {</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;      devInst = devInfo.<a class="code" href="structVoxel_1_1DeviceInfo.xhtml#a1061ff33869e063fb23d7cb8987c6a65">devInfo</a>.DevInst;</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;      devInstSet = <span class="keyword">true</span>;</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;    }</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;  });</div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;</div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;  <span class="keywordflow">return</span> devInstSet;</div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;}</div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;}</div>
<div class="ttc" id="group__IO_xhtml_gab6c3a2c7db631983faa923d68084fb1d"><div class="ttname"><a href="group__IO.xhtml#gab6c3a2c7db631983faa923d68084fb1d">Voxel::getDeviceError</a></div><div class="ttdeci">std::string getDeviceError()</div><div class="ttdef"><b>Definition:</b> <a href="USBSystemPrivateWindows_8cpp_source.xhtml#l00023">USBSystemPrivateWindows.cpp:23</a></div></div>
<div class="ttc" id="group__Util_xhtml_gga3b552e0c33cfe1ca3a0752dbd986b758ad0982c0e5a750625d98e16b2877dedd8"><div class="ttname"><a href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758ad0982c0e5a750625d98e16b2877dedd8">Voxel::LOG_WARNING</a></div><div class="ttdef"><b>Definition:</b> <a href="Logger_8h_source.xhtml#l00028">Logger.h:28</a></div></div>
<div class="ttc" id="classVoxel_1_1USBSystemPrivate_xhtml_af6f114a79ec61cc4815afc7828a84f85"><div class="ttname"><a href="classVoxel_1_1USBSystemPrivate.xhtml#af6f114a79ec61cc4815afc7828a84f85">Voxel::USBSystemPrivate::getDeviceNode</a></div><div class="ttdeci">String getDeviceNode(const USBDevice &amp;usbd)</div><div class="ttdef"><b>Definition:</b> <a href="USBSystemPrivateLinux_8cpp_source.xhtml#l00163">USBSystemPrivateLinux.cpp:163</a></div></div>
<div class="ttc" id="classVoxel_1_1USBSystemPrivate_xhtml_aa1eb26db84e2fd635daf8489a09815ec"><div class="ttname"><a href="classVoxel_1_1USBSystemPrivate.xhtml#aa1eb26db84e2fd635daf8489a09815ec">Voxel::USBSystemPrivate::_iterateOverAllDevices</a></div><div class="ttdeci">bool _iterateOverAllDevices(LPGUID guid, Function&lt; void(HANDLE hubDevice, ULONG portIndex, const String &amp;driverKeyName, DevicePtr &amp;device)&gt; process)</div><div class="ttdef"><b>Definition:</b> <a href="USBSystemPrivateWindows_8cpp_source.xhtml#l00327">USBSystemPrivateWindows.cpp:327</a></div></div>
<div class="ttc" id="group__Util_xhtml_gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0"><div class="ttname"><a href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758af4c6ba01016461e517b94a39b66be0b0">Voxel::LOG_ERROR</a></div><div class="ttdef"><b>Definition:</b> <a href="Logger_8h_source.xhtml#l00027">Logger.h:27</a></div></div>
<div class="ttc" id="classVoxel_1_1Device_xhtml_a09e82a2c8801d91a67a0c3ae96434e90a8d880d4b536ed3803739132c2e5e0551"><div class="ttname"><a href="classVoxel_1_1Device.xhtml#a09e82a2c8801d91a67a0c3ae96434e90a8d880d4b536ed3803739132c2e5e0551">Voxel::Device::USB</a></div><div class="ttdef"><b>Definition:</b> <a href="Device_8h_source.xhtml#l00024">Device.h:24</a></div></div>
<div class="ttc" id="group__Util_xhtml_ga8a21cf7475356ae552da8952ebf885b4"><div class="ttname"><a href="group__Util.xhtml#ga8a21cf7475356ae552da8952ebf885b4">Voxel::Vector</a></div><div class="ttdeci">std::vector&lt; T &gt; Vector</div><div class="ttdef"><b>Definition:</b> <a href="Common_8h_source.xhtml#l00051">Common.h:51</a></div></div>
<div class="ttc" id="group__CamSys_xhtml_ga8b8c5a5f71759c97cc49332cfeb89d79"><div class="ttname"><a href="group__CamSys.xhtml#ga8b8c5a5f71759c97cc49332cfeb89d79">Voxel::DevicePtr</a></div><div class="ttdeci">Ptr&lt; Device &gt; DevicePtr</div><div class="ttdef"><b>Definition:</b> <a href="Device_8h_source.xhtml#l00079">Device.h:79</a></div></div>
<div class="ttc" id="classVoxel_1_1USBSystemPrivate_xhtml_a11c3f6b340a600180de9642fa693955e"><div class="ttname"><a href="classVoxel_1_1USBSystemPrivate.xhtml#a11c3f6b340a600180de9642fa693955e">Voxel::USBSystemPrivate::_enumerateHub</a></div><div class="ttdeci">void _enumerateHub(int busIndex, const String &amp;hubIndex, const String &amp;hubName, Function&lt; void(HANDLE hubDevice, ULONG portIndex, const String &amp;driverKeyName, DevicePtr &amp;device)&gt; process)</div><div class="ttdef"><b>Definition:</b> <a href="USBSystemPrivateWindows_8cpp_source.xhtml#l00164">USBSystemPrivateWindows.cpp:164</a></div></div>
<div class="ttc" id="classVoxel_1_1Ptr_xhtml"><div class="ttname"><a href="classVoxel_1_1Ptr.xhtml">Voxel::Ptr&lt; SP_DEVICE_INTERFACE_DETAIL_DATA &gt;</a></div></div>
<div class="ttc" id="structVoxel_1_1DeviceInfo_xhtml_a1061ff33869e063fb23d7cb8987c6a65"><div class="ttname"><a href="structVoxel_1_1DeviceInfo.xhtml#a1061ff33869e063fb23d7cb8987c6a65">Voxel::DeviceInfo::devInfo</a></div><div class="ttdeci">SP_DEVINFO_DATA devInfo</div><div class="ttdef"><b>Definition:</b> <a href="USBSystemPrivateWindows_8cpp_source.xhtml#l00018">USBSystemPrivateWindows.cpp:18</a></div></div>
<div class="ttc" id="classVoxel_1_1USBSystemPrivate_xhtml_a5cc528607175a1d2848e99cac4b29b96"><div class="ttname"><a href="classVoxel_1_1USBSystemPrivate.xhtml#a5cc528607175a1d2848e99cac4b29b96">Voxel::USBSystemPrivate::_getDeviceProperty</a></div><div class="ttdeci">bool _getDeviceProperty(HDEVINFO devClassInfo, DeviceInfo &amp;devInfo, DWORD prop, String &amp;result)</div><div class="ttdef"><b>Definition:</b> <a href="USBSystemPrivateWindows_8cpp_source.xhtml#l00062">USBSystemPrivateWindows.cpp:62</a></div></div>
<div class="ttc" id="classVoxel_1_1USBSystemPrivate_xhtml_a8ead463f7493be6e73587a31d7b0f04b"><div class="ttname"><a href="classVoxel_1_1USBSystemPrivate.xhtml#a8ead463f7493be6e73587a31d7b0f04b">Voxel::USBSystemPrivate::getDevInst</a></div><div class="ttdeci">bool getDevInst(const String &amp;devicePath, DWORD &amp;devInst, LPGUID guid=(LPGUID)&amp;GUID_CLASS_USB_DEVICE)</div><div class="ttdef"><b>Definition:</b> <a href="USBSystemPrivateWindows_8cpp_source.xhtml#l00418">USBSystemPrivateWindows.cpp:418</a></div></div>
<div class="ttc" id="group__IO_xhtml_ga6758195ba2a8511818a354eab109583f"><div class="ttname"><a href="group__IO.xhtml#ga6758195ba2a8511818a354eab109583f">Voxel::HANDLE</a></div><div class="ttdeci">void * HANDLE</div><div class="ttdef"><b>Definition:</b> <a href="USBSystemPrivateWindows_8h_source.xhtml#l00028">USBSystemPrivateWindows.h:28</a></div></div>
<div class="ttc" id="group__IO_xhtml_ga21dc16e4a3028a99c0be8f3943bfb699"><div class="ttname"><a href="group__IO.xhtml#ga21dc16e4a3028a99c0be8f3943bfb699">Voxel::DWORD</a></div><div class="ttdeci">unsigned long DWORD</div><div class="ttdef"><b>Definition:</b> <a href="USBSystemPrivateWindows_8h_source.xhtml#l00031">USBSystemPrivateWindows.h:31</a></div></div>
<div class="ttc" id="group__IO_xhtml_ga9c6ee30a321d6103b2a9842ac25327cf"><div class="ttname"><a href="group__IO.xhtml#ga9c6ee30a321d6103b2a9842ac25327cf">Voxel::ULONG</a></div><div class="ttdeci">unsigned long ULONG</div><div class="ttdef"><b>Definition:</b> <a href="USBSystemPrivateWindows_8h_source.xhtml#l00032">USBSystemPrivateWindows.h:32</a></div></div>
<div class="ttc" id="group__Util_xhtml_ga8aaf1e39b1b92e5f2ae6cf09d3ca0623"><div class="ttname"><a href="group__Util.xhtml#ga8aaf1e39b1b92e5f2ae6cf09d3ca0623">Voxel::Function</a></div><div class="ttdeci">std::function&lt; T &gt; Function</div><div class="ttdef"><b>Definition:</b> <a href="Common_8h_source.xhtml#l00063">Common.h:63</a></div></div>
<div class="ttc" id="classVoxel_1_1USBSystemPrivate_xhtml_ad30c8db8ace81c4954ba33bdbf3b76b0"><div class="ttname"><a href="classVoxel_1_1USBSystemPrivate.xhtml#ad30c8db8ace81c4954ba33bdbf3b76b0">Voxel::USBSystemPrivate::_getStringDescriptor</a></div><div class="ttdeci">bool _getStringDescriptor(HANDLE devHandle, ULONG index, UCHAR descriptorIndex, String &amp;descriptor)</div><div class="ttdef"><b>Definition:</b> <a href="USBSystemPrivateWindows_8cpp_source.xhtml#l00263">USBSystemPrivateWindows.cpp:263</a></div></div>
<div class="ttc" id="Logger_8h_xhtml"><div class="ttname"><a href="Logger_8h.xhtml">Logger.h</a></div></div>
<div class="ttc" id="structVoxel_1_1DeviceInfo_xhtml_abb44270c0c9e74101614ee53a165469f"><div class="ttname"><a href="structVoxel_1_1DeviceInfo.xhtml#abb44270c0c9e74101614ee53a165469f">Voxel::DeviceInfo::devInterfaceDetailData</a></div><div class="ttdeci">Ptr&lt; SP_DEVICE_INTERFACE_DETAIL_DATA &gt; devInterfaceDetailData</div><div class="ttdef"><b>Definition:</b> <a href="USBSystemPrivateWindows_8cpp_source.xhtml#l00020">USBSystemPrivateWindows.cpp:20</a></div></div>
<div class="ttc" id="group__IO_xhtml_gaafe7976c9e3804692025b8cc7317ff8e"><div class="ttname"><a href="group__IO.xhtml#gaafe7976c9e3804692025b8cc7317ff8e">Voxel::HDEVINFO</a></div><div class="ttdeci">void * HDEVINFO</div><div class="ttdef"><b>Definition:</b> <a href="USBSystemPrivateWindows_8h_source.xhtml#l00030">USBSystemPrivateWindows.h:30</a></div></div>
<div class="ttc" id="structVoxel_1_1DeviceInfo_xhtml_a0a2581d443580864ae2c630dc58133c2"><div class="ttname"><a href="structVoxel_1_1DeviceInfo.xhtml#a0a2581d443580864ae2c630dc58133c2">Voxel::DeviceInfo::devInterfaceData</a></div><div class="ttdeci">SP_DEVICE_INTERFACE_DATA devInterfaceData</div><div class="ttdef"><b>Definition:</b> <a href="USBSystemPrivateWindows_8cpp_source.xhtml#l00019">USBSystemPrivateWindows.cpp:19</a></div></div>
<div class="ttc" id="structVoxel_1_1DeviceInfo_xhtml"><div class="ttname"><a href="structVoxel_1_1DeviceInfo.xhtml">Voxel::DeviceInfo</a></div><div class="ttdef"><b>Definition:</b> <a href="USBSystemPrivateWindows_8cpp_source.xhtml#l00016">USBSystemPrivateWindows.cpp:16</a></div></div>
<div class="ttc" id="namespaceCameraSystemTest_xhtml_a9e6d1e12787c05f7e4190828d4d2bfa5"><div class="ttname"><a href="namespaceCameraSystemTest.xhtml#a9e6d1e12787c05f7e4190828d4d2bfa5">CameraSystemTest.devices</a></div><div class="ttdeci">tuple devices</div><div class="ttdef"><b>Definition:</b> <a href="CameraSystemTest_8py_source.xhtml#l00012">CameraSystemTest.py:12</a></div></div>
<div class="ttc" id="group__Util_xhtml_gabd012fcbae5565e03008afef1fd4f261"><div class="ttname"><a href="group__Util.xhtml#gabd012fcbae5565e03008afef1fd4f261">Voxel::logger</a></div><div class="ttdeci">Logger logger(LOG_WARNING)</div><div class="ttdef"><b>Definition:</b> <a href="Logger_8h_source.xhtml#l00180">Logger.h:180</a></div></div>
<div class="ttc" id="USBSystemPrivateWindows_8h_xhtml"><div class="ttname"><a href="USBSystemPrivateWindows_8h.xhtml">USBSystemPrivateWindows.h</a></div></div>
<div class="ttc" id="group__Util_xhtml_gga3b552e0c33cfe1ca3a0752dbd986b758ad625895b380d0d8fc7ef71ef75429b7a"><div class="ttname"><a href="group__Util.xhtml#gga3b552e0c33cfe1ca3a0752dbd986b758ad625895b380d0d8fc7ef71ef75429b7a">Voxel::LOG_DEBUG</a></div><div class="ttdef"><b>Definition:</b> <a href="Logger_8h_source.xhtml#l00030">Logger.h:30</a></div></div>
<div class="ttc" id="group__IO_xhtml_ga2f990e0ad4972e379a182e42f55d6509"><div class="ttname"><a href="group__IO.xhtml#ga2f990e0ad4972e379a182e42f55d6509">Voxel::UCHAR</a></div><div class="ttdeci">unsigned char UCHAR</div><div class="ttdef"><b>Definition:</b> <a href="USBSystemPrivateWindows_8h_source.xhtml#l00033">USBSystemPrivateWindows.h:33</a></div></div>
<div class="ttc" id="classVoxel_1_1USBSystemPrivate_xhtml_ac06767c16a91d626f545f7463f977c21"><div class="ttname"><a href="classVoxel_1_1USBSystemPrivate.xhtml#ac06767c16a91d626f545f7463f977c21">Voxel::USBSystemPrivate::isInitialized</a></div><div class="ttdeci">bool isInitialized()</div><div class="ttdef"><b>Definition:</b> <a href="USBSystemPrivateLinux_8h_source.xhtml#l00044">USBSystemPrivateLinux.h:44</a></div></div>
<div class="ttc" id="classVoxel_1_1USBSystemPrivate_xhtml_a977ddcd8cd9508c4b598b6f00c89d2a6"><div class="ttname"><a href="classVoxel_1_1USBSystemPrivate.xhtml#a977ddcd8cd9508c4b598b6f00c89d2a6">Voxel::USBSystemPrivate::getDevices</a></div><div class="ttdeci">Vector&lt; DevicePtr &gt; getDevices()</div><div class="ttdef"><b>Definition:</b> <a href="USBSystemPrivateLinux_8cpp_source.xhtml#l00015">USBSystemPrivateLinux.cpp:15</a></div></div>
<div class="ttc" id="classString_xhtml"><div class="ttname"><a href="classString.xhtml">String</a></div></div>
<div class="ttc" id="classVoxel_1_1USBSystemPrivate_xhtml_af36cb7f956e2d2a79a9912b725ebada9"><div class="ttname"><a href="classVoxel_1_1USBSystemPrivate.xhtml#af36cb7f956e2d2a79a9912b725ebada9">Voxel::USBSystemPrivate::_iterateSetupAPI</a></div><div class="ttdeci">bool _iterateSetupAPI(LPGUID guid, Function&lt; void(HDEVINFO devClassInfo, DeviceInfo &amp;devInfo, ULONG hubIndex)&gt; process)</div><div class="ttdef"><b>Definition:</b> <a href="USBSystemPrivateWindows_8cpp_source.xhtml#l00106">USBSystemPrivateWindows.cpp:106</a></div></div>
<div class="ttc" id="classVoxel_1_1USBDevice_xhtml"><div class="ttname"><a href="classVoxel_1_1USBDevice.xhtml">Voxel::USBDevice</a></div><div class="ttdef"><b>Definition:</b> <a href="Device_8h_source.xhtml#l00081">Device.h:81</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Sun Sep 27 2015 19:36:57 for Voxel by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.7
</small></address>
</body>
</html>
