<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.6"/>
<title>Voxel: LineNoise.cpp Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { searchBox.OnSelectItem(0); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Voxel
   &#160;<span id="projectnumber">0.5.0</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.6 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="modules.xhtml"><span>Modules</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Classes</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>File&#160;Members</span></a></li>
    </ul>
  </div>
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
<a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(0)"><span class="SelectionMark">&#160;</span>All</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(1)"><span class="SelectionMark">&#160;</span>Classes</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(2)"><span class="SelectionMark">&#160;</span>Namespaces</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(3)"><span class="SelectionMark">&#160;</span>Files</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(4)"><span class="SelectionMark">&#160;</span>Functions</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(5)"><span class="SelectionMark">&#160;</span>Variables</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(6)"><span class="SelectionMark">&#160;</span>Typedefs</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(7)"><span class="SelectionMark">&#160;</span>Enumerations</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(8)"><span class="SelectionMark">&#160;</span>Enumerator</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(9)"><span class="SelectionMark">&#160;</span>Friends</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(10)"><span class="SelectionMark">&#160;</span>Macros</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(11)"><span class="SelectionMark">&#160;</span>Groups</a><a class="SelectItem" href="javascript:void(0)" onclick="searchBox.OnSelectItem(12)"><span class="SelectionMark">&#160;</span>Pages</a></div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div id="nav-path" class="navpath">
  <ul>
<li class="navelem"><a class="el" href="dir_b1617d756d2224e91d37255e84e89ba2.xhtml">App</a></li>  </ul>
</div>
</div><!-- top -->
<div class="header">
  <div class="headertitle">
<div class="title">LineNoise.cpp</div>  </div>
</div><!--header-->
<div class="contents">
<a href="a00269.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/* </span></div>
<div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment">* Modified from the following linenoise source.</span></div>
<div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment">*</span></div>
<div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment">* Copyright (c) 2014 Texas Instruments Inc.</span></div>
<div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment">*</span></div>
<div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment">* ---------------------------------------------------------------------</span></div>
<div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment">* linenoise.c -- guerrilla line editing library against the idea that a</span></div>
<div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment">* line editing lib needs to be 20,000 lines of C code.</span></div>
<div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment">*</span></div>
<div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment">* You can find the latest source code at:</span></div>
<div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment">*</span></div>
<div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment">*   http://github.com/msteveb/linenoise</span></div>
<div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment">*   (forked from http://github.com/antirez/linenoise)</span></div>
<div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment">*</span></div>
<div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment">* Does a number of crazy assumptions that happen to be true in 99.9999% of</span></div>
<div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment">* the 2010 UNIX computers around.</span></div>
<div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment">*</span></div>
<div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment">* ------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment">*</span></div>
<div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment">* Copyright (c) 2010, Salvatore Sanfilippo &lt;antirez at gmail dot com&gt;</span></div>
<div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment">* Copyright (c) 2010, Pieter Noordhuis &lt;pcnoordhuis at gmail dot com&gt;</span></div>
<div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment">* Copyright (c) 2011, Steve Bennett &lt;steveb at workware dot net dot au&gt;</span></div>
<div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment">*</span></div>
<div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="comment">* All rights reserved.</span></div>
<div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="comment">*</span></div>
<div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;<span class="comment">* Redistribution and use in source and binary forms, with or without</span></div>
<div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="comment">* modification, are permitted provided that the following conditions are</span></div>
<div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="comment">* met:</span></div>
<div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="comment">*</span></div>
<div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="comment">*  *  Redistributions of source code must retain the above copyright</span></div>
<div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;<span class="comment">*     notice, this list of conditions and the following disclaimer.</span></div>
<div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="comment">*</span></div>
<div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="comment">*  *  Redistributions in binary form must reproduce the above copyright</span></div>
<div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="comment">*     notice, this list of conditions and the following disclaimer in the</span></div>
<div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;<span class="comment">*     documentation and/or other materials provided with the distribution.</span></div>
<div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="comment">*</span></div>
<div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;<span class="comment">* THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS</span></div>
<div class="line"><a name="l00038"></a><span class="lineno">   38</span>&#160;<span class="comment">* &quot;AS IS&quot; AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT</span></div>
<div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;<span class="comment">* LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR</span></div>
<div class="line"><a name="l00040"></a><span class="lineno">   40</span>&#160;<span class="comment">* A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT</span></div>
<div class="line"><a name="l00041"></a><span class="lineno">   41</span>&#160;<span class="comment">* HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,</span></div>
<div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;<span class="comment">* SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT</span></div>
<div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="comment">* LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,</span></div>
<div class="line"><a name="l00044"></a><span class="lineno">   44</span>&#160;<span class="comment">* DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY</span></div>
<div class="line"><a name="l00045"></a><span class="lineno">   45</span>&#160;<span class="comment">* THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT</span></div>
<div class="line"><a name="l00046"></a><span class="lineno">   46</span>&#160;<span class="comment">* (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE</span></div>
<div class="line"><a name="l00047"></a><span class="lineno">   47</span>&#160;<span class="comment">* OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</span></div>
<div class="line"><a name="l00048"></a><span class="lineno">   48</span>&#160;<span class="comment">*</span></div>
<div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;<span class="comment">* ------------------------------------------------------------------------</span></div>
<div class="line"><a name="l00050"></a><span class="lineno">   50</span>&#160;<span class="comment">*</span></div>
<div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;<span class="comment">* References:</span></div>
<div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;<span class="comment">* - http://invisible-island.net/xterm/ctlseqs/ctlseqs.html</span></div>
<div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;<span class="comment">* - http://www.3waylabs.com/nw/WWW/products/wizcon/vt220.html</span></div>
<div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;<span class="comment">*</span></div>
<div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;<span class="comment">* Bloat:</span></div>
<div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="comment">* - Completion?</span></div>
<div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;<span class="comment">*</span></div>
<div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;<span class="comment">* Unix/termios</span></div>
<div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;<span class="comment">* ------------</span></div>
<div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;<span class="comment">* List of escape sequences used by this program, we do everything just</span></div>
<div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;<span class="comment">* a few sequences. In order to be so cheap we may have some</span></div>
<div class="line"><a name="l00062"></a><span class="lineno">   62</span>&#160;<span class="comment">* flickering effect with some slow terminal, but the lesser sequences</span></div>
<div class="line"><a name="l00063"></a><span class="lineno">   63</span>&#160;<span class="comment">* the more compatible.</span></div>
<div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;<span class="comment">*</span></div>
<div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="comment">* EL (Erase Line)</span></div>
<div class="line"><a name="l00066"></a><span class="lineno">   66</span>&#160;<span class="comment">*    Sequence: ESC [ n K</span></div>
<div class="line"><a name="l00067"></a><span class="lineno">   67</span>&#160;<span class="comment">*    Effect: if n is 0 or missing, clear from cursor to end of line</span></div>
<div class="line"><a name="l00068"></a><span class="lineno">   68</span>&#160;<span class="comment">*    Effect: if n is 1, clear from beginning of line to cursor</span></div>
<div class="line"><a name="l00069"></a><span class="lineno">   69</span>&#160;<span class="comment">*    Effect: if n is 2, clear entire line</span></div>
<div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;<span class="comment">*</span></div>
<div class="line"><a name="l00071"></a><span class="lineno">   71</span>&#160;<span class="comment">* CUF (CUrsor Forward)</span></div>
<div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;<span class="comment">*    Sequence: ESC [ n C</span></div>
<div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;<span class="comment">*    Effect: moves cursor forward of n chars</span></div>
<div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;<span class="comment">*</span></div>
<div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;<span class="comment">* CR (Carriage Return)</span></div>
<div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;<span class="comment">*    Sequence: \r</span></div>
<div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="comment">*    Effect: moves cursor to column 1</span></div>
<div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;<span class="comment">*</span></div>
<div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;<span class="comment">* The following are used to clear the screen: ESC [ H ESC [ 2 J</span></div>
<div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;<span class="comment">* This is actually composed of two sequences:</span></div>
<div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;<span class="comment">*</span></div>
<div class="line"><a name="l00082"></a><span class="lineno">   82</span>&#160;<span class="comment">* cursorhome</span></div>
<div class="line"><a name="l00083"></a><span class="lineno">   83</span>&#160;<span class="comment">*    Sequence: ESC [ H</span></div>
<div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;<span class="comment">*    Effect: moves the cursor to upper left corner</span></div>
<div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="comment">*</span></div>
<div class="line"><a name="l00086"></a><span class="lineno">   86</span>&#160;<span class="comment">* ED2 (Clear entire screen)</span></div>
<div class="line"><a name="l00087"></a><span class="lineno">   87</span>&#160;<span class="comment">*    Sequence: ESC [ 2 J</span></div>
<div class="line"><a name="l00088"></a><span class="lineno">   88</span>&#160;<span class="comment">*    Effect: clear the whole screen</span></div>
<div class="line"><a name="l00089"></a><span class="lineno">   89</span>&#160;<span class="comment">*</span></div>
<div class="line"><a name="l00090"></a><span class="lineno">   90</span>&#160;<span class="comment">* == For highlighting control characters, we also use the following two ==</span></div>
<div class="line"><a name="l00091"></a><span class="lineno">   91</span>&#160;<span class="comment">* SO (enter StandOut)</span></div>
<div class="line"><a name="l00092"></a><span class="lineno">   92</span>&#160;<span class="comment">*    Sequence: ESC [ 7 m</span></div>
<div class="line"><a name="l00093"></a><span class="lineno">   93</span>&#160;<span class="comment">*    Effect: Uses some standout mode such as reverse video</span></div>
<div class="line"><a name="l00094"></a><span class="lineno">   94</span>&#160;<span class="comment">*</span></div>
<div class="line"><a name="l00095"></a><span class="lineno">   95</span>&#160;<span class="comment">* SE (Standout End)</span></div>
<div class="line"><a name="l00096"></a><span class="lineno">   96</span>&#160;<span class="comment">*    Sequence: ESC [ 0 m</span></div>
<div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;<span class="comment">*    Effect: Exit standout mode</span></div>
<div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;<span class="comment">*</span></div>
<div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;<span class="comment">* == Only used if TIOCGWINSZ fails ==</span></div>
<div class="line"><a name="l00100"></a><span class="lineno">  100</span>&#160;<span class="comment">* DSR/CPR (Report cursor position)</span></div>
<div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;<span class="comment">*    Sequence: ESC [ 6 n</span></div>
<div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;<span class="comment">*    Effect: reports current cursor position as ESC [ NNN ; MMM R</span></div>
<div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;<span class="comment">*</span></div>
<div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;<span class="comment">* win32/console</span></div>
<div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;<span class="comment">* -------------</span></div>
<div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="comment">* If __MINGW32__ is defined, the win32 console API is used.</span></div>
<div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;<span class="comment">* This could probably be made to work for the msvc compiler too.</span></div>
<div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;<span class="comment">* This support based in part on work by Jon Griffiths.</span></div>
<div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;</div>
<div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;<span class="preprocessor">#ifdef _WIN32 </span><span class="comment">/* Windows platform, either MinGW or Visual Studio (MSVC) */</span><span class="preprocessor"></span></div>
<div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &lt;windows.h&gt;</span></div>
<div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;<span class="preprocessor">#include &lt;fcntl.h&gt;</span></div>
<div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;<span class="preprocessor">#define USE_WINCONSOLE</span></div>
<div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#ifdef __MINGW32__</span></div>
<div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define HAVE_UNISTD_H</span></div>
<div class="line"><a name="l00117"></a><span class="lineno">  117</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#else</span></div>
<div class="line"><a name="l00118"></a><span class="lineno">  118</span>&#160;<span class="preprocessor"></span><span class="comment">/* Microsoft headers don&#39;t like old POSIX names */</span></div>
<div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;<span class="preprocessor">#define strdup _strdup</span></div>
<div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define snprintf _snprintf</span></div>
<div class="line"><a name="l00121"></a><span class="lineno">  121</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00122"></a><span class="lineno">  122</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#else</span></div>
<div class="line"><a name="l00123"></a><span class="lineno">  123</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &lt;termios.h&gt;</span></div>
<div class="line"><a name="l00124"></a><span class="lineno">  124</span>&#160;<span class="preprocessor">#include &lt;sys/ioctl.h&gt;</span></div>
<div class="line"><a name="l00125"></a><span class="lineno">  125</span>&#160;<span class="preprocessor">#include &lt;sys/poll.h&gt;</span></div>
<div class="line"><a name="l00126"></a><span class="lineno"><a class="line" href="a00269.xhtml#a1f13363249ddaaac0534b43d7378731d">  126</a></span>&#160;<span class="preprocessor">#define USE_TERMIOS</span></div>
<div class="line"><a name="l00127"></a><span class="lineno"><a class="line" href="a00269.xhtml#a219b06937831d0da94d801ab13987639">  127</a></span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define HAVE_UNISTD_H</span></div>
<div class="line"><a name="l00128"></a><span class="lineno">  128</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00130"></a><span class="lineno">  130</span>&#160;<span class="preprocessor">#ifdef HAVE_UNISTD_H</span></div>
<div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &lt;unistd.h&gt;</span></div>
<div class="line"><a name="l00132"></a><span class="lineno">  132</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;<span class="preprocessor"></span><span class="preprocessor">#include &lt;stdlib.h&gt;</span></div>
<div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;<span class="preprocessor">#include &lt;stdarg.h&gt;</span></div>
<div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;<span class="preprocessor">#include &lt;stdio.h&gt;</span></div>
<div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;<span class="preprocessor">#include &lt;errno.h&gt;</span></div>
<div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;<span class="preprocessor">#include &lt;string.h&gt;</span></div>
<div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="preprocessor">#include &lt;stdlib.h&gt;</span></div>
<div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;<span class="preprocessor">#include &lt;sys/types.h&gt;</span></div>
<div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;</div>
<div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="a00270.xhtml">LineNoise.h</a>&quot;</span></div>
<div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="a00272.xhtml">LineNoiseUTF8.h</a>&quot;</span></div>
<div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;</div>
<div class="line"><a name="l00144"></a><span class="lineno"><a class="line" href="a00269.xhtml#a366c77abc06b106f49ff210eaf67e11b">  144</a></span>&#160;<span class="preprocessor">#define LINENOISE_DEFAULT_HISTORY_MAX_LEN 100</span></div>
<div class="line"><a name="l00145"></a><span class="lineno"><a class="line" href="a00269.xhtml#accd6f1b690e8e72f579a854d07018679">  145</a></span>&#160;<span class="preprocessor"></span><span class="preprocessor">#define LINENOISE_MAX_LINE 4096</span></div>
<div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00147"></a><span class="lineno"><a class="line" href="a00269.xhtml#aa083619c8e1488f8193a592aeb59dd1c">  147</a></span>&#160;<span class="preprocessor">#define ctrl(C) ((C) - &#39;@&#39;)</span></div>
<div class="line"><a name="l00148"></a><span class="lineno">  148</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;<span class="keyword">namespace </span>LineNoise</div>
<div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;{</div>
<div class="line"><a name="l00151"></a><span class="lineno">  151</span>&#160;</div>
<div class="line"><a name="l00152"></a><span class="lineno">  152</span>&#160;<span class="comment">/* Use -ve numbers here to co-exist with normal unicode chars */</span></div>
<div class="line"><a name="l00153"></a><span class="lineno">  153</span>&#160;<span class="keyword">enum</span> {</div>
<div class="line"><a name="l00154"></a><span class="lineno"><a class="line" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2ab579d28f9865e6813569cbf1929ce340">  154</a></span>&#160;  <a class="code" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2ab579d28f9865e6813569cbf1929ce340">SPECIAL_NONE</a>,</div>
<div class="line"><a name="l00155"></a><span class="lineno"><a class="line" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2a9603b88584871325c356a3d426dbd4ee">  155</a></span>&#160;  <a class="code" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2a9603b88584871325c356a3d426dbd4ee">SPECIAL_UP</a> = -20,</div>
<div class="line"><a name="l00156"></a><span class="lineno"><a class="line" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2ac1f7282ba533a5bb36627566072e1c96">  156</a></span>&#160;  <a class="code" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2ac1f7282ba533a5bb36627566072e1c96">SPECIAL_DOWN</a> = -21,</div>
<div class="line"><a name="l00157"></a><span class="lineno"><a class="line" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2a89b836c84eef5e4ca9f3c379a2980671">  157</a></span>&#160;  <a class="code" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2a89b836c84eef5e4ca9f3c379a2980671">SPECIAL_LEFT</a> = -22,</div>
<div class="line"><a name="l00158"></a><span class="lineno"><a class="line" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2a566021ede71ce2379d48f3d5cfba82af">  158</a></span>&#160;  <a class="code" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2a566021ede71ce2379d48f3d5cfba82af">SPECIAL_RIGHT</a> = -23,</div>
<div class="line"><a name="l00159"></a><span class="lineno"><a class="line" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2a7e5e00feb2b8d9baad18b63aeba41d88">  159</a></span>&#160;  <a class="code" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2a7e5e00feb2b8d9baad18b63aeba41d88">SPECIAL_DELETE</a> = -24,</div>
<div class="line"><a name="l00160"></a><span class="lineno"><a class="line" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2aca87972eab5fc7806ee15ee3e58f559c">  160</a></span>&#160;  <a class="code" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2aca87972eab5fc7806ee15ee3e58f559c">SPECIAL_HOME</a> = -25,</div>
<div class="line"><a name="l00161"></a><span class="lineno"><a class="line" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2a45a06e3e29156cc2313913928dd7aa8e">  161</a></span>&#160;  <a class="code" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2a45a06e3e29156cc2313913928dd7aa8e">SPECIAL_END</a> = -26,</div>
<div class="line"><a name="l00162"></a><span class="lineno"><a class="line" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2a0fb03698c4a730460b623322a542edd6">  162</a></span>&#160;  <a class="code" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2a0fb03698c4a730460b623322a542edd6">SPECIAL_INSERT</a> = -27,</div>
<div class="line"><a name="l00163"></a><span class="lineno"><a class="line" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2ac2180577128378038c179c1312e286b3">  163</a></span>&#160;  <a class="code" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2ac2180577128378038c179c1312e286b3">SPECIAL_PAGE_UP</a> = -28,</div>
<div class="line"><a name="l00164"></a><span class="lineno"><a class="line" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2a7a8d9d28a3f89dddbbfd9627746fba5f">  164</a></span>&#160;  <a class="code" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2a7a8d9d28a3f89dddbbfd9627746fba5f">SPECIAL_PAGE_DOWN</a> = -29</div>
<div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;};</div>
<div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;</div>
<div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;<span class="keyword">static</span> <span class="keywordtype">int</span> history_max_len = <a class="code" href="a00269.xhtml#a366c77abc06b106f49ff210eaf67e11b">LINENOISE_DEFAULT_HISTORY_MAX_LEN</a>;</div>
<div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;<span class="keyword">static</span> <span class="keywordtype">int</span> history_len = 0;</div>
<div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;<span class="keyword">static</span> <span class="keywordtype">char</span> **history = NULL;</div>
<div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;</div>
<div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;<span class="comment">/* Structure to contain the status of the current (being edited) line */</span></div>
<div class="line"><a name="l00172"></a><span class="lineno"><a class="line" href="a00033.xhtml">  172</a></span>&#160;<span class="keyword">struct </span><a class="code" href="a00033.xhtml">current</a> {</div>
<div class="line"><a name="l00173"></a><span class="lineno"><a class="line" href="a00033.xhtml#a51f49b97ce1880f5ddc5cc21807c9c58">  173</a></span>&#160;  <span class="keywordtype">char</span> *<a class="code" href="a00033.xhtml#a51f49b97ce1880f5ddc5cc21807c9c58">buf</a>;  <span class="comment">/* Current buffer. Always null terminated */</span></div>
<div class="line"><a name="l00174"></a><span class="lineno"><a class="line" href="a00033.xhtml#a297955e3d81728386e702039c83d7d12">  174</a></span>&#160;  <span class="keywordtype">int</span> <a class="code" href="a00033.xhtml#a297955e3d81728386e702039c83d7d12">bufmax</a>; <span class="comment">/* Size of the buffer, including space for the null termination */</span></div>
<div class="line"><a name="l00175"></a><span class="lineno"><a class="line" href="a00033.xhtml#a4179dbed0891845bc7d028cdb62d0625">  175</a></span>&#160;  <span class="keywordtype">int</span> <a class="code" href="a00033.xhtml#a4179dbed0891845bc7d028cdb62d0625">len</a>;    <span class="comment">/* Number of bytes in &#39;buf&#39; */</span></div>
<div class="line"><a name="l00176"></a><span class="lineno"><a class="line" href="a00033.xhtml#ab864e4ff893e8f3a57953ee143a9367d">  176</a></span>&#160;  <span class="keywordtype">int</span> <a class="code" href="a00033.xhtml#ab864e4ff893e8f3a57953ee143a9367d">chars</a>;  <span class="comment">/* Number of chars in &#39;buf&#39; (utf-8 chars) */</span></div>
<div class="line"><a name="l00177"></a><span class="lineno"><a class="line" href="a00033.xhtml#a3fb374e6eeebb1ae0c63fb5c507d74d6">  177</a></span>&#160;  <span class="keywordtype">int</span> <a class="code" href="a00033.xhtml#a3fb374e6eeebb1ae0c63fb5c507d74d6">pos</a>;    <span class="comment">/* Cursor position, measured in chars */</span></div>
<div class="line"><a name="l00178"></a><span class="lineno"><a class="line" href="a00033.xhtml#a9d498a46ece09f3a32949a6cd31f4d7c">  178</a></span>&#160;  <span class="keywordtype">int</span> <a class="code" href="a00033.xhtml#a9d498a46ece09f3a32949a6cd31f4d7c">cols</a>;   <span class="comment">/* Size of the window, in chars */</span></div>
<div class="line"><a name="l00179"></a><span class="lineno"><a class="line" href="a00033.xhtml#a4016f2265bc1f1fb2148b7ea1cc53cf8">  179</a></span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span> *<a class="code" href="a00033.xhtml#a4016f2265bc1f1fb2148b7ea1cc53cf8">prompt</a>;</div>
<div class="line"><a name="l00180"></a><span class="lineno"><a class="line" href="a00033.xhtml#a345267497c1248989f54a7ec822dc1b2">  180</a></span>&#160;  <span class="keywordtype">char</span> *<a class="code" href="a00033.xhtml#a345267497c1248989f54a7ec822dc1b2">capture</a>; <span class="comment">/* Allocated capture buffer, or NULL for none. Always null terminated */</span></div>
<div class="line"><a name="l00181"></a><span class="lineno">  181</span>&#160;<span class="preprocessor">#if defined(USE_TERMIOS)</span></div>
<div class="line"><a name="l00182"></a><span class="lineno"><a class="line" href="a00033.xhtml#a570921803e6f75abe3330f30e166b518">  182</a></span>&#160;<span class="preprocessor"></span>  <span class="keywordtype">int</span> <a class="code" href="a00033.xhtml#a570921803e6f75abe3330f30e166b518">fd</a>;     <span class="comment">/* Terminal fd */</span></div>
<div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;<span class="preprocessor">#elif defined(USE_WINCONSOLE)</span></div>
<div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;<span class="preprocessor"></span>  <a class="code" href="a00392.xhtml#ga6758195ba2a8511818a354eab109583f">HANDLE</a> outh; <span class="comment">/* Console output handle */</span></div>
<div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;  <a class="code" href="a00392.xhtml#ga6758195ba2a8511818a354eab109583f">HANDLE</a> inh; <span class="comment">/* Console input handle */</span></div>
<div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;  <span class="keywordtype">int</span> rows;   <span class="comment">/* Screen rows */</span></div>
<div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;  <span class="keywordtype">int</span> <a class="code" href="a00380.xhtml#a0013363a9b9db12e50b9307b3d8be7cb">x</a>;      <span class="comment">/* Current column during output */</span></div>
<div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;  <span class="keywordtype">int</span> <a class="code" href="a00380.xhtml#ade47a6ce7eff19ce3db4cda734e62f1d">y</a>;      <span class="comment">/* Current row */</span></div>
<div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;<span class="preprocessor"></span>};</div>
<div class="line"><a name="l00191"></a><span class="lineno">  191</span>&#160;</div>
<div class="line"><a name="l00192"></a><span class="lineno">  192</span>&#160;<span class="keyword">static</span> <span class="keywordtype">int</span> fd_read(<span class="keyword">struct</span> <a class="code" href="a00033.xhtml">current</a> *<a class="code" href="a00033.xhtml">current</a>);</div>
<div class="line"><a name="l00193"></a><span class="lineno">  193</span>&#160;<span class="keyword">static</span> <span class="keywordtype">int</span> getWindowSize(<span class="keyword">struct</span> <a class="code" href="a00033.xhtml">current</a> *<a class="code" href="a00033.xhtml">current</a>);</div>
<div class="line"><a name="l00194"></a><span class="lineno">  194</span>&#160;</div>
<div class="line"><a name="l00195"></a><span class="lineno"><a class="line" href="a00381.xhtml#aea501da450221e00896c8b9897022241">  195</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="a00381.xhtml#aea501da450221e00896c8b9897022241">linenoiseHistoryFree</a>(<span class="keywordtype">void</span>) {</div>
<div class="line"><a name="l00196"></a><span class="lineno">  196</span>&#160;  <span class="keywordflow">if</span> (history) {</div>
<div class="line"><a name="l00197"></a><span class="lineno">  197</span>&#160;    <span class="keywordtype">int</span> j;</div>
<div class="line"><a name="l00198"></a><span class="lineno">  198</span>&#160;</div>
<div class="line"><a name="l00199"></a><span class="lineno">  199</span>&#160;    <span class="keywordflow">for</span> (j = 0; j &lt; history_len; j++)</div>
<div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;      free(history[j]);</div>
<div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    free(history);</div>
<div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;    history = NULL;</div>
<div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;    history_len = 0;</div>
<div class="line"><a name="l00204"></a><span class="lineno">  204</span>&#160;  }</div>
<div class="line"><a name="l00205"></a><span class="lineno">  205</span>&#160;}</div>
<div class="line"><a name="l00206"></a><span class="lineno">  206</span>&#160;</div>
<div class="line"><a name="l00207"></a><span class="lineno">  207</span>&#160;<span class="preprocessor">#if defined(USE_TERMIOS)</span></div>
<div class="line"><a name="l00208"></a><span class="lineno">  208</span>&#160;<span class="preprocessor"></span><span class="keyword">static</span> <span class="keywordtype">void</span> linenoiseAtExit(<span class="keywordtype">void</span>);</div>
<div class="line"><a name="l00209"></a><span class="lineno">  209</span>&#160;<span class="keyword">static</span> <span class="keyword">struct </span>termios raw_termios, orig_termios; <span class="comment">/* in order to restore at exit */</span></div>
<div class="line"><a name="l00210"></a><span class="lineno">  210</span>&#160;<span class="keyword">static</span> <span class="keywordtype">int</span> rawmode = 0; <span class="comment">/* for atexit() function to check if restore is needed*/</span></div>
<div class="line"><a name="l00211"></a><span class="lineno">  211</span>&#160;<span class="keyword">static</span> <span class="keywordtype">int</span> atexit_registered = 0; <span class="comment">/* register atexit just 1 time */</span></div>
<div class="line"><a name="l00212"></a><span class="lineno">  212</span>&#160;</div>
<div class="line"><a name="l00213"></a><span class="lineno">  213</span>&#160;<span class="keyword">static</span> <span class="keyword">const</span> <span class="keywordtype">char</span> *unsupported_term[] = { <span class="stringliteral">&quot;dumb&quot;</span>, <span class="stringliteral">&quot;cons25&quot;</span>, NULL };</div>
<div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;</div>
<div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;<span class="keyword">static</span> <span class="keywordtype">int</span> isUnsupportedTerm(<span class="keywordtype">void</span>) {</div>
<div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;  <span class="keywordtype">char</span> *term = getenv(<span class="stringliteral">&quot;TERM&quot;</span>);</div>
<div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;</div>
<div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;  <span class="keywordflow">if</span> (term) {</div>
<div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keywordtype">int</span> j;</div>
<div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    <span class="keywordflow">for</span> (j = 0; unsupported_term[j]; j++) {</div>
<div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;      <span class="keywordflow">if</span> (strcmp(term, unsupported_term[j]) == 0) {</div>
<div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;        <span class="keywordflow">return</span> 1;</div>
<div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;      }</div>
<div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;    }</div>
<div class="line"><a name="l00225"></a><span class="lineno">  225</span>&#160;  }</div>
<div class="line"><a name="l00226"></a><span class="lineno">  226</span>&#160;  <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00227"></a><span class="lineno">  227</span>&#160;}</div>
<div class="line"><a name="l00228"></a><span class="lineno">  228</span>&#160;</div>
<div class="line"><a name="l00229"></a><span class="lineno">  229</span>&#160;<span class="keyword">static</span> <span class="keywordtype">int</span> enableRawMode(<span class="keyword">struct</span> current *current) {</div>
<div class="line"><a name="l00230"></a><span class="lineno">  230</span>&#160;  current-&gt;fd = STDIN_FILENO;</div>
<div class="line"><a name="l00231"></a><span class="lineno">  231</span>&#160;  current-&gt;cols = 0;</div>
<div class="line"><a name="l00232"></a><span class="lineno">  232</span>&#160;</div>
<div class="line"><a name="l00233"></a><span class="lineno">  233</span>&#160;  <span class="keywordflow">if</span> (!isatty(current-&gt;fd) || isUnsupportedTerm() ||</div>
<div class="line"><a name="l00234"></a><span class="lineno">  234</span>&#160;    tcgetattr(current-&gt;fd, &amp;orig_termios) == -1) {</div>
<div class="line"><a name="l00235"></a><span class="lineno">  235</span>&#160;  fatal:</div>
<div class="line"><a name="l00236"></a><span class="lineno">  236</span>&#160;    errno = ENOTTY;</div>
<div class="line"><a name="l00237"></a><span class="lineno">  237</span>&#160;    <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00238"></a><span class="lineno">  238</span>&#160;  }</div>
<div class="line"><a name="l00239"></a><span class="lineno">  239</span>&#160;</div>
<div class="line"><a name="l00240"></a><span class="lineno">  240</span>&#160;  <span class="keywordflow">if</span> (!atexit_registered) {</div>
<div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;    atexit(linenoiseAtExit);</div>
<div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;    atexit_registered = 1;</div>
<div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;  }</div>
<div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;</div>
<div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;  raw_termios = orig_termios;  <span class="comment">/* modify the original mode */</span></div>
<div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;  <span class="comment">/* input modes: no break, no CR to NL, no parity check, no strip char,</span></div>
<div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;<span class="comment">  * no start/stop output control. */</span></div>
<div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;  raw_termios.c_oflag |= (OCRNL | ONLCR); <span class="comment">//HLP</span></div>
<div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;  raw_termios.c_iflag &amp;= ~(BRKINT | ICRNL | INPCK | ISTRIP | IXON); <span class="comment">//HLP</span></div>
<div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;  <span class="comment">/* output modes - disable post processing */</span></div>
<div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;  <span class="comment">//raw.c_oflag &amp;= ~(OPOST); //HLP</span></div>
<div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;  <span class="comment">/* control modes - set 8 bit chars */</span></div>
<div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;  raw_termios.c_cflag |= (CS8);</div>
<div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;  <span class="comment">/* local modes - choing off, canonical off, no extended functions,</span></div>
<div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;<span class="comment">  * no signal chars (^Z,^C) */</span></div>
<div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;  raw_termios.c_lflag &amp;= ~(ECHO | ICANON | IEXTEN | ISIG);</div>
<div class="line"><a name="l00257"></a><span class="lineno">  257</span>&#160;  <span class="comment">/* control chars - set return condition: min number of bytes and timer.</span></div>
<div class="line"><a name="l00258"></a><span class="lineno">  258</span>&#160;<span class="comment">  * We want read to return every single byte, without timeout. */</span></div>
<div class="line"><a name="l00259"></a><span class="lineno">  259</span>&#160;  raw_termios.c_cc[VMIN] = 1; raw_termios.c_cc[VTIME] = 0; <span class="comment">/* 1 byte, no timer */</span></div>
<div class="line"><a name="l00260"></a><span class="lineno">  260</span>&#160;</div>
<div class="line"><a name="l00261"></a><span class="lineno">  261</span>&#160;  <span class="comment">/* put terminal in raw mode after flushing */</span></div>
<div class="line"><a name="l00262"></a><span class="lineno">  262</span>&#160;  <span class="keywordflow">if</span> (tcsetattr(current-&gt;fd, TCSADRAIN, &amp;raw_termios) &lt; 0) {</div>
<div class="line"><a name="l00263"></a><span class="lineno">  263</span>&#160;    <span class="keywordflow">goto</span> fatal;</div>
<div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;  }</div>
<div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;  rawmode = 1;</div>
<div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;  <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;}</div>
<div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;</div>
<div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;<span class="comment">// HLP Added enable/disableRawModeOutput()</span></div>
<div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;<span class="keyword">static</span> <span class="keywordtype">int</span> enableRawModeOutput(<span class="keywordtype">int</span> fd) {</div>
<div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;  raw_termios.c_oflag &amp;= ~(OPOST);</div>
<div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;  <span class="comment">/* put terminal in raw mode after flushing */</span></div>
<div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;  <span class="keywordflow">if</span> (tcsetattr(fd, TCSADRAIN, &amp;raw_termios) &lt; 0) {</div>
<div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    errno = ENOTTY;</div>
<div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;    <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;  }</div>
<div class="line"><a name="l00277"></a><span class="lineno">  277</span>&#160;  <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00278"></a><span class="lineno">  278</span>&#160;}</div>
<div class="line"><a name="l00279"></a><span class="lineno">  279</span>&#160;</div>
<div class="line"><a name="l00280"></a><span class="lineno">  280</span>&#160;<span class="keyword">static</span> <span class="keywordtype">int</span> disableRawModeOutput(<span class="keywordtype">int</span> fd) {</div>
<div class="line"><a name="l00281"></a><span class="lineno">  281</span>&#160;  raw_termios.c_oflag |= (OPOST);</div>
<div class="line"><a name="l00282"></a><span class="lineno">  282</span>&#160;  <span class="comment">/* put terminal in raw mode after flushing */</span></div>
<div class="line"><a name="l00283"></a><span class="lineno">  283</span>&#160;  <span class="keywordflow">if</span> (tcsetattr(fd, TCSADRAIN, &amp;raw_termios) &lt; 0) {</div>
<div class="line"><a name="l00284"></a><span class="lineno">  284</span>&#160;    errno = ENOTTY;</div>
<div class="line"><a name="l00285"></a><span class="lineno">  285</span>&#160;    <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00286"></a><span class="lineno">  286</span>&#160;  }</div>
<div class="line"><a name="l00287"></a><span class="lineno">  287</span>&#160;  <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;}</div>
<div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;</div>
<div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> disableRawMode(<span class="keyword">struct</span> current *current) {</div>
<div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;  <span class="comment">/* Don&#39;t even check the return value as it&#39;s too late. */</span></div>
<div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;  <span class="keywordflow">if</span> (rawmode &amp;&amp; tcsetattr(current-&gt;fd, TCSADRAIN, &amp;orig_termios) != -1)</div>
<div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    rawmode = 0;</div>
<div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;}</div>
<div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;</div>
<div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;<span class="comment">/* At exit we&#39;ll try to fix the terminal to the initial conditions. */</span></div>
<div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> linenoiseAtExit(<span class="keywordtype">void</span>) {</div>
<div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;  <span class="keywordflow">if</span> (rawmode) {</div>
<div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;    tcsetattr(STDIN_FILENO, TCSADRAIN, &amp;orig_termios);</div>
<div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;  }</div>
<div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;  <a class="code" href="a00381.xhtml#aea501da450221e00896c8b9897022241">linenoiseHistoryFree</a>();</div>
<div class="line"><a name="l00302"></a><span class="lineno">  302</span>&#160;}</div>
<div class="line"><a name="l00303"></a><span class="lineno">  303</span>&#160;</div>
<div class="line"><a name="l00304"></a><span class="lineno">  304</span>&#160;<span class="comment">/* gcc/glibc insists that we care about the return code of write!</span></div>
<div class="line"><a name="l00305"></a><span class="lineno">  305</span>&#160;<span class="comment">* Clarification: This means that a void-cast like &quot;(void) (EXPR)&quot;</span></div>
<div class="line"><a name="l00306"></a><span class="lineno">  306</span>&#160;<span class="comment">* does not work.</span></div>
<div class="line"><a name="l00307"></a><span class="lineno">  307</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00308"></a><span class="lineno"><a class="line" href="a00269.xhtml#a217d6c3c0088a81dce63a5f13d67c6f8">  308</a></span>&#160;<span class="preprocessor">#define IGNORE_RC(EXPR) if (EXPR) {}</span></div>
<div class="line"><a name="l00309"></a><span class="lineno">  309</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00310"></a><span class="lineno">  310</span>&#160;<span class="comment">/* This is fdprintf() on some systems, but use a different</span></div>
<div class="line"><a name="l00311"></a><span class="lineno">  311</span>&#160;<span class="comment">* name to avoid conflicts</span></div>
<div class="line"><a name="l00312"></a><span class="lineno">  312</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l00313"></a><span class="lineno">  313</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> fd_printf(<span class="keywordtype">int</span> fd, <span class="keyword">const</span> <span class="keywordtype">char</span> *format, ...)</div>
<div class="line"><a name="l00314"></a><span class="lineno">  314</span>&#160;{</div>
<div class="line"><a name="l00315"></a><span class="lineno">  315</span>&#160;  va_list <a class="code" href="a00378.xhtml#ae4da4ba6a6d81881d77c675b1e9ec8e7">args</a>;</div>
<div class="line"><a name="l00316"></a><span class="lineno">  316</span>&#160;  <span class="keywordtype">char</span> buf[64];</div>
<div class="line"><a name="l00317"></a><span class="lineno">  317</span>&#160;  <span class="keywordtype">int</span> n;</div>
<div class="line"><a name="l00318"></a><span class="lineno">  318</span>&#160;</div>
<div class="line"><a name="l00319"></a><span class="lineno">  319</span>&#160;  enableRawModeOutput(fd);</div>
<div class="line"><a name="l00320"></a><span class="lineno">  320</span>&#160;  </div>
<div class="line"><a name="l00321"></a><span class="lineno">  321</span>&#160;  va_start(args, format);</div>
<div class="line"><a name="l00322"></a><span class="lineno">  322</span>&#160;  n = vsnprintf(buf, <span class="keyword">sizeof</span>(buf), format, args);</div>
<div class="line"><a name="l00323"></a><span class="lineno">  323</span>&#160;  va_end(args);</div>
<div class="line"><a name="l00324"></a><span class="lineno">  324</span>&#160;  <a class="code" href="a00269.xhtml#a217d6c3c0088a81dce63a5f13d67c6f8">IGNORE_RC</a>(write(fd, buf, n));</div>
<div class="line"><a name="l00325"></a><span class="lineno">  325</span>&#160;  </div>
<div class="line"><a name="l00326"></a><span class="lineno">  326</span>&#160;  disableRawModeOutput(fd);</div>
<div class="line"><a name="l00327"></a><span class="lineno">  327</span>&#160;}</div>
<div class="line"><a name="l00328"></a><span class="lineno">  328</span>&#160;</div>
<div class="line"><a name="l00329"></a><span class="lineno">  329</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> clearScreen(<span class="keyword">struct</span> current *current)</div>
<div class="line"><a name="l00330"></a><span class="lineno">  330</span>&#160;{</div>
<div class="line"><a name="l00331"></a><span class="lineno">  331</span>&#160;  fd_printf(current-&gt;fd, <span class="stringliteral">&quot;\x1b[H\x1b[2J&quot;</span>);</div>
<div class="line"><a name="l00332"></a><span class="lineno">  332</span>&#160;}</div>
<div class="line"><a name="l00333"></a><span class="lineno">  333</span>&#160;</div>
<div class="line"><a name="l00334"></a><span class="lineno">  334</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> cursorToLeft(<span class="keyword">struct</span> current *current)</div>
<div class="line"><a name="l00335"></a><span class="lineno">  335</span>&#160;{</div>
<div class="line"><a name="l00336"></a><span class="lineno">  336</span>&#160;  fd_printf(current-&gt;fd, <span class="stringliteral">&quot;\r&quot;</span>);</div>
<div class="line"><a name="l00337"></a><span class="lineno">  337</span>&#160;}</div>
<div class="line"><a name="l00338"></a><span class="lineno">  338</span>&#160;</div>
<div class="line"><a name="l00339"></a><span class="lineno">  339</span>&#160;<span class="keyword">static</span> <span class="keywordtype">int</span> outputChars(<span class="keyword">struct</span> current *current, <span class="keyword">const</span> <span class="keywordtype">char</span> *buf, <span class="keywordtype">int</span> len)</div>
<div class="line"><a name="l00340"></a><span class="lineno">  340</span>&#160;{</div>
<div class="line"><a name="l00341"></a><span class="lineno">  341</span>&#160;  <span class="keywordflow">return</span> write(current-&gt;fd, buf, len);</div>
<div class="line"><a name="l00342"></a><span class="lineno">  342</span>&#160;}</div>
<div class="line"><a name="l00343"></a><span class="lineno">  343</span>&#160;</div>
<div class="line"><a name="l00344"></a><span class="lineno">  344</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> outputControlChar(<span class="keyword">struct</span> current *current, <span class="keywordtype">char</span> ch)</div>
<div class="line"><a name="l00345"></a><span class="lineno">  345</span>&#160;{</div>
<div class="line"><a name="l00346"></a><span class="lineno">  346</span>&#160;  fd_printf(current-&gt;fd, <span class="stringliteral">&quot;\x1b[7m^%c\x1b[0m&quot;</span>, ch);</div>
<div class="line"><a name="l00347"></a><span class="lineno">  347</span>&#160;}</div>
<div class="line"><a name="l00348"></a><span class="lineno">  348</span>&#160;</div>
<div class="line"><a name="l00349"></a><span class="lineno">  349</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> eraseEol(<span class="keyword">struct</span> current *current)</div>
<div class="line"><a name="l00350"></a><span class="lineno">  350</span>&#160;{</div>
<div class="line"><a name="l00351"></a><span class="lineno">  351</span>&#160;  fd_printf(current-&gt;fd, <span class="stringliteral">&quot;\x1b[0K&quot;</span>);</div>
<div class="line"><a name="l00352"></a><span class="lineno">  352</span>&#160;}</div>
<div class="line"><a name="l00353"></a><span class="lineno">  353</span>&#160;</div>
<div class="line"><a name="l00354"></a><span class="lineno">  354</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> setCursorPos(<span class="keyword">struct</span> current *current, <span class="keywordtype">int</span> <a class="code" href="a00380.xhtml#a0013363a9b9db12e50b9307b3d8be7cb">x</a>)</div>
<div class="line"><a name="l00355"></a><span class="lineno">  355</span>&#160;{</div>
<div class="line"><a name="l00356"></a><span class="lineno">  356</span>&#160;  fd_printf(current-&gt;fd, <span class="stringliteral">&quot;\r\x1b[%dC&quot;</span>, x);</div>
<div class="line"><a name="l00357"></a><span class="lineno">  357</span>&#160;}</div>
<div class="line"><a name="l00358"></a><span class="lineno">  358</span>&#160;</div>
<div class="line"><a name="l00366"></a><span class="lineno">  366</span>&#160;<span class="keyword">static</span> <span class="keywordtype">int</span> fd_read_char(<span class="keywordtype">int</span> fd, <span class="keywordtype">int</span> timeout)</div>
<div class="line"><a name="l00367"></a><span class="lineno">  367</span>&#160;{</div>
<div class="line"><a name="l00368"></a><span class="lineno">  368</span>&#160;  <span class="keyword">struct </span>pollfd p;</div>
<div class="line"><a name="l00369"></a><span class="lineno">  369</span>&#160;  <span class="keywordtype">unsigned</span> <span class="keywordtype">char</span> c;</div>
<div class="line"><a name="l00370"></a><span class="lineno">  370</span>&#160;</div>
<div class="line"><a name="l00371"></a><span class="lineno">  371</span>&#160;  p.fd = fd;</div>
<div class="line"><a name="l00372"></a><span class="lineno">  372</span>&#160;  p.events = POLLIN;</div>
<div class="line"><a name="l00373"></a><span class="lineno">  373</span>&#160;</div>
<div class="line"><a name="l00374"></a><span class="lineno">  374</span>&#160;  <span class="keywordflow">if</span> (poll(&amp;p, 1, timeout) == 0) {</div>
<div class="line"><a name="l00375"></a><span class="lineno">  375</span>&#160;    <span class="comment">/* timeout */</span></div>
<div class="line"><a name="l00376"></a><span class="lineno">  376</span>&#160;    <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00377"></a><span class="lineno">  377</span>&#160;  }</div>
<div class="line"><a name="l00378"></a><span class="lineno">  378</span>&#160;  <span class="keywordflow">if</span> (read(fd, &amp;c, 1) != 1) {</div>
<div class="line"><a name="l00379"></a><span class="lineno">  379</span>&#160;    <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00380"></a><span class="lineno">  380</span>&#160;  }</div>
<div class="line"><a name="l00381"></a><span class="lineno">  381</span>&#160;  <span class="keywordflow">return</span> c;</div>
<div class="line"><a name="l00382"></a><span class="lineno">  382</span>&#160;}</div>
<div class="line"><a name="l00383"></a><span class="lineno">  383</span>&#160;</div>
<div class="line"><a name="l00388"></a><span class="lineno">  388</span>&#160;<span class="keyword">static</span> <span class="keywordtype">int</span> fd_read(<span class="keyword">struct</span> current *current)</div>
<div class="line"><a name="l00389"></a><span class="lineno">  389</span>&#160;{</div>
<div class="line"><a name="l00390"></a><span class="lineno">  390</span>&#160;<span class="preprocessor">#ifdef USE_UTF8</span></div>
<div class="line"><a name="l00391"></a><span class="lineno">  391</span>&#160;<span class="preprocessor"></span>  <span class="keywordtype">char</span> buf[4];</div>
<div class="line"><a name="l00392"></a><span class="lineno">  392</span>&#160;  <span class="keywordtype">int</span> n;</div>
<div class="line"><a name="l00393"></a><span class="lineno">  393</span>&#160;  <span class="keywordtype">int</span> i;</div>
<div class="line"><a name="l00394"></a><span class="lineno">  394</span>&#160;  <span class="keywordtype">int</span> c;</div>
<div class="line"><a name="l00395"></a><span class="lineno">  395</span>&#160;</div>
<div class="line"><a name="l00396"></a><span class="lineno">  396</span>&#160;  <span class="keywordflow">if</span> (read(current-&gt;fd, &amp;buf[0], 1) != 1) {</div>
<div class="line"><a name="l00397"></a><span class="lineno">  397</span>&#160;    <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00398"></a><span class="lineno">  398</span>&#160;  }</div>
<div class="line"><a name="l00399"></a><span class="lineno">  399</span>&#160;  n = <a class="code" href="a00272.xhtml#a5f1b837144a2b5142285c69352281325">utf8_charlen</a>(buf[0]);</div>
<div class="line"><a name="l00400"></a><span class="lineno">  400</span>&#160;  <span class="keywordflow">if</span> (n &lt; 1 || n &gt; 3) {</div>
<div class="line"><a name="l00401"></a><span class="lineno">  401</span>&#160;    <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00402"></a><span class="lineno">  402</span>&#160;  }</div>
<div class="line"><a name="l00403"></a><span class="lineno">  403</span>&#160;  <span class="keywordflow">for</span> (i = 1; i &lt; n; i++) {</div>
<div class="line"><a name="l00404"></a><span class="lineno">  404</span>&#160;    <span class="keywordflow">if</span> (read(current-&gt;fd, &amp;buf[i], 1) != 1) {</div>
<div class="line"><a name="l00405"></a><span class="lineno">  405</span>&#160;      <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00406"></a><span class="lineno">  406</span>&#160;    }</div>
<div class="line"><a name="l00407"></a><span class="lineno">  407</span>&#160;  }</div>
<div class="line"><a name="l00408"></a><span class="lineno">  408</span>&#160;  buf[n] = 0;</div>
<div class="line"><a name="l00409"></a><span class="lineno">  409</span>&#160;  <span class="comment">/* decode and return the character */</span></div>
<div class="line"><a name="l00410"></a><span class="lineno">  410</span>&#160;  <a class="code" href="a00272.xhtml#a6e220f61f15dae8999af352902c47889">utf8_tounicode</a>(buf, &amp;c);</div>
<div class="line"><a name="l00411"></a><span class="lineno">  411</span>&#160;  <span class="keywordflow">return</span> c;</div>
<div class="line"><a name="l00412"></a><span class="lineno">  412</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00413"></a><span class="lineno">  413</span>&#160;<span class="preprocessor"></span>  <span class="keywordflow">return</span> fd_read_char(current-&gt;fd, -1);</div>
<div class="line"><a name="l00414"></a><span class="lineno">  414</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00415"></a><span class="lineno">  415</span>&#160;<span class="preprocessor"></span>}</div>
<div class="line"><a name="l00416"></a><span class="lineno">  416</span>&#160;</div>
<div class="line"><a name="l00417"></a><span class="lineno">  417</span>&#160;<span class="keyword">static</span> <span class="keywordtype">int</span> countColorControlChars(<span class="keyword">const</span> <span class="keywordtype">char</span>* prompt)</div>
<div class="line"><a name="l00418"></a><span class="lineno">  418</span>&#160;{</div>
<div class="line"><a name="l00419"></a><span class="lineno">  419</span>&#160;  <span class="comment">/* ANSI color control sequences have the form:</span></div>
<div class="line"><a name="l00420"></a><span class="lineno">  420</span>&#160;<span class="comment">  * &quot;\x1b&quot; &quot;[&quot; [0-9;]* &quot;m&quot;</span></div>
<div class="line"><a name="l00421"></a><span class="lineno">  421</span>&#160;<span class="comment">  * We parse them with a simple state machine.</span></div>
<div class="line"><a name="l00422"></a><span class="lineno">  422</span>&#160;<span class="comment">  */</span></div>
<div class="line"><a name="l00423"></a><span class="lineno">  423</span>&#160;</div>
<div class="line"><a name="l00424"></a><span class="lineno">  424</span>&#160;  <span class="keyword">enum</span> {</div>
<div class="line"><a name="l00425"></a><span class="lineno">  425</span>&#160;    search_esc,</div>
<div class="line"><a name="l00426"></a><span class="lineno">  426</span>&#160;    expect_bracket,</div>
<div class="line"><a name="l00427"></a><span class="lineno">  427</span>&#160;    expect_trail</div>
<div class="line"><a name="l00428"></a><span class="lineno">  428</span>&#160;  } state = search_esc;</div>
<div class="line"><a name="l00429"></a><span class="lineno">  429</span>&#160;  <span class="keywordtype">int</span> len = 0, found = 0;</div>
<div class="line"><a name="l00430"></a><span class="lineno">  430</span>&#160;  <span class="keywordtype">char</span> ch;</div>
<div class="line"><a name="l00431"></a><span class="lineno">  431</span>&#160;</div>
<div class="line"><a name="l00432"></a><span class="lineno">  432</span>&#160;  <span class="comment">/* XXX: Strictly we should be checking utf8 chars rather than</span></div>
<div class="line"><a name="l00433"></a><span class="lineno">  433</span>&#160;<span class="comment">  *      bytes in case of the extremely unlikely scenario where</span></div>
<div class="line"><a name="l00434"></a><span class="lineno">  434</span>&#160;<span class="comment">  *      an ANSI sequence is part of a utf8 sequence.</span></div>
<div class="line"><a name="l00435"></a><span class="lineno">  435</span>&#160;<span class="comment">  */</span></div>
<div class="line"><a name="l00436"></a><span class="lineno">  436</span>&#160;  <span class="keywordflow">while</span> ((ch = *prompt++) != 0) {</div>
<div class="line"><a name="l00437"></a><span class="lineno">  437</span>&#160;    <span class="keywordflow">switch</span> (state) {</div>
<div class="line"><a name="l00438"></a><span class="lineno">  438</span>&#160;    <span class="keywordflow">case</span> search_esc:</div>
<div class="line"><a name="l00439"></a><span class="lineno">  439</span>&#160;      <span class="keywordflow">if</span> (ch == <span class="stringliteral">&#39;\x1b&#39;</span>) {</div>
<div class="line"><a name="l00440"></a><span class="lineno">  440</span>&#160;        state = expect_bracket;</div>
<div class="line"><a name="l00441"></a><span class="lineno">  441</span>&#160;      }</div>
<div class="line"><a name="l00442"></a><span class="lineno">  442</span>&#160;      <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00443"></a><span class="lineno">  443</span>&#160;    <span class="keywordflow">case</span> expect_bracket:</div>
<div class="line"><a name="l00444"></a><span class="lineno">  444</span>&#160;      <span class="keywordflow">if</span> (ch == <span class="charliteral">&#39;[&#39;</span>) {</div>
<div class="line"><a name="l00445"></a><span class="lineno">  445</span>&#160;        state = expect_trail;</div>
<div class="line"><a name="l00446"></a><span class="lineno">  446</span>&#160;        <span class="comment">/* 3 for &quot;\e[ ... m&quot; */</span></div>
<div class="line"><a name="l00447"></a><span class="lineno">  447</span>&#160;        len = 3;</div>
<div class="line"><a name="l00448"></a><span class="lineno">  448</span>&#160;        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00449"></a><span class="lineno">  449</span>&#160;      }</div>
<div class="line"><a name="l00450"></a><span class="lineno">  450</span>&#160;      state = search_esc;</div>
<div class="line"><a name="l00451"></a><span class="lineno">  451</span>&#160;      <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00452"></a><span class="lineno">  452</span>&#160;    <span class="keywordflow">case</span> expect_trail:</div>
<div class="line"><a name="l00453"></a><span class="lineno">  453</span>&#160;      <span class="keywordflow">if</span> ((ch == <span class="charliteral">&#39;;&#39;</span>) || ((ch &gt;= <span class="charliteral">&#39;0&#39;</span> &amp;&amp; ch &lt;= <span class="charliteral">&#39;9&#39;</span>))) {</div>
<div class="line"><a name="l00454"></a><span class="lineno">  454</span>&#160;        <span class="comment">/* 0-9, or semicolon */</span></div>
<div class="line"><a name="l00455"></a><span class="lineno">  455</span>&#160;        len++;</div>
<div class="line"><a name="l00456"></a><span class="lineno">  456</span>&#160;        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00457"></a><span class="lineno">  457</span>&#160;      }</div>
<div class="line"><a name="l00458"></a><span class="lineno">  458</span>&#160;      <span class="keywordflow">if</span> (ch == <span class="charliteral">&#39;m&#39;</span>) {</div>
<div class="line"><a name="l00459"></a><span class="lineno">  459</span>&#160;        found += len;</div>
<div class="line"><a name="l00460"></a><span class="lineno">  460</span>&#160;      }</div>
<div class="line"><a name="l00461"></a><span class="lineno">  461</span>&#160;      state = search_esc;</div>
<div class="line"><a name="l00462"></a><span class="lineno">  462</span>&#160;      <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00463"></a><span class="lineno">  463</span>&#160;    }</div>
<div class="line"><a name="l00464"></a><span class="lineno">  464</span>&#160;  }</div>
<div class="line"><a name="l00465"></a><span class="lineno">  465</span>&#160;</div>
<div class="line"><a name="l00466"></a><span class="lineno">  466</span>&#160;  <span class="keywordflow">return</span> found;</div>
<div class="line"><a name="l00467"></a><span class="lineno">  467</span>&#160;}</div>
<div class="line"><a name="l00468"></a><span class="lineno">  468</span>&#160;</div>
<div class="line"><a name="l00473"></a><span class="lineno">  473</span>&#160;<span class="keyword">static</span> <span class="keywordtype">int</span> queryCursor(<span class="keywordtype">int</span> fd, <span class="keywordtype">int</span>* cols)</div>
<div class="line"><a name="l00474"></a><span class="lineno">  474</span>&#160;{</div>
<div class="line"><a name="l00475"></a><span class="lineno">  475</span>&#160;  <span class="comment">/* control sequence - report cursor location */</span></div>
<div class="line"><a name="l00476"></a><span class="lineno">  476</span>&#160;  fd_printf(fd, <span class="stringliteral">&quot;\x1b[6n&quot;</span>);</div>
<div class="line"><a name="l00477"></a><span class="lineno">  477</span>&#160;</div>
<div class="line"><a name="l00478"></a><span class="lineno">  478</span>&#160;  <span class="comment">/* Parse the response: ESC [ rows ; cols R */</span></div>
<div class="line"><a name="l00479"></a><span class="lineno">  479</span>&#160;  <span class="keywordflow">if</span> (fd_read_char(fd, 100) == 0x1b &amp;&amp;</div>
<div class="line"><a name="l00480"></a><span class="lineno">  480</span>&#160;    fd_read_char(fd, 100) == <span class="charliteral">&#39;[&#39;</span>) {</div>
<div class="line"><a name="l00481"></a><span class="lineno">  481</span>&#160;</div>
<div class="line"><a name="l00482"></a><span class="lineno">  482</span>&#160;    <span class="keywordtype">int</span> n = 0;</div>
<div class="line"><a name="l00483"></a><span class="lineno">  483</span>&#160;    <span class="keywordflow">while</span> (1) {</div>
<div class="line"><a name="l00484"></a><span class="lineno">  484</span>&#160;      <span class="keywordtype">int</span> ch = fd_read_char(fd, 100);</div>
<div class="line"><a name="l00485"></a><span class="lineno">  485</span>&#160;      <span class="keywordflow">if</span> (ch == <span class="charliteral">&#39;;&#39;</span>) {</div>
<div class="line"><a name="l00486"></a><span class="lineno">  486</span>&#160;        <span class="comment">/* Ignore rows */</span></div>
<div class="line"><a name="l00487"></a><span class="lineno">  487</span>&#160;        n = 0;</div>
<div class="line"><a name="l00488"></a><span class="lineno">  488</span>&#160;      }</div>
<div class="line"><a name="l00489"></a><span class="lineno">  489</span>&#160;      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (ch == <span class="charliteral">&#39;R&#39;</span>) {</div>
<div class="line"><a name="l00490"></a><span class="lineno">  490</span>&#160;        <span class="comment">/* Got cols */</span></div>
<div class="line"><a name="l00491"></a><span class="lineno">  491</span>&#160;        <span class="keywordflow">if</span> (n != 0 &amp;&amp; n &lt; 1000) {</div>
<div class="line"><a name="l00492"></a><span class="lineno">  492</span>&#160;          *cols = n;</div>
<div class="line"><a name="l00493"></a><span class="lineno">  493</span>&#160;        }</div>
<div class="line"><a name="l00494"></a><span class="lineno">  494</span>&#160;        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00495"></a><span class="lineno">  495</span>&#160;      }</div>
<div class="line"><a name="l00496"></a><span class="lineno">  496</span>&#160;      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (ch &gt;= 0 &amp;&amp; ch &lt;= <span class="charliteral">&#39;9&#39;</span>) {</div>
<div class="line"><a name="l00497"></a><span class="lineno">  497</span>&#160;        n = n * 10 + ch - <span class="charliteral">&#39;0&#39;</span>;</div>
<div class="line"><a name="l00498"></a><span class="lineno">  498</span>&#160;      }</div>
<div class="line"><a name="l00499"></a><span class="lineno">  499</span>&#160;      <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00500"></a><span class="lineno">  500</span>&#160;        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00501"></a><span class="lineno">  501</span>&#160;      }</div>
<div class="line"><a name="l00502"></a><span class="lineno">  502</span>&#160;    }</div>
<div class="line"><a name="l00503"></a><span class="lineno">  503</span>&#160;    <span class="keywordflow">return</span> 1;</div>
<div class="line"><a name="l00504"></a><span class="lineno">  504</span>&#160;  }</div>
<div class="line"><a name="l00505"></a><span class="lineno">  505</span>&#160;</div>
<div class="line"><a name="l00506"></a><span class="lineno">  506</span>&#160;  <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00507"></a><span class="lineno">  507</span>&#160;}</div>
<div class="line"><a name="l00508"></a><span class="lineno">  508</span>&#160;</div>
<div class="line"><a name="l00512"></a><span class="lineno">  512</span>&#160;<span class="keyword">static</span> <span class="keywordtype">int</span> getWindowSize(<span class="keyword">struct</span> current *current)</div>
<div class="line"><a name="l00513"></a><span class="lineno">  513</span>&#160;{</div>
<div class="line"><a name="l00514"></a><span class="lineno">  514</span>&#160;  <span class="keyword">struct </span>winsize ws;</div>
<div class="line"><a name="l00515"></a><span class="lineno">  515</span>&#160;</div>
<div class="line"><a name="l00516"></a><span class="lineno">  516</span>&#160;  <span class="keywordflow">if</span> (ioctl(STDOUT_FILENO, TIOCGWINSZ, &amp;ws) == 0 &amp;&amp; ws.ws_col != 0) {</div>
<div class="line"><a name="l00517"></a><span class="lineno">  517</span>&#160;    current-&gt;cols = ws.ws_col;</div>
<div class="line"><a name="l00518"></a><span class="lineno">  518</span>&#160;    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00519"></a><span class="lineno">  519</span>&#160;  }</div>
<div class="line"><a name="l00520"></a><span class="lineno">  520</span>&#160;</div>
<div class="line"><a name="l00521"></a><span class="lineno">  521</span>&#160;  <span class="comment">/* Failed to query the window size. Perhaps we are on a serial terminal.</span></div>
<div class="line"><a name="l00522"></a><span class="lineno">  522</span>&#160;<span class="comment">  * Try to query the width by sending the cursor as far to the right</span></div>
<div class="line"><a name="l00523"></a><span class="lineno">  523</span>&#160;<span class="comment">  * and reading back the cursor position.</span></div>
<div class="line"><a name="l00524"></a><span class="lineno">  524</span>&#160;<span class="comment">  * Note that this is only done once per call to linenoise rather than</span></div>
<div class="line"><a name="l00525"></a><span class="lineno">  525</span>&#160;<span class="comment">  * every time the line is refreshed for efficiency reasons.</span></div>
<div class="line"><a name="l00526"></a><span class="lineno">  526</span>&#160;<span class="comment">  *</span></div>
<div class="line"><a name="l00527"></a><span class="lineno">  527</span>&#160;<span class="comment">  * In more detail, we:</span></div>
<div class="line"><a name="l00528"></a><span class="lineno">  528</span>&#160;<span class="comment">  * (a) request current cursor position,</span></div>
<div class="line"><a name="l00529"></a><span class="lineno">  529</span>&#160;<span class="comment">  * (b) move cursor far right,</span></div>
<div class="line"><a name="l00530"></a><span class="lineno">  530</span>&#160;<span class="comment">  * (c) request cursor position again,</span></div>
<div class="line"><a name="l00531"></a><span class="lineno">  531</span>&#160;<span class="comment">  * (d) at last move back to the old position.</span></div>
<div class="line"><a name="l00532"></a><span class="lineno">  532</span>&#160;<span class="comment">  * This gives us the width without messing with the externally</span></div>
<div class="line"><a name="l00533"></a><span class="lineno">  533</span>&#160;<span class="comment">  * visible cursor position.</span></div>
<div class="line"><a name="l00534"></a><span class="lineno">  534</span>&#160;<span class="comment">  */</span></div>
<div class="line"><a name="l00535"></a><span class="lineno">  535</span>&#160;</div>
<div class="line"><a name="l00536"></a><span class="lineno">  536</span>&#160;  <span class="keywordflow">if</span> (current-&gt;cols == 0) {</div>
<div class="line"><a name="l00537"></a><span class="lineno">  537</span>&#160;    <span class="keywordtype">int</span> here;</div>
<div class="line"><a name="l00538"></a><span class="lineno">  538</span>&#160;</div>
<div class="line"><a name="l00539"></a><span class="lineno">  539</span>&#160;    current-&gt;cols = 80;</div>
<div class="line"><a name="l00540"></a><span class="lineno">  540</span>&#160;</div>
<div class="line"><a name="l00541"></a><span class="lineno">  541</span>&#160;    <span class="comment">/* (a) */</span></div>
<div class="line"><a name="l00542"></a><span class="lineno">  542</span>&#160;    <span class="keywordflow">if</span> (queryCursor(current-&gt;fd, &amp;here)) {</div>
<div class="line"><a name="l00543"></a><span class="lineno">  543</span>&#160;      <span class="comment">/* (b) */</span></div>
<div class="line"><a name="l00544"></a><span class="lineno">  544</span>&#160;      fd_printf(current-&gt;fd, <span class="stringliteral">&quot;\x1b[999C&quot;</span>);</div>
<div class="line"><a name="l00545"></a><span class="lineno">  545</span>&#160;</div>
<div class="line"><a name="l00546"></a><span class="lineno">  546</span>&#160;      <span class="comment">/* (c). Note: If (a) succeeded, then (c) should as well.</span></div>
<div class="line"><a name="l00547"></a><span class="lineno">  547</span>&#160;<span class="comment">      * For paranoia we still check and have a fallback action</span></div>
<div class="line"><a name="l00548"></a><span class="lineno">  548</span>&#160;<span class="comment">      * for (d) in case of failure..</span></div>
<div class="line"><a name="l00549"></a><span class="lineno">  549</span>&#160;<span class="comment">      */</span></div>
<div class="line"><a name="l00550"></a><span class="lineno">  550</span>&#160;      <span class="keywordflow">if</span> (!queryCursor(current-&gt;fd, &amp;current-&gt;cols)) {</div>
<div class="line"><a name="l00551"></a><span class="lineno">  551</span>&#160;        <span class="comment">/* (d&#39;) Unable to get accurate position data, reset</span></div>
<div class="line"><a name="l00552"></a><span class="lineno">  552</span>&#160;<span class="comment">        * the cursor to the far left. While this may not</span></div>
<div class="line"><a name="l00553"></a><span class="lineno">  553</span>&#160;<span class="comment">        * restore the exact original position it should not</span></div>
<div class="line"><a name="l00554"></a><span class="lineno">  554</span>&#160;<span class="comment">        * be too bad.</span></div>
<div class="line"><a name="l00555"></a><span class="lineno">  555</span>&#160;<span class="comment">        */</span></div>
<div class="line"><a name="l00556"></a><span class="lineno">  556</span>&#160;        fd_printf(current-&gt;fd, <span class="stringliteral">&quot;\r&quot;</span>);</div>
<div class="line"><a name="l00557"></a><span class="lineno">  557</span>&#160;      }</div>
<div class="line"><a name="l00558"></a><span class="lineno">  558</span>&#160;      <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00559"></a><span class="lineno">  559</span>&#160;        <span class="comment">/* (d) Reset the cursor back to the original location. */</span></div>
<div class="line"><a name="l00560"></a><span class="lineno">  560</span>&#160;        <span class="keywordflow">if</span> (current-&gt;cols &gt; here) {</div>
<div class="line"><a name="l00561"></a><span class="lineno">  561</span>&#160;          fd_printf(current-&gt;fd, <span class="stringliteral">&quot;\x1b[%dD&quot;</span>, current-&gt;cols - here);</div>
<div class="line"><a name="l00562"></a><span class="lineno">  562</span>&#160;        }</div>
<div class="line"><a name="l00563"></a><span class="lineno">  563</span>&#160;      }</div>
<div class="line"><a name="l00564"></a><span class="lineno">  564</span>&#160;    } <span class="comment">/* 1st query failed, doing nothing =&gt; default 80 */</span></div>
<div class="line"><a name="l00565"></a><span class="lineno">  565</span>&#160;  }</div>
<div class="line"><a name="l00566"></a><span class="lineno">  566</span>&#160;</div>
<div class="line"><a name="l00567"></a><span class="lineno">  567</span>&#160;  <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00568"></a><span class="lineno">  568</span>&#160;}</div>
<div class="line"><a name="l00569"></a><span class="lineno">  569</span>&#160;</div>
<div class="line"><a name="l00579"></a><span class="lineno">  579</span>&#160;<span class="keyword">static</span> <span class="keywordtype">int</span> check_special(<span class="keywordtype">int</span> fd)</div>
<div class="line"><a name="l00580"></a><span class="lineno">  580</span>&#160;{</div>
<div class="line"><a name="l00581"></a><span class="lineno">  581</span>&#160;  <span class="keywordtype">int</span> c = fd_read_char(fd, 50);</div>
<div class="line"><a name="l00582"></a><span class="lineno">  582</span>&#160;  <span class="keywordtype">int</span> c2;</div>
<div class="line"><a name="l00583"></a><span class="lineno">  583</span>&#160;</div>
<div class="line"><a name="l00584"></a><span class="lineno">  584</span>&#160;  <span class="keywordflow">if</span> (c &lt; 0) {</div>
<div class="line"><a name="l00585"></a><span class="lineno">  585</span>&#160;    <span class="keywordflow">return</span> 27;</div>
<div class="line"><a name="l00586"></a><span class="lineno">  586</span>&#160;  }</div>
<div class="line"><a name="l00587"></a><span class="lineno">  587</span>&#160;</div>
<div class="line"><a name="l00588"></a><span class="lineno">  588</span>&#160;  c2 = fd_read_char(fd, 50);</div>
<div class="line"><a name="l00589"></a><span class="lineno">  589</span>&#160;  <span class="keywordflow">if</span> (c2 &lt; 0) {</div>
<div class="line"><a name="l00590"></a><span class="lineno">  590</span>&#160;    <span class="keywordflow">return</span> c2;</div>
<div class="line"><a name="l00591"></a><span class="lineno">  591</span>&#160;  }</div>
<div class="line"><a name="l00592"></a><span class="lineno">  592</span>&#160;  <span class="keywordflow">if</span> (c == <span class="charliteral">&#39;[&#39;</span> || c == <span class="charliteral">&#39;O&#39;</span>) {</div>
<div class="line"><a name="l00593"></a><span class="lineno">  593</span>&#160;    <span class="comment">/* Potential arrow key */</span></div>
<div class="line"><a name="l00594"></a><span class="lineno">  594</span>&#160;    <span class="keywordflow">switch</span> (c2) {</div>
<div class="line"><a name="l00595"></a><span class="lineno">  595</span>&#160;    <span class="keywordflow">case</span> <span class="charliteral">&#39;A&#39;</span>:</div>
<div class="line"><a name="l00596"></a><span class="lineno">  596</span>&#160;      <span class="keywordflow">return</span> <a class="code" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2a9603b88584871325c356a3d426dbd4ee">SPECIAL_UP</a>;</div>
<div class="line"><a name="l00597"></a><span class="lineno">  597</span>&#160;    <span class="keywordflow">case</span> <span class="charliteral">&#39;B&#39;</span>:</div>
<div class="line"><a name="l00598"></a><span class="lineno">  598</span>&#160;      <span class="keywordflow">return</span> <a class="code" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2ac1f7282ba533a5bb36627566072e1c96">SPECIAL_DOWN</a>;</div>
<div class="line"><a name="l00599"></a><span class="lineno">  599</span>&#160;    <span class="keywordflow">case</span> <span class="charliteral">&#39;C&#39;</span>:</div>
<div class="line"><a name="l00600"></a><span class="lineno">  600</span>&#160;      <span class="keywordflow">return</span> <a class="code" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2a566021ede71ce2379d48f3d5cfba82af">SPECIAL_RIGHT</a>;</div>
<div class="line"><a name="l00601"></a><span class="lineno">  601</span>&#160;    <span class="keywordflow">case</span> <span class="charliteral">&#39;D&#39;</span>:</div>
<div class="line"><a name="l00602"></a><span class="lineno">  602</span>&#160;      <span class="keywordflow">return</span> <a class="code" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2a89b836c84eef5e4ca9f3c379a2980671">SPECIAL_LEFT</a>;</div>
<div class="line"><a name="l00603"></a><span class="lineno">  603</span>&#160;    <span class="keywordflow">case</span> <span class="charliteral">&#39;F&#39;</span>:</div>
<div class="line"><a name="l00604"></a><span class="lineno">  604</span>&#160;      <span class="keywordflow">return</span> <a class="code" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2a45a06e3e29156cc2313913928dd7aa8e">SPECIAL_END</a>;</div>
<div class="line"><a name="l00605"></a><span class="lineno">  605</span>&#160;    <span class="keywordflow">case</span> <span class="charliteral">&#39;H&#39;</span>:</div>
<div class="line"><a name="l00606"></a><span class="lineno">  606</span>&#160;      <span class="keywordflow">return</span> <a class="code" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2aca87972eab5fc7806ee15ee3e58f559c">SPECIAL_HOME</a>;</div>
<div class="line"><a name="l00607"></a><span class="lineno">  607</span>&#160;    }</div>
<div class="line"><a name="l00608"></a><span class="lineno">  608</span>&#160;  }</div>
<div class="line"><a name="l00609"></a><span class="lineno">  609</span>&#160;  <span class="keywordflow">if</span> (c == <span class="charliteral">&#39;[&#39;</span> &amp;&amp; c2 &gt;= <span class="charliteral">&#39;1&#39;</span> &amp;&amp; c2 &lt;= <span class="charliteral">&#39;8&#39;</span>) {</div>
<div class="line"><a name="l00610"></a><span class="lineno">  610</span>&#160;    <span class="comment">/* extended escape */</span></div>
<div class="line"><a name="l00611"></a><span class="lineno">  611</span>&#160;    c = fd_read_char(fd, 50);</div>
<div class="line"><a name="l00612"></a><span class="lineno">  612</span>&#160;    <span class="keywordflow">if</span> (c == <span class="charliteral">&#39;~&#39;</span>) {</div>
<div class="line"><a name="l00613"></a><span class="lineno">  613</span>&#160;      <span class="keywordflow">switch</span> (c2) {</div>
<div class="line"><a name="l00614"></a><span class="lineno">  614</span>&#160;      <span class="keywordflow">case</span> <span class="charliteral">&#39;2&#39;</span>:</div>
<div class="line"><a name="l00615"></a><span class="lineno">  615</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2a0fb03698c4a730460b623322a542edd6">SPECIAL_INSERT</a>;</div>
<div class="line"><a name="l00616"></a><span class="lineno">  616</span>&#160;      <span class="keywordflow">case</span> <span class="charliteral">&#39;3&#39;</span>:</div>
<div class="line"><a name="l00617"></a><span class="lineno">  617</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2a7e5e00feb2b8d9baad18b63aeba41d88">SPECIAL_DELETE</a>;</div>
<div class="line"><a name="l00618"></a><span class="lineno">  618</span>&#160;      <span class="keywordflow">case</span> <span class="charliteral">&#39;5&#39;</span>:</div>
<div class="line"><a name="l00619"></a><span class="lineno">  619</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2ac2180577128378038c179c1312e286b3">SPECIAL_PAGE_UP</a>;</div>
<div class="line"><a name="l00620"></a><span class="lineno">  620</span>&#160;      <span class="keywordflow">case</span> <span class="charliteral">&#39;6&#39;</span>:</div>
<div class="line"><a name="l00621"></a><span class="lineno">  621</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2a7a8d9d28a3f89dddbbfd9627746fba5f">SPECIAL_PAGE_DOWN</a>;</div>
<div class="line"><a name="l00622"></a><span class="lineno">  622</span>&#160;      <span class="keywordflow">case</span> <span class="charliteral">&#39;7&#39;</span>:</div>
<div class="line"><a name="l00623"></a><span class="lineno">  623</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2aca87972eab5fc7806ee15ee3e58f559c">SPECIAL_HOME</a>;</div>
<div class="line"><a name="l00624"></a><span class="lineno">  624</span>&#160;      <span class="keywordflow">case</span> <span class="charliteral">&#39;8&#39;</span>:</div>
<div class="line"><a name="l00625"></a><span class="lineno">  625</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2a45a06e3e29156cc2313913928dd7aa8e">SPECIAL_END</a>;</div>
<div class="line"><a name="l00626"></a><span class="lineno">  626</span>&#160;      }</div>
<div class="line"><a name="l00627"></a><span class="lineno">  627</span>&#160;    }</div>
<div class="line"><a name="l00628"></a><span class="lineno">  628</span>&#160;    <span class="keywordflow">while</span> (c != -1 &amp;&amp; c != <span class="charliteral">&#39;~&#39;</span>) {</div>
<div class="line"><a name="l00629"></a><span class="lineno">  629</span>&#160;      <span class="comment">/* .e.g \e[12~ or &#39;\e[11;2~   discard the complete sequence */</span></div>
<div class="line"><a name="l00630"></a><span class="lineno">  630</span>&#160;      c = fd_read_char(fd, 50);</div>
<div class="line"><a name="l00631"></a><span class="lineno">  631</span>&#160;    }</div>
<div class="line"><a name="l00632"></a><span class="lineno">  632</span>&#160;  }</div>
<div class="line"><a name="l00633"></a><span class="lineno">  633</span>&#160;</div>
<div class="line"><a name="l00634"></a><span class="lineno">  634</span>&#160;  <span class="keywordflow">return</span> <a class="code" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2ab579d28f9865e6813569cbf1929ce340">SPECIAL_NONE</a>;</div>
<div class="line"><a name="l00635"></a><span class="lineno">  635</span>&#160;}</div>
<div class="line"><a name="l00636"></a><span class="lineno">  636</span>&#160;<span class="preprocessor">#elif defined(USE_WINCONSOLE)</span></div>
<div class="line"><a name="l00637"></a><span class="lineno">  637</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00638"></a><span class="lineno">  638</span>&#160;<span class="keyword">static</span> <a class="code" href="a00392.xhtml#ga21dc16e4a3028a99c0be8f3943bfb699">DWORD</a> orig_consolemode = 0;</div>
<div class="line"><a name="l00639"></a><span class="lineno">  639</span>&#160;</div>
<div class="line"><a name="l00640"></a><span class="lineno">  640</span>&#160;<span class="keyword">static</span> <span class="keywordtype">int</span> enableRawMode(<span class="keyword">struct</span> current *current) {</div>
<div class="line"><a name="l00641"></a><span class="lineno">  641</span>&#160;  <a class="code" href="a00392.xhtml#ga21dc16e4a3028a99c0be8f3943bfb699">DWORD</a> n;</div>
<div class="line"><a name="l00642"></a><span class="lineno">  642</span>&#160;  INPUT_RECORD irec;</div>
<div class="line"><a name="l00643"></a><span class="lineno">  643</span>&#160;</div>
<div class="line"><a name="l00644"></a><span class="lineno">  644</span>&#160;  current-&gt;outh = GetStdHandle(STD_OUTPUT_HANDLE);</div>
<div class="line"><a name="l00645"></a><span class="lineno">  645</span>&#160;  current-&gt;inh = GetStdHandle(STD_INPUT_HANDLE);</div>
<div class="line"><a name="l00646"></a><span class="lineno">  646</span>&#160;</div>
<div class="line"><a name="l00647"></a><span class="lineno">  647</span>&#160;  <span class="keywordflow">if</span> (!PeekConsoleInput(current-&gt;inh, &amp;irec, 1, &amp;n)) {</div>
<div class="line"><a name="l00648"></a><span class="lineno">  648</span>&#160;    <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00649"></a><span class="lineno">  649</span>&#160;  }</div>
<div class="line"><a name="l00650"></a><span class="lineno">  650</span>&#160;  <span class="keywordflow">if</span> (getWindowSize(current) != 0) {</div>
<div class="line"><a name="l00651"></a><span class="lineno">  651</span>&#160;    <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00652"></a><span class="lineno">  652</span>&#160;  }</div>
<div class="line"><a name="l00653"></a><span class="lineno">  653</span>&#160;  <span class="keywordflow">if</span> (GetConsoleMode(current-&gt;inh, &amp;orig_consolemode)) {</div>
<div class="line"><a name="l00654"></a><span class="lineno">  654</span>&#160;    SetConsoleMode(current-&gt;inh, ENABLE_PROCESSED_INPUT);</div>
<div class="line"><a name="l00655"></a><span class="lineno">  655</span>&#160;  }</div>
<div class="line"><a name="l00656"></a><span class="lineno">  656</span>&#160;  <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00657"></a><span class="lineno">  657</span>&#160;}</div>
<div class="line"><a name="l00658"></a><span class="lineno">  658</span>&#160;</div>
<div class="line"><a name="l00659"></a><span class="lineno">  659</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> disableRawMode(<span class="keyword">struct</span> current *current)</div>
<div class="line"><a name="l00660"></a><span class="lineno">  660</span>&#160;{</div>
<div class="line"><a name="l00661"></a><span class="lineno">  661</span>&#160;  SetConsoleMode(current-&gt;inh, orig_consolemode);</div>
<div class="line"><a name="l00662"></a><span class="lineno">  662</span>&#160;}</div>
<div class="line"><a name="l00663"></a><span class="lineno">  663</span>&#160;</div>
<div class="line"><a name="l00664"></a><span class="lineno">  664</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> clearScreen(<span class="keyword">struct</span> current *current)</div>
<div class="line"><a name="l00665"></a><span class="lineno">  665</span>&#160;{</div>
<div class="line"><a name="l00666"></a><span class="lineno">  666</span>&#160;  COORD topleft = { 0, 0 };</div>
<div class="line"><a name="l00667"></a><span class="lineno">  667</span>&#160;  <a class="code" href="a00392.xhtml#ga21dc16e4a3028a99c0be8f3943bfb699">DWORD</a> n;</div>
<div class="line"><a name="l00668"></a><span class="lineno">  668</span>&#160;</div>
<div class="line"><a name="l00669"></a><span class="lineno">  669</span>&#160;  FillConsoleOutputCharacter(current-&gt;outh, <span class="charliteral">&#39; &#39;</span>,</div>
<div class="line"><a name="l00670"></a><span class="lineno">  670</span>&#160;    current-&gt;cols * current-&gt;rows, topleft, &amp;n);</div>
<div class="line"><a name="l00671"></a><span class="lineno">  671</span>&#160;  FillConsoleOutputAttribute(current-&gt;outh,</div>
<div class="line"><a name="l00672"></a><span class="lineno">  672</span>&#160;    FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN,</div>
<div class="line"><a name="l00673"></a><span class="lineno">  673</span>&#160;    current-&gt;cols * current-&gt;rows, topleft, &amp;n);</div>
<div class="line"><a name="l00674"></a><span class="lineno">  674</span>&#160;  SetConsoleCursorPosition(current-&gt;outh, topleft);</div>
<div class="line"><a name="l00675"></a><span class="lineno">  675</span>&#160;}</div>
<div class="line"><a name="l00676"></a><span class="lineno">  676</span>&#160;</div>
<div class="line"><a name="l00677"></a><span class="lineno">  677</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> cursorToLeft(<span class="keyword">struct</span> current *current)</div>
<div class="line"><a name="l00678"></a><span class="lineno">  678</span>&#160;{</div>
<div class="line"><a name="l00679"></a><span class="lineno">  679</span>&#160;  COORD pos = { 0, (SHORT)current-&gt;y };</div>
<div class="line"><a name="l00680"></a><span class="lineno">  680</span>&#160;  <a class="code" href="a00392.xhtml#ga21dc16e4a3028a99c0be8f3943bfb699">DWORD</a> n;</div>
<div class="line"><a name="l00681"></a><span class="lineno">  681</span>&#160;</div>
<div class="line"><a name="l00682"></a><span class="lineno">  682</span>&#160;  FillConsoleOutputAttribute(current-&gt;outh,</div>
<div class="line"><a name="l00683"></a><span class="lineno">  683</span>&#160;    FOREGROUND_RED | FOREGROUND_BLUE | FOREGROUND_GREEN, current-&gt;cols, pos, &amp;n);</div>
<div class="line"><a name="l00684"></a><span class="lineno">  684</span>&#160;  current-&gt;x = 0;</div>
<div class="line"><a name="l00685"></a><span class="lineno">  685</span>&#160;}</div>
<div class="line"><a name="l00686"></a><span class="lineno">  686</span>&#160;</div>
<div class="line"><a name="l00687"></a><span class="lineno">  687</span>&#160;<span class="keyword">static</span> <span class="keywordtype">int</span> outputChars(<span class="keyword">struct</span> current *current, <span class="keyword">const</span> <span class="keywordtype">char</span> *buf, <span class="keywordtype">int</span> len)</div>
<div class="line"><a name="l00688"></a><span class="lineno">  688</span>&#160;{</div>
<div class="line"><a name="l00689"></a><span class="lineno">  689</span>&#160;  COORD pos = { (SHORT)current-&gt;x, (SHORT)current-&gt;y };</div>
<div class="line"><a name="l00690"></a><span class="lineno">  690</span>&#160;  <a class="code" href="a00392.xhtml#ga21dc16e4a3028a99c0be8f3943bfb699">DWORD</a> n;</div>
<div class="line"><a name="l00691"></a><span class="lineno">  691</span>&#160;</div>
<div class="line"><a name="l00692"></a><span class="lineno">  692</span>&#160;  WriteConsoleOutputCharacter(current-&gt;outh, buf, len, pos, &amp;n);</div>
<div class="line"><a name="l00693"></a><span class="lineno">  693</span>&#160;  current-&gt;x += len;</div>
<div class="line"><a name="l00694"></a><span class="lineno">  694</span>&#160;  <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00695"></a><span class="lineno">  695</span>&#160;}</div>
<div class="line"><a name="l00696"></a><span class="lineno">  696</span>&#160;</div>
<div class="line"><a name="l00697"></a><span class="lineno">  697</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> outputControlChar(<span class="keyword">struct</span> current *current, <span class="keywordtype">char</span> ch)</div>
<div class="line"><a name="l00698"></a><span class="lineno">  698</span>&#160;{</div>
<div class="line"><a name="l00699"></a><span class="lineno">  699</span>&#160;  COORD pos = { (SHORT)current-&gt;x, (SHORT)current-&gt;y };</div>
<div class="line"><a name="l00700"></a><span class="lineno">  700</span>&#160;  <a class="code" href="a00392.xhtml#ga21dc16e4a3028a99c0be8f3943bfb699">DWORD</a> n;</div>
<div class="line"><a name="l00701"></a><span class="lineno">  701</span>&#160;</div>
<div class="line"><a name="l00702"></a><span class="lineno">  702</span>&#160;  FillConsoleOutputAttribute(current-&gt;outh, BACKGROUND_INTENSITY, 2, pos, &amp;n);</div>
<div class="line"><a name="l00703"></a><span class="lineno">  703</span>&#160;  outputChars(current, <span class="stringliteral">&quot;^&quot;</span>, 1);</div>
<div class="line"><a name="l00704"></a><span class="lineno">  704</span>&#160;  outputChars(current, &amp;ch, 1);</div>
<div class="line"><a name="l00705"></a><span class="lineno">  705</span>&#160;}</div>
<div class="line"><a name="l00706"></a><span class="lineno">  706</span>&#160;</div>
<div class="line"><a name="l00707"></a><span class="lineno">  707</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> eraseEol(<span class="keyword">struct</span> current *current)</div>
<div class="line"><a name="l00708"></a><span class="lineno">  708</span>&#160;{</div>
<div class="line"><a name="l00709"></a><span class="lineno">  709</span>&#160;  COORD pos = { (SHORT)current-&gt;x, (SHORT)current-&gt;y };</div>
<div class="line"><a name="l00710"></a><span class="lineno">  710</span>&#160;  <a class="code" href="a00392.xhtml#ga21dc16e4a3028a99c0be8f3943bfb699">DWORD</a> n;</div>
<div class="line"><a name="l00711"></a><span class="lineno">  711</span>&#160;</div>
<div class="line"><a name="l00712"></a><span class="lineno">  712</span>&#160;  FillConsoleOutputCharacter(current-&gt;outh, <span class="charliteral">&#39; &#39;</span>, current-&gt;cols - current-&gt;x, pos, &amp;n);</div>
<div class="line"><a name="l00713"></a><span class="lineno">  713</span>&#160;}</div>
<div class="line"><a name="l00714"></a><span class="lineno">  714</span>&#160;</div>
<div class="line"><a name="l00715"></a><span class="lineno">  715</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> setCursorPos(<span class="keyword">struct</span> current *current, <span class="keywordtype">int</span> <a class="code" href="a00380.xhtml#a0013363a9b9db12e50b9307b3d8be7cb">x</a>)</div>
<div class="line"><a name="l00716"></a><span class="lineno">  716</span>&#160;{</div>
<div class="line"><a name="l00717"></a><span class="lineno">  717</span>&#160;  COORD pos = { (SHORT)x, (SHORT)current-&gt;y };</div>
<div class="line"><a name="l00718"></a><span class="lineno">  718</span>&#160;</div>
<div class="line"><a name="l00719"></a><span class="lineno">  719</span>&#160;  SetConsoleCursorPosition(current-&gt;outh, pos);</div>
<div class="line"><a name="l00720"></a><span class="lineno">  720</span>&#160;  current-&gt;x = <a class="code" href="a00380.xhtml#a0013363a9b9db12e50b9307b3d8be7cb">x</a>;</div>
<div class="line"><a name="l00721"></a><span class="lineno">  721</span>&#160;}</div>
<div class="line"><a name="l00722"></a><span class="lineno">  722</span>&#160;</div>
<div class="line"><a name="l00723"></a><span class="lineno">  723</span>&#160;<span class="keyword">static</span> <span class="keywordtype">int</span> fd_read(<span class="keyword">struct</span> current *current)</div>
<div class="line"><a name="l00724"></a><span class="lineno">  724</span>&#160;{</div>
<div class="line"><a name="l00725"></a><span class="lineno">  725</span>&#160;  <span class="keywordflow">while</span> (1) {</div>
<div class="line"><a name="l00726"></a><span class="lineno">  726</span>&#160;    INPUT_RECORD irec;</div>
<div class="line"><a name="l00727"></a><span class="lineno">  727</span>&#160;    <a class="code" href="a00392.xhtml#ga21dc16e4a3028a99c0be8f3943bfb699">DWORD</a> n;</div>
<div class="line"><a name="l00728"></a><span class="lineno">  728</span>&#160;    <span class="keywordflow">if</span> (WaitForSingleObject(current-&gt;inh, INFINITE) != WAIT_OBJECT_0) {</div>
<div class="line"><a name="l00729"></a><span class="lineno">  729</span>&#160;      <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00730"></a><span class="lineno">  730</span>&#160;    }</div>
<div class="line"><a name="l00731"></a><span class="lineno">  731</span>&#160;    <span class="keywordflow">if</span> (!ReadConsoleInput(current-&gt;inh, &amp;irec, 1, &amp;n)) {</div>
<div class="line"><a name="l00732"></a><span class="lineno">  732</span>&#160;      <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00733"></a><span class="lineno">  733</span>&#160;    }</div>
<div class="line"><a name="l00734"></a><span class="lineno">  734</span>&#160;    <span class="keywordflow">if</span> (irec.EventType == KEY_EVENT &amp;&amp; irec.Event.KeyEvent.bKeyDown) {</div>
<div class="line"><a name="l00735"></a><span class="lineno">  735</span>&#160;      KEY_EVENT_RECORD *k = &amp;irec.Event.KeyEvent;</div>
<div class="line"><a name="l00736"></a><span class="lineno">  736</span>&#160;      <span class="keywordflow">if</span> (k-&gt;dwControlKeyState &amp; ENHANCED_KEY) {</div>
<div class="line"><a name="l00737"></a><span class="lineno">  737</span>&#160;        <span class="keywordflow">switch</span> (k-&gt;wVirtualKeyCode) {</div>
<div class="line"><a name="l00738"></a><span class="lineno">  738</span>&#160;        <span class="keywordflow">case</span> VK_LEFT:</div>
<div class="line"><a name="l00739"></a><span class="lineno">  739</span>&#160;          <span class="keywordflow">return</span> <a class="code" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2a89b836c84eef5e4ca9f3c379a2980671">SPECIAL_LEFT</a>;</div>
<div class="line"><a name="l00740"></a><span class="lineno">  740</span>&#160;        <span class="keywordflow">case</span> VK_RIGHT:</div>
<div class="line"><a name="l00741"></a><span class="lineno">  741</span>&#160;          <span class="keywordflow">return</span> <a class="code" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2a566021ede71ce2379d48f3d5cfba82af">SPECIAL_RIGHT</a>;</div>
<div class="line"><a name="l00742"></a><span class="lineno">  742</span>&#160;        <span class="keywordflow">case</span> VK_UP:</div>
<div class="line"><a name="l00743"></a><span class="lineno">  743</span>&#160;          <span class="keywordflow">return</span> <a class="code" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2a9603b88584871325c356a3d426dbd4ee">SPECIAL_UP</a>;</div>
<div class="line"><a name="l00744"></a><span class="lineno">  744</span>&#160;        <span class="keywordflow">case</span> VK_DOWN:</div>
<div class="line"><a name="l00745"></a><span class="lineno">  745</span>&#160;          <span class="keywordflow">return</span> <a class="code" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2ac1f7282ba533a5bb36627566072e1c96">SPECIAL_DOWN</a>;</div>
<div class="line"><a name="l00746"></a><span class="lineno">  746</span>&#160;        <span class="keywordflow">case</span> VK_INSERT:</div>
<div class="line"><a name="l00747"></a><span class="lineno">  747</span>&#160;          <span class="keywordflow">return</span> <a class="code" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2a0fb03698c4a730460b623322a542edd6">SPECIAL_INSERT</a>;</div>
<div class="line"><a name="l00748"></a><span class="lineno">  748</span>&#160;        <span class="keywordflow">case</span> VK_DELETE:</div>
<div class="line"><a name="l00749"></a><span class="lineno">  749</span>&#160;          <span class="keywordflow">return</span> <a class="code" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2a7e5e00feb2b8d9baad18b63aeba41d88">SPECIAL_DELETE</a>;</div>
<div class="line"><a name="l00750"></a><span class="lineno">  750</span>&#160;        <span class="keywordflow">case</span> VK_HOME:</div>
<div class="line"><a name="l00751"></a><span class="lineno">  751</span>&#160;          <span class="keywordflow">return</span> <a class="code" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2aca87972eab5fc7806ee15ee3e58f559c">SPECIAL_HOME</a>;</div>
<div class="line"><a name="l00752"></a><span class="lineno">  752</span>&#160;        <span class="keywordflow">case</span> VK_END:</div>
<div class="line"><a name="l00753"></a><span class="lineno">  753</span>&#160;          <span class="keywordflow">return</span> <a class="code" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2a45a06e3e29156cc2313913928dd7aa8e">SPECIAL_END</a>;</div>
<div class="line"><a name="l00754"></a><span class="lineno">  754</span>&#160;        <span class="keywordflow">case</span> VK_PRIOR:</div>
<div class="line"><a name="l00755"></a><span class="lineno">  755</span>&#160;          <span class="keywordflow">return</span> <a class="code" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2ac2180577128378038c179c1312e286b3">SPECIAL_PAGE_UP</a>;</div>
<div class="line"><a name="l00756"></a><span class="lineno">  756</span>&#160;        <span class="keywordflow">case</span> VK_NEXT:</div>
<div class="line"><a name="l00757"></a><span class="lineno">  757</span>&#160;          <span class="keywordflow">return</span> <a class="code" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2a7a8d9d28a3f89dddbbfd9627746fba5f">SPECIAL_PAGE_DOWN</a>;</div>
<div class="line"><a name="l00758"></a><span class="lineno">  758</span>&#160;        }</div>
<div class="line"><a name="l00759"></a><span class="lineno">  759</span>&#160;      }</div>
<div class="line"><a name="l00760"></a><span class="lineno">  760</span>&#160;      <span class="comment">/* Note that control characters are already translated in AsciiChar */</span></div>
<div class="line"><a name="l00761"></a><span class="lineno">  761</span>&#160;      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (k-&gt;wVirtualKeyCode == VK_CONTROL)</div>
<div class="line"><a name="l00762"></a><span class="lineno">  762</span>&#160;        <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l00763"></a><span class="lineno">  763</span>&#160;      <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00764"></a><span class="lineno">  764</span>&#160;<span class="preprocessor">#ifdef USE_UTF8</span></div>
<div class="line"><a name="l00765"></a><span class="lineno">  765</span>&#160;<span class="preprocessor"></span>        <span class="keywordflow">return</span> k-&gt;uChar.UnicodeChar;</div>
<div class="line"><a name="l00766"></a><span class="lineno">  766</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00767"></a><span class="lineno">  767</span>&#160;<span class="preprocessor"></span>        <span class="keywordflow">return</span> k-&gt;uChar.AsciiChar;</div>
<div class="line"><a name="l00768"></a><span class="lineno">  768</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00769"></a><span class="lineno">  769</span>&#160;<span class="preprocessor"></span>      }</div>
<div class="line"><a name="l00770"></a><span class="lineno">  770</span>&#160;    }</div>
<div class="line"><a name="l00771"></a><span class="lineno">  771</span>&#160;  }</div>
<div class="line"><a name="l00772"></a><span class="lineno">  772</span>&#160;  <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00773"></a><span class="lineno">  773</span>&#160;}</div>
<div class="line"><a name="l00774"></a><span class="lineno">  774</span>&#160;</div>
<div class="line"><a name="l00775"></a><span class="lineno">  775</span>&#160;<span class="keyword">static</span> <span class="keywordtype">int</span> countColorControlChars(<span class="keyword">const</span> <span class="keywordtype">char</span>* prompt)</div>
<div class="line"><a name="l00776"></a><span class="lineno">  776</span>&#160;{</div>
<div class="line"><a name="l00777"></a><span class="lineno">  777</span>&#160;  <span class="comment">/* For windows we assume that there are no embedded ansi color</span></div>
<div class="line"><a name="l00778"></a><span class="lineno">  778</span>&#160;<span class="comment">  * control sequences.</span></div>
<div class="line"><a name="l00779"></a><span class="lineno">  779</span>&#160;<span class="comment">  */</span></div>
<div class="line"><a name="l00780"></a><span class="lineno">  780</span>&#160;  <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00781"></a><span class="lineno">  781</span>&#160;}</div>
<div class="line"><a name="l00782"></a><span class="lineno">  782</span>&#160;</div>
<div class="line"><a name="l00783"></a><span class="lineno">  783</span>&#160;<span class="keyword">static</span> <span class="keywordtype">int</span> getWindowSize(<span class="keyword">struct</span> current *current)</div>
<div class="line"><a name="l00784"></a><span class="lineno">  784</span>&#160;{</div>
<div class="line"><a name="l00785"></a><span class="lineno">  785</span>&#160;  CONSOLE_SCREEN_BUFFER_INFO info;</div>
<div class="line"><a name="l00786"></a><span class="lineno">  786</span>&#160;  <span class="keywordflow">if</span> (!GetConsoleScreenBufferInfo(current-&gt;outh, &amp;info)) {</div>
<div class="line"><a name="l00787"></a><span class="lineno">  787</span>&#160;    <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00788"></a><span class="lineno">  788</span>&#160;  }</div>
<div class="line"><a name="l00789"></a><span class="lineno">  789</span>&#160;  current-&gt;cols = info.dwSize.X;</div>
<div class="line"><a name="l00790"></a><span class="lineno">  790</span>&#160;  current-&gt;rows = info.dwSize.Y;</div>
<div class="line"><a name="l00791"></a><span class="lineno">  791</span>&#160;  <span class="keywordflow">if</span> (current-&gt;cols &lt;= 0 || current-&gt;rows &lt;= 0) {</div>
<div class="line"><a name="l00792"></a><span class="lineno">  792</span>&#160;    current-&gt;cols = 80;</div>
<div class="line"><a name="l00793"></a><span class="lineno">  793</span>&#160;    <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00794"></a><span class="lineno">  794</span>&#160;  }</div>
<div class="line"><a name="l00795"></a><span class="lineno">  795</span>&#160;  current-&gt;y = info.dwCursorPosition.Y;</div>
<div class="line"><a name="l00796"></a><span class="lineno">  796</span>&#160;  current-&gt;x = info.dwCursorPosition.X;</div>
<div class="line"><a name="l00797"></a><span class="lineno">  797</span>&#160;  <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00798"></a><span class="lineno">  798</span>&#160;}</div>
<div class="line"><a name="l00799"></a><span class="lineno">  799</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00800"></a><span class="lineno">  800</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00801"></a><span class="lineno">  801</span>&#160;<span class="keyword">static</span> <span class="keywordtype">int</span> utf8_getchars(<span class="keywordtype">char</span> *buf, <span class="keywordtype">int</span> c)</div>
<div class="line"><a name="l00802"></a><span class="lineno">  802</span>&#160;{</div>
<div class="line"><a name="l00803"></a><span class="lineno">  803</span>&#160;<span class="preprocessor">#ifdef USE_UTF8</span></div>
<div class="line"><a name="l00804"></a><span class="lineno">  804</span>&#160;<span class="preprocessor"></span>  <span class="keywordflow">return</span> utf8_fromunicode(buf, c);</div>
<div class="line"><a name="l00805"></a><span class="lineno">  805</span>&#160;<span class="preprocessor">#else</span></div>
<div class="line"><a name="l00806"></a><span class="lineno">  806</span>&#160;<span class="preprocessor"></span>  *buf = c;</div>
<div class="line"><a name="l00807"></a><span class="lineno">  807</span>&#160;  <span class="keywordflow">return</span> 1;</div>
<div class="line"><a name="l00808"></a><span class="lineno">  808</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00809"></a><span class="lineno">  809</span>&#160;<span class="preprocessor"></span>}</div>
<div class="line"><a name="l00810"></a><span class="lineno">  810</span>&#160;</div>
<div class="line"><a name="l00815"></a><span class="lineno">  815</span>&#160;<span class="keyword">static</span> <span class="keywordtype">int</span> get_char(<span class="keyword">struct</span> current *current, <span class="keywordtype">int</span> pos)</div>
<div class="line"><a name="l00816"></a><span class="lineno">  816</span>&#160;{</div>
<div class="line"><a name="l00817"></a><span class="lineno">  817</span>&#160;  <span class="keywordflow">if</span> (pos &gt;= 0 &amp;&amp; pos &lt; current-&gt;chars) {</div>
<div class="line"><a name="l00818"></a><span class="lineno">  818</span>&#160;    <span class="keywordtype">int</span> c;</div>
<div class="line"><a name="l00819"></a><span class="lineno">  819</span>&#160;    <span class="keywordtype">int</span> i = <a class="code" href="a00272.xhtml#a8b9f26938d197fd630506367718c8f8d">utf8_index</a>(current-&gt;buf, pos);</div>
<div class="line"><a name="l00820"></a><span class="lineno">  820</span>&#160;    (void)<a class="code" href="a00272.xhtml#a6e220f61f15dae8999af352902c47889">utf8_tounicode</a>(current-&gt;buf + i, &amp;c);</div>
<div class="line"><a name="l00821"></a><span class="lineno">  821</span>&#160;    <span class="keywordflow">return</span> c;</div>
<div class="line"><a name="l00822"></a><span class="lineno">  822</span>&#160;  }</div>
<div class="line"><a name="l00823"></a><span class="lineno">  823</span>&#160;  <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l00824"></a><span class="lineno">  824</span>&#160;}</div>
<div class="line"><a name="l00825"></a><span class="lineno">  825</span>&#160;</div>
<div class="line"><a name="l00826"></a><span class="lineno">  826</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> refreshLine(<span class="keyword">const</span> <span class="keywordtype">char</span> *prompt, <span class="keyword">struct</span> current *current)</div>
<div class="line"><a name="l00827"></a><span class="lineno">  827</span>&#160;{</div>
<div class="line"><a name="l00828"></a><span class="lineno">  828</span>&#160;  <span class="keywordtype">int</span> plen;</div>
<div class="line"><a name="l00829"></a><span class="lineno">  829</span>&#160;  <span class="keywordtype">int</span> pchars;</div>
<div class="line"><a name="l00830"></a><span class="lineno">  830</span>&#160;  <span class="keywordtype">int</span> backup = 0;</div>
<div class="line"><a name="l00831"></a><span class="lineno">  831</span>&#160;  <span class="keywordtype">int</span> i;</div>
<div class="line"><a name="l00832"></a><span class="lineno">  832</span>&#160;  <span class="keyword">const</span> <span class="keywordtype">char</span> *buf = current-&gt;buf;</div>
<div class="line"><a name="l00833"></a><span class="lineno">  833</span>&#160;  <span class="keywordtype">int</span> chars = current-&gt;chars;</div>
<div class="line"><a name="l00834"></a><span class="lineno">  834</span>&#160;  <span class="keywordtype">int</span> pos = current-&gt;pos;</div>
<div class="line"><a name="l00835"></a><span class="lineno">  835</span>&#160;  <span class="keywordtype">int</span> b;</div>
<div class="line"><a name="l00836"></a><span class="lineno">  836</span>&#160;  <span class="keywordtype">int</span> ch;</div>
<div class="line"><a name="l00837"></a><span class="lineno">  837</span>&#160;  <span class="keywordtype">int</span> n;</div>
<div class="line"><a name="l00838"></a><span class="lineno">  838</span>&#160;</div>
<div class="line"><a name="l00839"></a><span class="lineno">  839</span>&#160;  <span class="comment">/* Should intercept SIGWINCH. For now, just get the size every time */</span></div>
<div class="line"><a name="l00840"></a><span class="lineno">  840</span>&#160;  getWindowSize(current);</div>
<div class="line"><a name="l00841"></a><span class="lineno">  841</span>&#160;</div>
<div class="line"><a name="l00842"></a><span class="lineno">  842</span>&#160;  plen = strlen(prompt);</div>
<div class="line"><a name="l00843"></a><span class="lineno">  843</span>&#160;  pchars = <a class="code" href="a00272.xhtml#a5527a901abff4a6ec627bede6bd4ff87">utf8_strlen</a>(prompt, plen);</div>
<div class="line"><a name="l00844"></a><span class="lineno">  844</span>&#160;</div>
<div class="line"><a name="l00845"></a><span class="lineno">  845</span>&#160;  <span class="comment">/* Scan the prompt for embedded ansi color control sequences and</span></div>
<div class="line"><a name="l00846"></a><span class="lineno">  846</span>&#160;<span class="comment">  * discount them as characters/columns.</span></div>
<div class="line"><a name="l00847"></a><span class="lineno">  847</span>&#160;<span class="comment">  */</span></div>
<div class="line"><a name="l00848"></a><span class="lineno">  848</span>&#160;  pchars -= countColorControlChars(prompt);</div>
<div class="line"><a name="l00849"></a><span class="lineno">  849</span>&#160;</div>
<div class="line"><a name="l00850"></a><span class="lineno">  850</span>&#160;  <span class="comment">/* Account for a line which is too long to fit in the window.</span></div>
<div class="line"><a name="l00851"></a><span class="lineno">  851</span>&#160;<span class="comment">  * Note that control chars require an extra column</span></div>
<div class="line"><a name="l00852"></a><span class="lineno">  852</span>&#160;<span class="comment">  */</span></div>
<div class="line"><a name="l00853"></a><span class="lineno">  853</span>&#160;</div>
<div class="line"><a name="l00854"></a><span class="lineno">  854</span>&#160;  <span class="comment">/* How many cols are required to the left of &#39;pos&#39;?</span></div>
<div class="line"><a name="l00855"></a><span class="lineno">  855</span>&#160;<span class="comment">  * The prompt, plus one extra for each control char</span></div>
<div class="line"><a name="l00856"></a><span class="lineno">  856</span>&#160;<span class="comment">  */</span></div>
<div class="line"><a name="l00857"></a><span class="lineno">  857</span>&#160;  n = pchars + <a class="code" href="a00272.xhtml#a5527a901abff4a6ec627bede6bd4ff87">utf8_strlen</a>(buf, current-&gt;len);</div>
<div class="line"><a name="l00858"></a><span class="lineno">  858</span>&#160;  b = 0;</div>
<div class="line"><a name="l00859"></a><span class="lineno">  859</span>&#160;  <span class="keywordflow">for</span> (i = 0; i &lt; pos; i++) {</div>
<div class="line"><a name="l00860"></a><span class="lineno">  860</span>&#160;    b += <a class="code" href="a00272.xhtml#a6e220f61f15dae8999af352902c47889">utf8_tounicode</a>(buf + b, &amp;ch);</div>
<div class="line"><a name="l00861"></a><span class="lineno">  861</span>&#160;    <span class="keywordflow">if</span> (ch &lt; <span class="charliteral">&#39; &#39;</span>) {</div>
<div class="line"><a name="l00862"></a><span class="lineno">  862</span>&#160;      n++;</div>
<div class="line"><a name="l00863"></a><span class="lineno">  863</span>&#160;    }</div>
<div class="line"><a name="l00864"></a><span class="lineno">  864</span>&#160;  }</div>
<div class="line"><a name="l00865"></a><span class="lineno">  865</span>&#160;</div>
<div class="line"><a name="l00866"></a><span class="lineno">  866</span>&#160;  <span class="comment">/* If too many are needed, strip chars off the front of &#39;buf&#39;</span></div>
<div class="line"><a name="l00867"></a><span class="lineno">  867</span>&#160;<span class="comment">  * until it fits. Note that if the current char is a control character,</span></div>
<div class="line"><a name="l00868"></a><span class="lineno">  868</span>&#160;<span class="comment">  * we need one extra col.</span></div>
<div class="line"><a name="l00869"></a><span class="lineno">  869</span>&#160;<span class="comment">  */</span></div>
<div class="line"><a name="l00870"></a><span class="lineno">  870</span>&#160;  <span class="keywordflow">if</span> (current-&gt;pos &lt; current-&gt;chars &amp;&amp; get_char(current, current-&gt;pos) &lt; <span class="charliteral">&#39; &#39;</span>) {</div>
<div class="line"><a name="l00871"></a><span class="lineno">  871</span>&#160;    n++;</div>
<div class="line"><a name="l00872"></a><span class="lineno">  872</span>&#160;  }</div>
<div class="line"><a name="l00873"></a><span class="lineno">  873</span>&#160;</div>
<div class="line"><a name="l00874"></a><span class="lineno">  874</span>&#160;  <span class="keywordflow">while</span> (n &gt;= current-&gt;cols &amp;&amp; pos &gt; 0) {</div>
<div class="line"><a name="l00875"></a><span class="lineno">  875</span>&#160;    b = <a class="code" href="a00272.xhtml#a6e220f61f15dae8999af352902c47889">utf8_tounicode</a>(buf, &amp;ch);</div>
<div class="line"><a name="l00876"></a><span class="lineno">  876</span>&#160;    <span class="keywordflow">if</span> (ch &lt; <span class="charliteral">&#39; &#39;</span>) {</div>
<div class="line"><a name="l00877"></a><span class="lineno">  877</span>&#160;      n--;</div>
<div class="line"><a name="l00878"></a><span class="lineno">  878</span>&#160;    }</div>
<div class="line"><a name="l00879"></a><span class="lineno">  879</span>&#160;    n--;</div>
<div class="line"><a name="l00880"></a><span class="lineno">  880</span>&#160;    buf += b;</div>
<div class="line"><a name="l00881"></a><span class="lineno">  881</span>&#160;    pos--;</div>
<div class="line"><a name="l00882"></a><span class="lineno">  882</span>&#160;    chars--;</div>
<div class="line"><a name="l00883"></a><span class="lineno">  883</span>&#160;  }</div>
<div class="line"><a name="l00884"></a><span class="lineno">  884</span>&#160;</div>
<div class="line"><a name="l00885"></a><span class="lineno">  885</span>&#160;  <span class="comment">/* Cursor to left edge, then the prompt */</span></div>
<div class="line"><a name="l00886"></a><span class="lineno">  886</span>&#160;  cursorToLeft(current);</div>
<div class="line"><a name="l00887"></a><span class="lineno">  887</span>&#160;  outputChars(current, prompt, plen);</div>
<div class="line"><a name="l00888"></a><span class="lineno">  888</span>&#160;</div>
<div class="line"><a name="l00889"></a><span class="lineno">  889</span>&#160;  <span class="comment">/* Now the current buffer content */</span></div>
<div class="line"><a name="l00890"></a><span class="lineno">  890</span>&#160;</div>
<div class="line"><a name="l00891"></a><span class="lineno">  891</span>&#160;  <span class="comment">/* Need special handling for control characters.</span></div>
<div class="line"><a name="l00892"></a><span class="lineno">  892</span>&#160;<span class="comment">  * If we hit &#39;cols&#39;, stop.</span></div>
<div class="line"><a name="l00893"></a><span class="lineno">  893</span>&#160;<span class="comment">  */</span></div>
<div class="line"><a name="l00894"></a><span class="lineno">  894</span>&#160;  b = 0; <span class="comment">/* unwritted bytes */</span></div>
<div class="line"><a name="l00895"></a><span class="lineno">  895</span>&#160;  n = 0; <span class="comment">/* How many control chars were written */</span></div>
<div class="line"><a name="l00896"></a><span class="lineno">  896</span>&#160;  <span class="keywordflow">for</span> (i = 0; i &lt; chars; i++) {</div>
<div class="line"><a name="l00897"></a><span class="lineno">  897</span>&#160;    <span class="keywordtype">int</span> ch;</div>
<div class="line"><a name="l00898"></a><span class="lineno">  898</span>&#160;    <span class="keywordtype">int</span> w = <a class="code" href="a00272.xhtml#a6e220f61f15dae8999af352902c47889">utf8_tounicode</a>(buf + b, &amp;ch);</div>
<div class="line"><a name="l00899"></a><span class="lineno">  899</span>&#160;    <span class="keywordflow">if</span> (ch &lt; <span class="charliteral">&#39; &#39;</span>) {</div>
<div class="line"><a name="l00900"></a><span class="lineno">  900</span>&#160;      n++;</div>
<div class="line"><a name="l00901"></a><span class="lineno">  901</span>&#160;    }</div>
<div class="line"><a name="l00902"></a><span class="lineno">  902</span>&#160;    <span class="keywordflow">if</span> (pchars + i + n &gt;= current-&gt;cols) {</div>
<div class="line"><a name="l00903"></a><span class="lineno">  903</span>&#160;      <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l00904"></a><span class="lineno">  904</span>&#160;    }</div>
<div class="line"><a name="l00905"></a><span class="lineno">  905</span>&#160;    <span class="keywordflow">if</span> (ch &lt; <span class="charliteral">&#39; &#39;</span>) {</div>
<div class="line"><a name="l00906"></a><span class="lineno">  906</span>&#160;      <span class="comment">/* A control character, so write the buffer so far */</span></div>
<div class="line"><a name="l00907"></a><span class="lineno">  907</span>&#160;      outputChars(current, buf, b);</div>
<div class="line"><a name="l00908"></a><span class="lineno">  908</span>&#160;      buf += b + w;</div>
<div class="line"><a name="l00909"></a><span class="lineno">  909</span>&#160;      b = 0;</div>
<div class="line"><a name="l00910"></a><span class="lineno">  910</span>&#160;      outputControlChar(current, ch + <span class="charliteral">&#39;@&#39;</span>);</div>
<div class="line"><a name="l00911"></a><span class="lineno">  911</span>&#160;      <span class="keywordflow">if</span> (i &lt; pos) {</div>
<div class="line"><a name="l00912"></a><span class="lineno">  912</span>&#160;        backup++;</div>
<div class="line"><a name="l00913"></a><span class="lineno">  913</span>&#160;      }</div>
<div class="line"><a name="l00914"></a><span class="lineno">  914</span>&#160;    }</div>
<div class="line"><a name="l00915"></a><span class="lineno">  915</span>&#160;    <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l00916"></a><span class="lineno">  916</span>&#160;      b += w;</div>
<div class="line"><a name="l00917"></a><span class="lineno">  917</span>&#160;    }</div>
<div class="line"><a name="l00918"></a><span class="lineno">  918</span>&#160;  }</div>
<div class="line"><a name="l00919"></a><span class="lineno">  919</span>&#160;  outputChars(current, buf, b);</div>
<div class="line"><a name="l00920"></a><span class="lineno">  920</span>&#160;</div>
<div class="line"><a name="l00921"></a><span class="lineno">  921</span>&#160;  <span class="comment">/* Erase to right, move cursor to original position */</span></div>
<div class="line"><a name="l00922"></a><span class="lineno">  922</span>&#160;  eraseEol(current);</div>
<div class="line"><a name="l00923"></a><span class="lineno">  923</span>&#160;  setCursorPos(current, pos + pchars + backup);</div>
<div class="line"><a name="l00924"></a><span class="lineno">  924</span>&#160;}</div>
<div class="line"><a name="l00925"></a><span class="lineno">  925</span>&#160;</div>
<div class="line"><a name="l00926"></a><span class="lineno">  926</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> set_current(<span class="keyword">struct</span> current *current, <span class="keyword">const</span> <span class="keywordtype">char</span> *str)</div>
<div class="line"><a name="l00927"></a><span class="lineno">  927</span>&#160;{</div>
<div class="line"><a name="l00928"></a><span class="lineno">  928</span>&#160;  strncpy(current-&gt;buf, str, current-&gt;bufmax);</div>
<div class="line"><a name="l00929"></a><span class="lineno">  929</span>&#160;  current-&gt;buf[current-&gt;bufmax - 1] = 0;</div>
<div class="line"><a name="l00930"></a><span class="lineno">  930</span>&#160;  current-&gt;len = strlen(current-&gt;buf);</div>
<div class="line"><a name="l00931"></a><span class="lineno">  931</span>&#160;  current-&gt;pos = current-&gt;chars = <a class="code" href="a00272.xhtml#a5527a901abff4a6ec627bede6bd4ff87">utf8_strlen</a>(current-&gt;buf, current-&gt;len);</div>
<div class="line"><a name="l00932"></a><span class="lineno">  932</span>&#160;}</div>
<div class="line"><a name="l00933"></a><span class="lineno">  933</span>&#160;</div>
<div class="line"><a name="l00934"></a><span class="lineno">  934</span>&#160;<span class="keyword">static</span> <span class="keywordtype">int</span> has_room(<span class="keyword">struct</span> current *current, <span class="keywordtype">int</span> bytes)</div>
<div class="line"><a name="l00935"></a><span class="lineno">  935</span>&#160;{</div>
<div class="line"><a name="l00936"></a><span class="lineno">  936</span>&#160;  <span class="keywordflow">return</span> current-&gt;len + bytes &lt; current-&gt;bufmax - 1;</div>
<div class="line"><a name="l00937"></a><span class="lineno">  937</span>&#160;}</div>
<div class="line"><a name="l00938"></a><span class="lineno">  938</span>&#160;</div>
<div class="line"><a name="l00945"></a><span class="lineno">  945</span>&#160;<span class="keyword">static</span> <span class="keywordtype">int</span> remove_char(<span class="keyword">struct</span> current *current, <span class="keywordtype">int</span> pos)</div>
<div class="line"><a name="l00946"></a><span class="lineno">  946</span>&#160;{</div>
<div class="line"><a name="l00947"></a><span class="lineno">  947</span>&#160;  <span class="keywordflow">if</span> (pos &gt;= 0 &amp;&amp; pos &lt; current-&gt;chars) {</div>
<div class="line"><a name="l00948"></a><span class="lineno">  948</span>&#160;    <span class="keywordtype">int</span> <a class="code" href="a00380.xhtml#a7709843a973932e0b1313ac1628ece59">p1</a>, <a class="code" href="a00380.xhtml#a8cd39b525ac87092acb7f7bd4be6911a">p2</a>;</div>
<div class="line"><a name="l00949"></a><span class="lineno">  949</span>&#160;    <span class="keywordtype">int</span> ret = 1;</div>
<div class="line"><a name="l00950"></a><span class="lineno">  950</span>&#160;    p1 = <a class="code" href="a00272.xhtml#a8b9f26938d197fd630506367718c8f8d">utf8_index</a>(current-&gt;buf, pos);</div>
<div class="line"><a name="l00951"></a><span class="lineno">  951</span>&#160;    p2 = p1 + <a class="code" href="a00272.xhtml#a8b9f26938d197fd630506367718c8f8d">utf8_index</a>(current-&gt;buf + p1, 1);</div>
<div class="line"><a name="l00952"></a><span class="lineno">  952</span>&#160;</div>
<div class="line"><a name="l00953"></a><span class="lineno">  953</span>&#160;<span class="preprocessor">#ifdef USE_TERMIOS</span></div>
<div class="line"><a name="l00954"></a><span class="lineno">  954</span>&#160;<span class="preprocessor"></span>    <span class="comment">/* optimise remove char in the case of removing the last char */</span></div>
<div class="line"><a name="l00955"></a><span class="lineno">  955</span>&#160;    <span class="keywordflow">if</span> (current-&gt;pos == pos + 1 &amp;&amp; current-&gt;pos == current-&gt;chars) {</div>
<div class="line"><a name="l00956"></a><span class="lineno">  956</span>&#160;      <span class="keywordflow">if</span> (current-&gt;buf[pos] &gt;= <span class="charliteral">&#39; &#39;</span> &amp;&amp; <a class="code" href="a00272.xhtml#a5527a901abff4a6ec627bede6bd4ff87">utf8_strlen</a>(current-&gt;prompt, -1) + <a class="code" href="a00272.xhtml#a5527a901abff4a6ec627bede6bd4ff87">utf8_strlen</a>(current-&gt;buf, current-&gt;len) &lt; current-&gt;cols - 1) {</div>
<div class="line"><a name="l00957"></a><span class="lineno">  957</span>&#160;        ret = 2;</div>
<div class="line"><a name="l00958"></a><span class="lineno">  958</span>&#160;        fd_printf(current-&gt;fd, <span class="stringliteral">&quot;\b \b&quot;</span>);</div>
<div class="line"><a name="l00959"></a><span class="lineno">  959</span>&#160;      }</div>
<div class="line"><a name="l00960"></a><span class="lineno">  960</span>&#160;    }</div>
<div class="line"><a name="l00961"></a><span class="lineno">  961</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l00962"></a><span class="lineno">  962</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l00963"></a><span class="lineno">  963</span>&#160;    <span class="comment">/* Move the null char too */</span></div>
<div class="line"><a name="l00964"></a><span class="lineno">  964</span>&#160;    memmove(current-&gt;buf + p1, current-&gt;buf + p2, current-&gt;len - p2 + 1);</div>
<div class="line"><a name="l00965"></a><span class="lineno">  965</span>&#160;    current-&gt;len -= (p2 - <a class="code" href="a00380.xhtml#a7709843a973932e0b1313ac1628ece59">p1</a>);</div>
<div class="line"><a name="l00966"></a><span class="lineno">  966</span>&#160;    current-&gt;chars--;</div>
<div class="line"><a name="l00967"></a><span class="lineno">  967</span>&#160;</div>
<div class="line"><a name="l00968"></a><span class="lineno">  968</span>&#160;    <span class="keywordflow">if</span> (current-&gt;pos &gt; pos) {</div>
<div class="line"><a name="l00969"></a><span class="lineno">  969</span>&#160;      current-&gt;pos--;</div>
<div class="line"><a name="l00970"></a><span class="lineno">  970</span>&#160;    }</div>
<div class="line"><a name="l00971"></a><span class="lineno">  971</span>&#160;    <span class="keywordflow">return</span> ret;</div>
<div class="line"><a name="l00972"></a><span class="lineno">  972</span>&#160;  }</div>
<div class="line"><a name="l00973"></a><span class="lineno">  973</span>&#160;  <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l00974"></a><span class="lineno">  974</span>&#160;}</div>
<div class="line"><a name="l00975"></a><span class="lineno">  975</span>&#160;</div>
<div class="line"><a name="l00982"></a><span class="lineno">  982</span>&#160;<span class="keyword">static</span> <span class="keywordtype">int</span> insert_char(<span class="keyword">struct</span> current *current, <span class="keywordtype">int</span> pos, <span class="keywordtype">int</span> ch)</div>
<div class="line"><a name="l00983"></a><span class="lineno">  983</span>&#160;{</div>
<div class="line"><a name="l00984"></a><span class="lineno">  984</span>&#160;  <span class="keywordtype">char</span> buf[3];</div>
<div class="line"><a name="l00985"></a><span class="lineno">  985</span>&#160;  <span class="keywordtype">int</span> n = utf8_getchars(buf, ch);</div>
<div class="line"><a name="l00986"></a><span class="lineno">  986</span>&#160;</div>
<div class="line"><a name="l00987"></a><span class="lineno">  987</span>&#160;  <span class="keywordflow">if</span> (has_room(current, n) &amp;&amp; pos &gt;= 0 &amp;&amp; pos &lt;= current-&gt;chars) {</div>
<div class="line"><a name="l00988"></a><span class="lineno">  988</span>&#160;    <span class="keywordtype">int</span> <a class="code" href="a00380.xhtml#a7709843a973932e0b1313ac1628ece59">p1</a>, <a class="code" href="a00380.xhtml#a8cd39b525ac87092acb7f7bd4be6911a">p2</a>;</div>
<div class="line"><a name="l00989"></a><span class="lineno">  989</span>&#160;    <span class="keywordtype">int</span> ret = 1;</div>
<div class="line"><a name="l00990"></a><span class="lineno">  990</span>&#160;    p1 = <a class="code" href="a00272.xhtml#a8b9f26938d197fd630506367718c8f8d">utf8_index</a>(current-&gt;buf, pos);</div>
<div class="line"><a name="l00991"></a><span class="lineno">  991</span>&#160;    p2 = p1 + n;</div>
<div class="line"><a name="l00992"></a><span class="lineno">  992</span>&#160;</div>
<div class="line"><a name="l00993"></a><span class="lineno">  993</span>&#160;<span class="preprocessor">#ifdef USE_TERMIOS</span></div>
<div class="line"><a name="l00994"></a><span class="lineno">  994</span>&#160;<span class="preprocessor"></span>    <span class="comment">/* optimise the case where adding a single char to the end and no scrolling is needed */</span></div>
<div class="line"><a name="l00995"></a><span class="lineno">  995</span>&#160;    <span class="keywordflow">if</span> (current-&gt;pos == pos &amp;&amp; current-&gt;chars == pos) {</div>
<div class="line"><a name="l00996"></a><span class="lineno">  996</span>&#160;      <span class="keywordflow">if</span> (ch &gt;= <span class="charliteral">&#39; &#39;</span> &amp;&amp; <a class="code" href="a00272.xhtml#a5527a901abff4a6ec627bede6bd4ff87">utf8_strlen</a>(current-&gt;prompt, -1) + <a class="code" href="a00272.xhtml#a5527a901abff4a6ec627bede6bd4ff87">utf8_strlen</a>(current-&gt;buf, current-&gt;len) &lt; current-&gt;cols - 1) {</div>
<div class="line"><a name="l00997"></a><span class="lineno">  997</span>&#160;        <a class="code" href="a00269.xhtml#a217d6c3c0088a81dce63a5f13d67c6f8">IGNORE_RC</a>(write(current-&gt;fd, buf, n));</div>
<div class="line"><a name="l00998"></a><span class="lineno">  998</span>&#160;        ret = 2;</div>
<div class="line"><a name="l00999"></a><span class="lineno">  999</span>&#160;      }</div>
<div class="line"><a name="l01000"></a><span class="lineno"> 1000</span>&#160;    }</div>
<div class="line"><a name="l01001"></a><span class="lineno"> 1001</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01002"></a><span class="lineno"> 1002</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01003"></a><span class="lineno"> 1003</span>&#160;    memmove(current-&gt;buf + p2, current-&gt;buf + p1, current-&gt;len - p1);</div>
<div class="line"><a name="l01004"></a><span class="lineno"> 1004</span>&#160;    memcpy(current-&gt;buf + p1, buf, n);</div>
<div class="line"><a name="l01005"></a><span class="lineno"> 1005</span>&#160;    current-&gt;len += n;</div>
<div class="line"><a name="l01006"></a><span class="lineno"> 1006</span>&#160;</div>
<div class="line"><a name="l01007"></a><span class="lineno"> 1007</span>&#160;    current-&gt;chars++;</div>
<div class="line"><a name="l01008"></a><span class="lineno"> 1008</span>&#160;    <span class="keywordflow">if</span> (current-&gt;pos &gt;= pos) {</div>
<div class="line"><a name="l01009"></a><span class="lineno"> 1009</span>&#160;      current-&gt;pos++;</div>
<div class="line"><a name="l01010"></a><span class="lineno"> 1010</span>&#160;    }</div>
<div class="line"><a name="l01011"></a><span class="lineno"> 1011</span>&#160;    <span class="keywordflow">return</span> ret;</div>
<div class="line"><a name="l01012"></a><span class="lineno"> 1012</span>&#160;  }</div>
<div class="line"><a name="l01013"></a><span class="lineno"> 1013</span>&#160;  <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l01014"></a><span class="lineno"> 1014</span>&#160;}</div>
<div class="line"><a name="l01015"></a><span class="lineno"> 1015</span>&#160;</div>
<div class="line"><a name="l01021"></a><span class="lineno"> 1021</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> capture_chars(<span class="keyword">struct</span> current *current, <span class="keywordtype">int</span> pos, <span class="keywordtype">int</span> n)</div>
<div class="line"><a name="l01022"></a><span class="lineno"> 1022</span>&#160;{</div>
<div class="line"><a name="l01023"></a><span class="lineno"> 1023</span>&#160;  <span class="keywordflow">if</span> (pos &gt;= 0 &amp;&amp; (pos + n - 1) &lt; current-&gt;chars) {</div>
<div class="line"><a name="l01024"></a><span class="lineno"> 1024</span>&#160;    <span class="keywordtype">int</span> p1 = <a class="code" href="a00272.xhtml#a8b9f26938d197fd630506367718c8f8d">utf8_index</a>(current-&gt;buf, pos);</div>
<div class="line"><a name="l01025"></a><span class="lineno"> 1025</span>&#160;    <span class="keywordtype">int</span> nbytes = <a class="code" href="a00272.xhtml#a8b9f26938d197fd630506367718c8f8d">utf8_index</a>(current-&gt;buf + p1, n);</div>
<div class="line"><a name="l01026"></a><span class="lineno"> 1026</span>&#160;</div>
<div class="line"><a name="l01027"></a><span class="lineno"> 1027</span>&#160;    <span class="keywordflow">if</span> (nbytes) {</div>
<div class="line"><a name="l01028"></a><span class="lineno"> 1028</span>&#160;      free(current-&gt;capture);</div>
<div class="line"><a name="l01029"></a><span class="lineno"> 1029</span>&#160;      <span class="comment">/* Include space for the null terminator */</span></div>
<div class="line"><a name="l01030"></a><span class="lineno"> 1030</span>&#160;      current-&gt;capture = (<span class="keywordtype">char</span> *)malloc(nbytes + 1);</div>
<div class="line"><a name="l01031"></a><span class="lineno"> 1031</span>&#160;      memcpy(current-&gt;capture, current-&gt;buf + p1, nbytes);</div>
<div class="line"><a name="l01032"></a><span class="lineno"> 1032</span>&#160;      current-&gt;capture[nbytes] = <span class="charliteral">&#39;\0&#39;</span>;</div>
<div class="line"><a name="l01033"></a><span class="lineno"> 1033</span>&#160;    }</div>
<div class="line"><a name="l01034"></a><span class="lineno"> 1034</span>&#160;  }</div>
<div class="line"><a name="l01035"></a><span class="lineno"> 1035</span>&#160;}</div>
<div class="line"><a name="l01036"></a><span class="lineno"> 1036</span>&#160;</div>
<div class="line"><a name="l01042"></a><span class="lineno"> 1042</span>&#160;<span class="keyword">static</span> <span class="keywordtype">int</span> remove_chars(<span class="keyword">struct</span> current *current, <span class="keywordtype">int</span> pos, <span class="keywordtype">int</span> n)</div>
<div class="line"><a name="l01043"></a><span class="lineno"> 1043</span>&#160;{</div>
<div class="line"><a name="l01044"></a><span class="lineno"> 1044</span>&#160;  <span class="keywordtype">int</span> removed = 0;</div>
<div class="line"><a name="l01045"></a><span class="lineno"> 1045</span>&#160;</div>
<div class="line"><a name="l01046"></a><span class="lineno"> 1046</span>&#160;  <span class="comment">/* First save any chars which will be removed */</span></div>
<div class="line"><a name="l01047"></a><span class="lineno"> 1047</span>&#160;  capture_chars(current, pos, n);</div>
<div class="line"><a name="l01048"></a><span class="lineno"> 1048</span>&#160;</div>
<div class="line"><a name="l01049"></a><span class="lineno"> 1049</span>&#160;  <span class="keywordflow">while</span> (n-- &amp;&amp; remove_char(current, pos)) {</div>
<div class="line"><a name="l01050"></a><span class="lineno"> 1050</span>&#160;    removed++;</div>
<div class="line"><a name="l01051"></a><span class="lineno"> 1051</span>&#160;  }</div>
<div class="line"><a name="l01052"></a><span class="lineno"> 1052</span>&#160;  <span class="keywordflow">return</span> removed;</div>
<div class="line"><a name="l01053"></a><span class="lineno"> 1053</span>&#160;}</div>
<div class="line"><a name="l01059"></a><span class="lineno"> 1059</span>&#160;<span class="keyword">static</span> <span class="keywordtype">int</span> insert_chars(<span class="keyword">struct</span> current *current, <span class="keywordtype">int</span> pos, <span class="keyword">const</span> <span class="keywordtype">char</span> *chars)</div>
<div class="line"><a name="l01060"></a><span class="lineno"> 1060</span>&#160;{</div>
<div class="line"><a name="l01061"></a><span class="lineno"> 1061</span>&#160;  <span class="keywordtype">int</span> inserted = 0;</div>
<div class="line"><a name="l01062"></a><span class="lineno"> 1062</span>&#160;</div>
<div class="line"><a name="l01063"></a><span class="lineno"> 1063</span>&#160;  <span class="keywordflow">while</span> (*chars) {</div>
<div class="line"><a name="l01064"></a><span class="lineno"> 1064</span>&#160;    <span class="keywordtype">int</span> ch;</div>
<div class="line"><a name="l01065"></a><span class="lineno"> 1065</span>&#160;    <span class="keywordtype">int</span> n = <a class="code" href="a00272.xhtml#a6e220f61f15dae8999af352902c47889">utf8_tounicode</a>(chars, &amp;ch);</div>
<div class="line"><a name="l01066"></a><span class="lineno"> 1066</span>&#160;    <span class="keywordflow">if</span> (insert_char(current, pos, ch) == 0) {</div>
<div class="line"><a name="l01067"></a><span class="lineno"> 1067</span>&#160;      <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01068"></a><span class="lineno"> 1068</span>&#160;    }</div>
<div class="line"><a name="l01069"></a><span class="lineno"> 1069</span>&#160;    inserted++;</div>
<div class="line"><a name="l01070"></a><span class="lineno"> 1070</span>&#160;    pos++;</div>
<div class="line"><a name="l01071"></a><span class="lineno"> 1071</span>&#160;    chars += n;</div>
<div class="line"><a name="l01072"></a><span class="lineno"> 1072</span>&#160;  }</div>
<div class="line"><a name="l01073"></a><span class="lineno"> 1073</span>&#160;  <span class="keywordflow">return</span> inserted;</div>
<div class="line"><a name="l01074"></a><span class="lineno"> 1074</span>&#160;}</div>
<div class="line"><a name="l01075"></a><span class="lineno"> 1075</span>&#160;</div>
<div class="line"><a name="l01076"></a><span class="lineno"> 1076</span>&#160;<span class="preprocessor">#ifndef NO_COMPLETION</span></div>
<div class="line"><a name="l01077"></a><span class="lineno"> 1077</span>&#160;<span class="preprocessor"></span><span class="keyword">static</span> <a class="code" href="a00381.xhtml#a4153292143f94d6f2960c3dabcfa4982">LinenoiseCompletionCallback</a> completionCallback = <span class="keyword">nullptr</span>;</div>
<div class="line"><a name="l01078"></a><span class="lineno"> 1078</span>&#160;</div>
<div class="line"><a name="l01079"></a><span class="lineno"> 1079</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> beep() {</div>
<div class="line"><a name="l01080"></a><span class="lineno"> 1080</span>&#160;<span class="preprocessor">#ifdef USE_TERMIOS</span></div>
<div class="line"><a name="l01081"></a><span class="lineno"> 1081</span>&#160;<span class="preprocessor"></span>  fprintf(stderr, <span class="stringliteral">&quot;\x7&quot;</span>);</div>
<div class="line"><a name="l01082"></a><span class="lineno"> 1082</span>&#160;  fflush(stderr);</div>
<div class="line"><a name="l01083"></a><span class="lineno"> 1083</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01084"></a><span class="lineno"> 1084</span>&#160;<span class="preprocessor"></span>}</div>
<div class="line"><a name="l01085"></a><span class="lineno"> 1085</span>&#160;</div>
<div class="line"><a name="l01086"></a><span class="lineno"> 1086</span>&#160;<span class="keyword">static</span> <span class="keywordtype">void</span> freeCompletions(linenoiseCompletions *lc) {</div>
<div class="line"><a name="l01087"></a><span class="lineno"> 1087</span>&#160;  <span class="keywordtype">size_t</span> i;</div>
<div class="line"><a name="l01088"></a><span class="lineno"> 1088</span>&#160;  <span class="keywordflow">for</span> (i = 0; i &lt; lc-&gt;len; i++)</div>
<div class="line"><a name="l01089"></a><span class="lineno"> 1089</span>&#160;    free(lc-&gt;cvec[i]);</div>
<div class="line"><a name="l01090"></a><span class="lineno"> 1090</span>&#160;  free(lc-&gt;cvec);</div>
<div class="line"><a name="l01091"></a><span class="lineno"> 1091</span>&#160;}</div>
<div class="line"><a name="l01092"></a><span class="lineno"> 1092</span>&#160;</div>
<div class="line"><a name="l01093"></a><span class="lineno"> 1093</span>&#160;<span class="keyword">static</span> <span class="keywordtype">int</span> completeLine(<span class="keyword">struct</span> current *current) {</div>
<div class="line"><a name="l01094"></a><span class="lineno"> 1094</span>&#160;  linenoiseCompletions lc = { 0, NULL };</div>
<div class="line"><a name="l01095"></a><span class="lineno"> 1095</span>&#160;  <span class="keywordtype">int</span> c = 0;</div>
<div class="line"><a name="l01096"></a><span class="lineno"> 1096</span>&#160;</div>
<div class="line"><a name="l01097"></a><span class="lineno"> 1097</span>&#160;  completionCallback(current-&gt;buf, &amp;lc);</div>
<div class="line"><a name="l01098"></a><span class="lineno"> 1098</span>&#160;  <span class="keywordflow">if</span> (lc.len == 0) {</div>
<div class="line"><a name="l01099"></a><span class="lineno"> 1099</span>&#160;    beep();</div>
<div class="line"><a name="l01100"></a><span class="lineno"> 1100</span>&#160;  }</div>
<div class="line"><a name="l01101"></a><span class="lineno"> 1101</span>&#160;  <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01102"></a><span class="lineno"> 1102</span>&#160;    <span class="keywordtype">size_t</span> stop = 0, i = 0;</div>
<div class="line"><a name="l01103"></a><span class="lineno"> 1103</span>&#160;</div>
<div class="line"><a name="l01104"></a><span class="lineno"> 1104</span>&#160;    <span class="keywordflow">while</span> (!stop) {</div>
<div class="line"><a name="l01105"></a><span class="lineno"> 1105</span>&#160;      <span class="comment">/* Show completion or original buffer */</span></div>
<div class="line"><a name="l01106"></a><span class="lineno"> 1106</span>&#160;      <span class="keywordflow">if</span> (i &lt; lc.len) {</div>
<div class="line"><a name="l01107"></a><span class="lineno"> 1107</span>&#160;        <span class="keyword">struct </span>current tmp = *current;</div>
<div class="line"><a name="l01108"></a><span class="lineno"> 1108</span>&#160;        tmp.buf = lc.cvec[i];</div>
<div class="line"><a name="l01109"></a><span class="lineno"> 1109</span>&#160;        tmp.pos = tmp.len = strlen(tmp.buf);</div>
<div class="line"><a name="l01110"></a><span class="lineno"> 1110</span>&#160;        tmp.chars = <a class="code" href="a00272.xhtml#a5527a901abff4a6ec627bede6bd4ff87">utf8_strlen</a>(tmp.buf, tmp.len);</div>
<div class="line"><a name="l01111"></a><span class="lineno"> 1111</span>&#160;        refreshLine(current-&gt;prompt, &amp;tmp);</div>
<div class="line"><a name="l01112"></a><span class="lineno"> 1112</span>&#160;      }</div>
<div class="line"><a name="l01113"></a><span class="lineno"> 1113</span>&#160;      <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01114"></a><span class="lineno"> 1114</span>&#160;        refreshLine(current-&gt;prompt, current);</div>
<div class="line"><a name="l01115"></a><span class="lineno"> 1115</span>&#160;      }</div>
<div class="line"><a name="l01116"></a><span class="lineno"> 1116</span>&#160;</div>
<div class="line"><a name="l01117"></a><span class="lineno"> 1117</span>&#160;      c = fd_read(current);</div>
<div class="line"><a name="l01118"></a><span class="lineno"> 1118</span>&#160;      <span class="keywordflow">if</span> (c == -1) {</div>
<div class="line"><a name="l01119"></a><span class="lineno"> 1119</span>&#160;        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01120"></a><span class="lineno"> 1120</span>&#160;      }</div>
<div class="line"><a name="l01121"></a><span class="lineno"> 1121</span>&#160;</div>
<div class="line"><a name="l01122"></a><span class="lineno"> 1122</span>&#160;      <span class="keywordflow">switch</span> (c) {</div>
<div class="line"><a name="l01123"></a><span class="lineno"> 1123</span>&#160;      <span class="keywordflow">case</span> <span class="charliteral">&#39;\t&#39;</span>: <span class="comment">/* tab */</span></div>
<div class="line"><a name="l01124"></a><span class="lineno"> 1124</span>&#160;        i = (i + 1) % (lc.len + 1);</div>
<div class="line"><a name="l01125"></a><span class="lineno"> 1125</span>&#160;        <span class="keywordflow">if</span> (i == lc.len) beep();</div>
<div class="line"><a name="l01126"></a><span class="lineno"> 1126</span>&#160;        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01127"></a><span class="lineno"> 1127</span>&#160;      <span class="keywordflow">case</span> 27: <span class="comment">/* escape */</span></div>
<div class="line"><a name="l01128"></a><span class="lineno"> 1128</span>&#160;        <span class="comment">/* Re-show original buffer */</span></div>
<div class="line"><a name="l01129"></a><span class="lineno"> 1129</span>&#160;        <span class="keywordflow">if</span> (i &lt; lc.len) {</div>
<div class="line"><a name="l01130"></a><span class="lineno"> 1130</span>&#160;          refreshLine(current-&gt;prompt, current);</div>
<div class="line"><a name="l01131"></a><span class="lineno"> 1131</span>&#160;        }</div>
<div class="line"><a name="l01132"></a><span class="lineno"> 1132</span>&#160;        stop = 1;</div>
<div class="line"><a name="l01133"></a><span class="lineno"> 1133</span>&#160;        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01134"></a><span class="lineno"> 1134</span>&#160;      <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l01135"></a><span class="lineno"> 1135</span>&#160;        <span class="comment">/* Update buffer and return */</span></div>
<div class="line"><a name="l01136"></a><span class="lineno"> 1136</span>&#160;        <span class="keywordflow">if</span> (i &lt; lc.len) {</div>
<div class="line"><a name="l01137"></a><span class="lineno"> 1137</span>&#160;          set_current(current, lc.cvec[i]);</div>
<div class="line"><a name="l01138"></a><span class="lineno"> 1138</span>&#160;        }</div>
<div class="line"><a name="l01139"></a><span class="lineno"> 1139</span>&#160;        stop = 1;</div>
<div class="line"><a name="l01140"></a><span class="lineno"> 1140</span>&#160;        <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01141"></a><span class="lineno"> 1141</span>&#160;      }</div>
<div class="line"><a name="l01142"></a><span class="lineno"> 1142</span>&#160;    }</div>
<div class="line"><a name="l01143"></a><span class="lineno"> 1143</span>&#160;  }</div>
<div class="line"><a name="l01144"></a><span class="lineno"> 1144</span>&#160;</div>
<div class="line"><a name="l01145"></a><span class="lineno"> 1145</span>&#160;  freeCompletions(&amp;lc);</div>
<div class="line"><a name="l01146"></a><span class="lineno"> 1146</span>&#160;  <span class="keywordflow">return</span> c; <span class="comment">/* Return last read character */</span></div>
<div class="line"><a name="l01147"></a><span class="lineno"> 1147</span>&#160;}</div>
<div class="line"><a name="l01148"></a><span class="lineno"> 1148</span>&#160;</div>
<div class="line"><a name="l01149"></a><span class="lineno"> 1149</span>&#160;<span class="comment">/* Register a callback function to be called for tab-completion.</span></div>
<div class="line"><a name="l01150"></a><span class="lineno"> 1150</span>&#160;<span class="comment">Returns the prior callback so that the caller may (if needed)</span></div>
<div class="line"><a name="l01151"></a><span class="lineno"> 1151</span>&#160;<span class="comment">restore it when done. */</span></div>
<div class="line"><a name="l01152"></a><span class="lineno"><a class="line" href="a00381.xhtml#a77ae76b19f91154937daaf925e725a44"> 1152</a></span>&#160;<a class="code" href="a00381.xhtml#a4153292143f94d6f2960c3dabcfa4982">LinenoiseCompletionCallback</a> <a class="code" href="a00381.xhtml#a77ae76b19f91154937daaf925e725a44">linenoiseSetCompletionCallback</a>(<a class="code" href="a00381.xhtml#a4153292143f94d6f2960c3dabcfa4982">LinenoiseCompletionCallback</a> fn) {</div>
<div class="line"><a name="l01153"></a><span class="lineno"> 1153</span>&#160;  completionCallback = fn;</div>
<div class="line"><a name="l01154"></a><span class="lineno"> 1154</span>&#160;  <span class="keywordflow">return</span> fn;</div>
<div class="line"><a name="l01155"></a><span class="lineno"> 1155</span>&#160;}</div>
<div class="line"><a name="l01156"></a><span class="lineno"> 1156</span>&#160;</div>
<div class="line"><a name="l01157"></a><span class="lineno"> 1157</span>&#160;</div>
<div class="line"><a name="l01158"></a><span class="lineno"><a class="line" href="a00381.xhtml#a5648e21adbd7aa937a3e50c32961ade4"> 1158</a></span>&#160;<span class="keywordtype">void</span> <a class="code" href="a00381.xhtml#a5648e21adbd7aa937a3e50c32961ade4">linenoiseAddCompletion</a>(<a class="code" href="a00091.xhtml">linenoiseCompletions</a> *lc, <span class="keyword">const</span> <span class="keywordtype">char</span> *str) {</div>
<div class="line"><a name="l01159"></a><span class="lineno"> 1159</span>&#160;  lc-&gt;<a class="code" href="a00091.xhtml#a13b6a173b84d31b627fce502951d643b">cvec</a> = (<span class="keywordtype">char</span> **)realloc(lc-&gt;<a class="code" href="a00091.xhtml#a13b6a173b84d31b627fce502951d643b">cvec</a>, <span class="keyword">sizeof</span>(<span class="keywordtype">char</span>*)*(lc-&gt;<a class="code" href="a00091.xhtml#a53f6ecb8ec9812f5d1089b92cf17c69b">len</a> + 1));</div>
<div class="line"><a name="l01160"></a><span class="lineno"> 1160</span>&#160;  lc-&gt;<a class="code" href="a00091.xhtml#a13b6a173b84d31b627fce502951d643b">cvec</a>[lc-&gt;<a class="code" href="a00091.xhtml#a53f6ecb8ec9812f5d1089b92cf17c69b">len</a>++] = strdup(str);</div>
<div class="line"><a name="l01161"></a><span class="lineno"> 1161</span>&#160;}</div>
<div class="line"><a name="l01162"></a><span class="lineno"> 1162</span>&#160;</div>
<div class="line"><a name="l01163"></a><span class="lineno"> 1163</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01164"></a><span class="lineno"> 1164</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01165"></a><span class="lineno"> 1165</span>&#160;<span class="keyword">static</span> <span class="keywordtype">int</span> linenoiseEdit(<span class="keyword">struct</span> current *current) {</div>
<div class="line"><a name="l01166"></a><span class="lineno"> 1166</span>&#160;  <span class="keywordtype">int</span> history_index = 0;</div>
<div class="line"><a name="l01167"></a><span class="lineno"> 1167</span>&#160;</div>
<div class="line"><a name="l01168"></a><span class="lineno"> 1168</span>&#160;  <span class="comment">/* The latest history entry is always our current buffer, that</span></div>
<div class="line"><a name="l01169"></a><span class="lineno"> 1169</span>&#160;<span class="comment">  * initially is just an empty string. */</span></div>
<div class="line"><a name="l01170"></a><span class="lineno"> 1170</span>&#160;  <a class="code" href="a00381.xhtml#ae0d170e5b6e0ea50d5f722551cb09ec5">linenoiseHistoryAdd</a>(<span class="stringliteral">&quot;&quot;</span>);</div>
<div class="line"><a name="l01171"></a><span class="lineno"> 1171</span>&#160;</div>
<div class="line"><a name="l01172"></a><span class="lineno"> 1172</span>&#160;  set_current(current, <span class="stringliteral">&quot;&quot;</span>);</div>
<div class="line"><a name="l01173"></a><span class="lineno"> 1173</span>&#160;  refreshLine(current-&gt;prompt, current);</div>
<div class="line"><a name="l01174"></a><span class="lineno"> 1174</span>&#160;</div>
<div class="line"><a name="l01175"></a><span class="lineno"> 1175</span>&#160;  <span class="keywordflow">while</span> (1) {</div>
<div class="line"><a name="l01176"></a><span class="lineno"> 1176</span>&#160;    <span class="keywordtype">int</span> dir = -1;</div>
<div class="line"><a name="l01177"></a><span class="lineno"> 1177</span>&#160;    <span class="keywordtype">int</span> c = fd_read(current);</div>
<div class="line"><a name="l01178"></a><span class="lineno"> 1178</span>&#160;</div>
<div class="line"><a name="l01179"></a><span class="lineno"> 1179</span>&#160;<span class="preprocessor">#ifndef NO_COMPLETION</span></div>
<div class="line"><a name="l01180"></a><span class="lineno"> 1180</span>&#160;<span class="preprocessor"></span>    <span class="comment">/* Only autocomplete when the callback is set. It returns &lt; 0 when</span></div>
<div class="line"><a name="l01181"></a><span class="lineno"> 1181</span>&#160;<span class="comment">    * there was an error reading from fd. Otherwise it will return the</span></div>
<div class="line"><a name="l01182"></a><span class="lineno"> 1182</span>&#160;<span class="comment">    * character that should be handled next. */</span></div>
<div class="line"><a name="l01183"></a><span class="lineno"> 1183</span>&#160;    <span class="keywordflow">if</span> (c == <span class="charliteral">&#39;\t&#39;</span> &amp;&amp; current-&gt;pos == current-&gt;chars &amp;&amp; completionCallback != NULL) {</div>
<div class="line"><a name="l01184"></a><span class="lineno"> 1184</span>&#160;      c = completeLine(current);</div>
<div class="line"><a name="l01185"></a><span class="lineno"> 1185</span>&#160;      <span class="comment">/* Return on errors */</span></div>
<div class="line"><a name="l01186"></a><span class="lineno"> 1186</span>&#160;      <span class="keywordflow">if</span> (c &lt; 0) <span class="keywordflow">return</span> current-&gt;len;</div>
<div class="line"><a name="l01187"></a><span class="lineno"> 1187</span>&#160;      <span class="comment">/* Read next character when 0 */</span></div>
<div class="line"><a name="l01188"></a><span class="lineno"> 1188</span>&#160;      <span class="keywordflow">if</span> (c == 0) <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l01189"></a><span class="lineno"> 1189</span>&#160;    }</div>
<div class="line"><a name="l01190"></a><span class="lineno"> 1190</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01191"></a><span class="lineno"> 1191</span>&#160;<span class="preprocessor"></span></div>
<div class="line"><a name="l01192"></a><span class="lineno"> 1192</span>&#160;  process_char:</div>
<div class="line"><a name="l01193"></a><span class="lineno"> 1193</span>&#160;    <span class="keywordflow">if</span> (c == -1) <span class="keywordflow">return</span> current-&gt;len;</div>
<div class="line"><a name="l01194"></a><span class="lineno"> 1194</span>&#160;<span class="preprocessor">#ifdef USE_TERMIOS</span></div>
<div class="line"><a name="l01195"></a><span class="lineno"> 1195</span>&#160;<span class="preprocessor"></span>    <span class="keywordflow">if</span> (c == 27) {   <span class="comment">/* escape sequence */</span></div>
<div class="line"><a name="l01196"></a><span class="lineno"> 1196</span>&#160;      c = check_special(current-&gt;fd);</div>
<div class="line"><a name="l01197"></a><span class="lineno"> 1197</span>&#160;    }</div>
<div class="line"><a name="l01198"></a><span class="lineno"> 1198</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01199"></a><span class="lineno"> 1199</span>&#160;<span class="preprocessor"></span>    <span class="keywordflow">switch</span> (c) {</div>
<div class="line"><a name="l01200"></a><span class="lineno"> 1200</span>&#160;    <span class="keywordflow">case</span> <span class="charliteral">&#39;\r&#39;</span>:    <span class="comment">/* enter */</span></div>
<div class="line"><a name="l01201"></a><span class="lineno"> 1201</span>&#160;      history_len--;</div>
<div class="line"><a name="l01202"></a><span class="lineno"> 1202</span>&#160;      free(history[history_len]);</div>
<div class="line"><a name="l01203"></a><span class="lineno"> 1203</span>&#160;      <span class="keywordflow">return</span> current-&gt;len;</div>
<div class="line"><a name="l01204"></a><span class="lineno"> 1204</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="a00269.xhtml#aa083619c8e1488f8193a592aeb59dd1c">ctrl</a>(<span class="charliteral">&#39;C&#39;</span>):     <span class="comment">/* ctrl-c */</span></div>
<div class="line"><a name="l01205"></a><span class="lineno"> 1205</span>&#160;      errno = EAGAIN;</div>
<div class="line"><a name="l01206"></a><span class="lineno"> 1206</span>&#160;      <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l01207"></a><span class="lineno"> 1207</span>&#160;    <span class="keywordflow">case</span> 127:   <span class="comment">/* backspace */</span></div>
<div class="line"><a name="l01208"></a><span class="lineno"> 1208</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="a00269.xhtml#aa083619c8e1488f8193a592aeb59dd1c">ctrl</a>(<span class="charliteral">&#39;H&#39;</span>):</div>
<div class="line"><a name="l01209"></a><span class="lineno"> 1209</span>&#160;      if (remove_char(current, current-&gt;pos - 1) == 1) {</div>
<div class="line"><a name="l01210"></a><span class="lineno"> 1210</span>&#160;        refreshLine(current-&gt;prompt, current);</div>
<div class="line"><a name="l01211"></a><span class="lineno"> 1211</span>&#160;      }</div>
<div class="line"><a name="l01212"></a><span class="lineno"> 1212</span>&#160;      <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01213"></a><span class="lineno"> 1213</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="a00269.xhtml#aa083619c8e1488f8193a592aeb59dd1c">ctrl</a>(<span class="charliteral">&#39;D&#39;</span>):     <span class="comment">/* ctrl-d */</span></div>
<div class="line"><a name="l01214"></a><span class="lineno"> 1214</span>&#160;      if (current-&gt;len == 0) {</div>
<div class="line"><a name="l01215"></a><span class="lineno"> 1215</span>&#160;        <span class="comment">/* Empty line, so EOF */</span></div>
<div class="line"><a name="l01216"></a><span class="lineno"> 1216</span>&#160;        history_len--;</div>
<div class="line"><a name="l01217"></a><span class="lineno"> 1217</span>&#160;        free(history[history_len]);</div>
<div class="line"><a name="l01218"></a><span class="lineno"> 1218</span>&#160;        <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l01219"></a><span class="lineno"> 1219</span>&#160;      }</div>
<div class="line"><a name="l01220"></a><span class="lineno"> 1220</span>&#160;      <span class="comment">/* Otherwise fall through to delete char to right of cursor */</span></div>
<div class="line"><a name="l01221"></a><span class="lineno"> 1221</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2a7e5e00feb2b8d9baad18b63aeba41d88">SPECIAL_DELETE</a>:</div>
<div class="line"><a name="l01222"></a><span class="lineno"> 1222</span>&#160;      <span class="keywordflow">if</span> (remove_char(current, current-&gt;pos) == 1) {</div>
<div class="line"><a name="l01223"></a><span class="lineno"> 1223</span>&#160;        refreshLine(current-&gt;prompt, current);</div>
<div class="line"><a name="l01224"></a><span class="lineno"> 1224</span>&#160;      }</div>
<div class="line"><a name="l01225"></a><span class="lineno"> 1225</span>&#160;      <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01226"></a><span class="lineno"> 1226</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2a0fb03698c4a730460b623322a542edd6">SPECIAL_INSERT</a>:</div>
<div class="line"><a name="l01227"></a><span class="lineno"> 1227</span>&#160;      <span class="comment">/* Ignore. Expansion Hook.</span></div>
<div class="line"><a name="l01228"></a><span class="lineno"> 1228</span>&#160;<span class="comment">      * Future possibility: Toggle Insert/Overwrite Modes</span></div>
<div class="line"><a name="l01229"></a><span class="lineno"> 1229</span>&#160;<span class="comment">      */</span></div>
<div class="line"><a name="l01230"></a><span class="lineno"> 1230</span>&#160;      <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01231"></a><span class="lineno"> 1231</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="a00269.xhtml#aa083619c8e1488f8193a592aeb59dd1c">ctrl</a>(<span class="charliteral">&#39;W&#39;</span>):    <span class="comment">/* ctrl-w, delete word at left. save deleted chars */</span></div>
<div class="line"><a name="l01232"></a><span class="lineno"> 1232</span>&#160;      <span class="comment">/* eat any spaces on the left */</span></div>
<div class="line"><a name="l01233"></a><span class="lineno"> 1233</span>&#160;    {</div>
<div class="line"><a name="l01234"></a><span class="lineno"> 1234</span>&#160;      <span class="keywordtype">int</span> pos = current-&gt;pos;</div>
<div class="line"><a name="l01235"></a><span class="lineno"> 1235</span>&#160;      <span class="keywordflow">while</span> (pos &gt; 0 &amp;&amp; get_char(current, pos - 1) == <span class="charliteral">&#39; &#39;</span>) {</div>
<div class="line"><a name="l01236"></a><span class="lineno"> 1236</span>&#160;        pos--;</div>
<div class="line"><a name="l01237"></a><span class="lineno"> 1237</span>&#160;      }</div>
<div class="line"><a name="l01238"></a><span class="lineno"> 1238</span>&#160;</div>
<div class="line"><a name="l01239"></a><span class="lineno"> 1239</span>&#160;      <span class="comment">/* now eat any non-spaces on the left */</span></div>
<div class="line"><a name="l01240"></a><span class="lineno"> 1240</span>&#160;      <span class="keywordflow">while</span> (pos &gt; 0 &amp;&amp; get_char(current, pos - 1) != <span class="charliteral">&#39; &#39;</span>) {</div>
<div class="line"><a name="l01241"></a><span class="lineno"> 1241</span>&#160;        pos--;</div>
<div class="line"><a name="l01242"></a><span class="lineno"> 1242</span>&#160;      }</div>
<div class="line"><a name="l01243"></a><span class="lineno"> 1243</span>&#160;</div>
<div class="line"><a name="l01244"></a><span class="lineno"> 1244</span>&#160;      <span class="keywordflow">if</span> (remove_chars(current, pos, current-&gt;pos - pos)) {</div>
<div class="line"><a name="l01245"></a><span class="lineno"> 1245</span>&#160;        refreshLine(current-&gt;prompt, current);</div>
<div class="line"><a name="l01246"></a><span class="lineno"> 1246</span>&#160;      }</div>
<div class="line"><a name="l01247"></a><span class="lineno"> 1247</span>&#160;    }</div>
<div class="line"><a name="l01248"></a><span class="lineno"> 1248</span>&#160;    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01249"></a><span class="lineno"> 1249</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="a00269.xhtml#aa083619c8e1488f8193a592aeb59dd1c">ctrl</a>(<span class="charliteral">&#39;R&#39;</span>):    <span class="comment">/* ctrl-r */</span></div>
<div class="line"><a name="l01250"></a><span class="lineno"> 1250</span>&#160;    {</div>
<div class="line"><a name="l01251"></a><span class="lineno"> 1251</span>&#160;      <span class="comment">/* Display the reverse-i-search prompt and process chars */</span></div>
<div class="line"><a name="l01252"></a><span class="lineno"> 1252</span>&#160;      <span class="keywordtype">char</span> rbuf[50];</div>
<div class="line"><a name="l01253"></a><span class="lineno"> 1253</span>&#160;      <span class="keywordtype">char</span> rprompt[80];</div>
<div class="line"><a name="l01254"></a><span class="lineno"> 1254</span>&#160;      <span class="keywordtype">int</span> rchars = 0;</div>
<div class="line"><a name="l01255"></a><span class="lineno"> 1255</span>&#160;      <span class="keywordtype">int</span> rlen = 0;</div>
<div class="line"><a name="l01256"></a><span class="lineno"> 1256</span>&#160;      <span class="keywordtype">int</span> searchpos = history_len - 1;</div>
<div class="line"><a name="l01257"></a><span class="lineno"> 1257</span>&#160;</div>
<div class="line"><a name="l01258"></a><span class="lineno"> 1258</span>&#160;      rbuf[0] = 0;</div>
<div class="line"><a name="l01259"></a><span class="lineno"> 1259</span>&#160;      <span class="keywordflow">while</span> (1) {</div>
<div class="line"><a name="l01260"></a><span class="lineno"> 1260</span>&#160;        <span class="keywordtype">int</span> n = 0;</div>
<div class="line"><a name="l01261"></a><span class="lineno"> 1261</span>&#160;        <span class="keyword">const</span> <span class="keywordtype">char</span> *p = NULL;</div>
<div class="line"><a name="l01262"></a><span class="lineno"> 1262</span>&#160;        <span class="keywordtype">int</span> skipsame = 0;</div>
<div class="line"><a name="l01263"></a><span class="lineno"> 1263</span>&#160;        <span class="keywordtype">int</span> searchdir = -1;</div>
<div class="line"><a name="l01264"></a><span class="lineno"> 1264</span>&#160;</div>
<div class="line"><a name="l01265"></a><span class="lineno"> 1265</span>&#160;        snprintf(rprompt, <span class="keyword">sizeof</span>(rprompt), <span class="stringliteral">&quot;(reverse-i-search)&#39;%s&#39;: &quot;</span>, rbuf);</div>
<div class="line"><a name="l01266"></a><span class="lineno"> 1266</span>&#160;        refreshLine(rprompt, current);</div>
<div class="line"><a name="l01267"></a><span class="lineno"> 1267</span>&#160;        c = fd_read(current);</div>
<div class="line"><a name="l01268"></a><span class="lineno"> 1268</span>&#160;        <span class="keywordflow">if</span> (c == <a class="code" href="a00269.xhtml#aa083619c8e1488f8193a592aeb59dd1c">ctrl</a>(<span class="charliteral">&#39;H&#39;</span>) || c == 127) {</div>
<div class="line"><a name="l01269"></a><span class="lineno"> 1269</span>&#160;          <span class="keywordflow">if</span> (rchars) {</div>
<div class="line"><a name="l01270"></a><span class="lineno"> 1270</span>&#160;            <span class="keywordtype">int</span> p = <a class="code" href="a00272.xhtml#a8b9f26938d197fd630506367718c8f8d">utf8_index</a>(rbuf, --rchars);</div>
<div class="line"><a name="l01271"></a><span class="lineno"> 1271</span>&#160;            rbuf[p] = 0;</div>
<div class="line"><a name="l01272"></a><span class="lineno"> 1272</span>&#160;            rlen = strlen(rbuf);</div>
<div class="line"><a name="l01273"></a><span class="lineno"> 1273</span>&#160;          }</div>
<div class="line"><a name="l01274"></a><span class="lineno"> 1274</span>&#160;          <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l01275"></a><span class="lineno"> 1275</span>&#160;          }</div>
<div class="line"><a name="l01276"></a><span class="lineno"> 1276</span>&#160;<span class="preprocessor">#ifdef USE_TERMIOS</span></div>
<div class="line"><a name="l01277"></a><span class="lineno"> 1277</span>&#160;<span class="preprocessor"></span>        <span class="keywordflow">if</span> (c == 27) {</div>
<div class="line"><a name="l01278"></a><span class="lineno"> 1278</span>&#160;          c = check_special(current-&gt;fd);</div>
<div class="line"><a name="l01279"></a><span class="lineno"> 1279</span>&#160;        }</div>
<div class="line"><a name="l01280"></a><span class="lineno"> 1280</span>&#160;<span class="preprocessor">#endif</span></div>
<div class="line"><a name="l01281"></a><span class="lineno"> 1281</span>&#160;<span class="preprocessor"></span>        <span class="keywordflow">if</span> (c == <a class="code" href="a00269.xhtml#aa083619c8e1488f8193a592aeb59dd1c">ctrl</a>(<span class="charliteral">&#39;P&#39;</span>) || c == <a class="code" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2a9603b88584871325c356a3d426dbd4ee">SPECIAL_UP</a>) {</div>
<div class="line"><a name="l01282"></a><span class="lineno"> 1282</span>&#160;          <span class="comment">/* Search for the previous (earlier) match */</span></div>
<div class="line"><a name="l01283"></a><span class="lineno"> 1283</span>&#160;          <span class="keywordflow">if</span> (searchpos &gt; 0) {</div>
<div class="line"><a name="l01284"></a><span class="lineno"> 1284</span>&#160;            searchpos--;</div>
<div class="line"><a name="l01285"></a><span class="lineno"> 1285</span>&#160;          }</div>
<div class="line"><a name="l01286"></a><span class="lineno"> 1286</span>&#160;          skipsame = 1;</div>
<div class="line"><a name="l01287"></a><span class="lineno"> 1287</span>&#160;        }</div>
<div class="line"><a name="l01288"></a><span class="lineno"> 1288</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (c == <a class="code" href="a00269.xhtml#aa083619c8e1488f8193a592aeb59dd1c">ctrl</a>(<span class="charliteral">&#39;N&#39;</span>) || c == <a class="code" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2ac1f7282ba533a5bb36627566072e1c96">SPECIAL_DOWN</a>) {</div>
<div class="line"><a name="l01289"></a><span class="lineno"> 1289</span>&#160;          <span class="comment">/* Search for the next (later) match */</span></div>
<div class="line"><a name="l01290"></a><span class="lineno"> 1290</span>&#160;          <span class="keywordflow">if</span> (searchpos &lt; history_len) {</div>
<div class="line"><a name="l01291"></a><span class="lineno"> 1291</span>&#160;            searchpos++;</div>
<div class="line"><a name="l01292"></a><span class="lineno"> 1292</span>&#160;          }</div>
<div class="line"><a name="l01293"></a><span class="lineno"> 1293</span>&#160;          searchdir = 1;</div>
<div class="line"><a name="l01294"></a><span class="lineno"> 1294</span>&#160;          skipsame = 1;</div>
<div class="line"><a name="l01295"></a><span class="lineno"> 1295</span>&#160;        }</div>
<div class="line"><a name="l01296"></a><span class="lineno"> 1296</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (c &gt;= <span class="charliteral">&#39; &#39;</span>) {</div>
<div class="line"><a name="l01297"></a><span class="lineno"> 1297</span>&#160;          <span class="keywordflow">if</span> (rlen &gt;= (<span class="keywordtype">int</span>)<span class="keyword">sizeof</span>(rbuf) + 3) {</div>
<div class="line"><a name="l01298"></a><span class="lineno"> 1298</span>&#160;            <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l01299"></a><span class="lineno"> 1299</span>&#160;          }</div>
<div class="line"><a name="l01300"></a><span class="lineno"> 1300</span>&#160;</div>
<div class="line"><a name="l01301"></a><span class="lineno"> 1301</span>&#160;          n = utf8_getchars(rbuf + rlen, c);</div>
<div class="line"><a name="l01302"></a><span class="lineno"> 1302</span>&#160;          rlen += n;</div>
<div class="line"><a name="l01303"></a><span class="lineno"> 1303</span>&#160;          rchars++;</div>
<div class="line"><a name="l01304"></a><span class="lineno"> 1304</span>&#160;          rbuf[rlen] = 0;</div>
<div class="line"><a name="l01305"></a><span class="lineno"> 1305</span>&#160;</div>
<div class="line"><a name="l01306"></a><span class="lineno"> 1306</span>&#160;          <span class="comment">/* Adding a new char resets the search location */</span></div>
<div class="line"><a name="l01307"></a><span class="lineno"> 1307</span>&#160;          searchpos = history_len - 1;</div>
<div class="line"><a name="l01308"></a><span class="lineno"> 1308</span>&#160;        }</div>
<div class="line"><a name="l01309"></a><span class="lineno"> 1309</span>&#160;        <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01310"></a><span class="lineno"> 1310</span>&#160;          <span class="comment">/* Exit from incremental search mode */</span></div>
<div class="line"><a name="l01311"></a><span class="lineno"> 1311</span>&#160;          <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01312"></a><span class="lineno"> 1312</span>&#160;        }</div>
<div class="line"><a name="l01313"></a><span class="lineno"> 1313</span>&#160;</div>
<div class="line"><a name="l01314"></a><span class="lineno"> 1314</span>&#160;        <span class="comment">/* Now search through the history for a match */</span></div>
<div class="line"><a name="l01315"></a><span class="lineno"> 1315</span>&#160;        <span class="keywordflow">for</span> (; searchpos &gt;= 0 &amp;&amp; searchpos &lt; history_len; searchpos += searchdir) {</div>
<div class="line"><a name="l01316"></a><span class="lineno"> 1316</span>&#160;          p = strstr(history[searchpos], rbuf);</div>
<div class="line"><a name="l01317"></a><span class="lineno"> 1317</span>&#160;          <span class="keywordflow">if</span> (p) {</div>
<div class="line"><a name="l01318"></a><span class="lineno"> 1318</span>&#160;            <span class="comment">/* Found a match */</span></div>
<div class="line"><a name="l01319"></a><span class="lineno"> 1319</span>&#160;            <span class="keywordflow">if</span> (skipsame &amp;&amp; strcmp(history[searchpos], current-&gt;buf) == 0) {</div>
<div class="line"><a name="l01320"></a><span class="lineno"> 1320</span>&#160;              <span class="comment">/* But it is identical, so skip it */</span></div>
<div class="line"><a name="l01321"></a><span class="lineno"> 1321</span>&#160;              <span class="keywordflow">continue</span>;</div>
<div class="line"><a name="l01322"></a><span class="lineno"> 1322</span>&#160;            }</div>
<div class="line"><a name="l01323"></a><span class="lineno"> 1323</span>&#160;            <span class="comment">/* Copy the matching line and set the cursor position */</span></div>
<div class="line"><a name="l01324"></a><span class="lineno"> 1324</span>&#160;            set_current(current, history[searchpos]);</div>
<div class="line"><a name="l01325"></a><span class="lineno"> 1325</span>&#160;            current-&gt;pos = <a class="code" href="a00272.xhtml#a5527a901abff4a6ec627bede6bd4ff87">utf8_strlen</a>(history[searchpos], p - history[searchpos]);</div>
<div class="line"><a name="l01326"></a><span class="lineno"> 1326</span>&#160;            <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01327"></a><span class="lineno"> 1327</span>&#160;          }</div>
<div class="line"><a name="l01328"></a><span class="lineno"> 1328</span>&#160;        }</div>
<div class="line"><a name="l01329"></a><span class="lineno"> 1329</span>&#160;        <span class="keywordflow">if</span> (!p &amp;&amp; n) {</div>
<div class="line"><a name="l01330"></a><span class="lineno"> 1330</span>&#160;          <span class="comment">/* No match, so don&#39;t add it */</span></div>
<div class="line"><a name="l01331"></a><span class="lineno"> 1331</span>&#160;          rchars--;</div>
<div class="line"><a name="l01332"></a><span class="lineno"> 1332</span>&#160;          rlen -= n;</div>
<div class="line"><a name="l01333"></a><span class="lineno"> 1333</span>&#160;          rbuf[rlen] = 0;</div>
<div class="line"><a name="l01334"></a><span class="lineno"> 1334</span>&#160;        }</div>
<div class="line"><a name="l01335"></a><span class="lineno"> 1335</span>&#160;        }</div>
<div class="line"><a name="l01336"></a><span class="lineno"> 1336</span>&#160;      <span class="keywordflow">if</span> (c == <a class="code" href="a00269.xhtml#aa083619c8e1488f8193a592aeb59dd1c">ctrl</a>(<span class="charliteral">&#39;G&#39;</span>) || c == <a class="code" href="a00269.xhtml#aa083619c8e1488f8193a592aeb59dd1c">ctrl</a>(<span class="charliteral">&#39;C&#39;</span>)) {</div>
<div class="line"><a name="l01337"></a><span class="lineno"> 1337</span>&#160;        <span class="comment">/* ctrl-g terminates the search with no effect */</span></div>
<div class="line"><a name="l01338"></a><span class="lineno"> 1338</span>&#160;        set_current(current, <span class="stringliteral">&quot;&quot;</span>);</div>
<div class="line"><a name="l01339"></a><span class="lineno"> 1339</span>&#160;        c = 0;</div>
<div class="line"><a name="l01340"></a><span class="lineno"> 1340</span>&#160;      }</div>
<div class="line"><a name="l01341"></a><span class="lineno"> 1341</span>&#160;      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (c == <a class="code" href="a00269.xhtml#aa083619c8e1488f8193a592aeb59dd1c">ctrl</a>(<span class="charliteral">&#39;J&#39;</span>)) {</div>
<div class="line"><a name="l01342"></a><span class="lineno"> 1342</span>&#160;        <span class="comment">/* ctrl-j terminates the search leaving the buffer in place */</span></div>
<div class="line"><a name="l01343"></a><span class="lineno"> 1343</span>&#160;        c = 0;</div>
<div class="line"><a name="l01344"></a><span class="lineno"> 1344</span>&#160;      }</div>
<div class="line"><a name="l01345"></a><span class="lineno"> 1345</span>&#160;      <span class="comment">/* Go process the char normally */</span></div>
<div class="line"><a name="l01346"></a><span class="lineno"> 1346</span>&#160;      refreshLine(current-&gt;prompt, current);</div>
<div class="line"><a name="l01347"></a><span class="lineno"> 1347</span>&#160;      <span class="keywordflow">goto</span> process_char;</div>
<div class="line"><a name="l01348"></a><span class="lineno"> 1348</span>&#160;      }</div>
<div class="line"><a name="l01349"></a><span class="lineno"> 1349</span>&#160;    <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01350"></a><span class="lineno"> 1350</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="a00269.xhtml#aa083619c8e1488f8193a592aeb59dd1c">ctrl</a>(<span class="charliteral">&#39;T&#39;</span>):    <span class="comment">/* ctrl-t */</span></div>
<div class="line"><a name="l01351"></a><span class="lineno"> 1351</span>&#160;      if (current-&gt;pos &gt; 0 &amp;&amp; current-&gt;pos &lt;= current-&gt;chars) {</div>
<div class="line"><a name="l01352"></a><span class="lineno"> 1352</span>&#160;        <span class="comment">/* If cursor is at end, transpose the previous two chars */</span></div>
<div class="line"><a name="l01353"></a><span class="lineno"> 1353</span>&#160;        <span class="keywordtype">int</span> fixer = (current-&gt;pos == current-&gt;chars);</div>
<div class="line"><a name="l01354"></a><span class="lineno"> 1354</span>&#160;        c = get_char(current, current-&gt;pos - fixer);</div>
<div class="line"><a name="l01355"></a><span class="lineno"> 1355</span>&#160;        remove_char(current, current-&gt;pos - fixer);</div>
<div class="line"><a name="l01356"></a><span class="lineno"> 1356</span>&#160;        insert_char(current, current-&gt;pos - 1, c);</div>
<div class="line"><a name="l01357"></a><span class="lineno"> 1357</span>&#160;        refreshLine(current-&gt;prompt, current);</div>
<div class="line"><a name="l01358"></a><span class="lineno"> 1358</span>&#160;      }</div>
<div class="line"><a name="l01359"></a><span class="lineno"> 1359</span>&#160;      <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01360"></a><span class="lineno"> 1360</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="a00269.xhtml#aa083619c8e1488f8193a592aeb59dd1c">ctrl</a>(<span class="charliteral">&#39;V&#39;</span>):    <span class="comment">/* ctrl-v */</span></div>
<div class="line"><a name="l01361"></a><span class="lineno"> 1361</span>&#160;      if (has_room(current, 3)) {</div>
<div class="line"><a name="l01362"></a><span class="lineno"> 1362</span>&#160;        <span class="comment">/* Insert the ^V first */</span></div>
<div class="line"><a name="l01363"></a><span class="lineno"> 1363</span>&#160;        <span class="keywordflow">if</span> (insert_char(current, current-&gt;pos, c)) {</div>
<div class="line"><a name="l01364"></a><span class="lineno"> 1364</span>&#160;          refreshLine(current-&gt;prompt, current);</div>
<div class="line"><a name="l01365"></a><span class="lineno"> 1365</span>&#160;          <span class="comment">/* Now wait for the next char. Can insert anything except \0 */</span></div>
<div class="line"><a name="l01366"></a><span class="lineno"> 1366</span>&#160;          c = fd_read(current);</div>
<div class="line"><a name="l01367"></a><span class="lineno"> 1367</span>&#160;</div>
<div class="line"><a name="l01368"></a><span class="lineno"> 1368</span>&#160;          <span class="comment">/* Remove the ^V first */</span></div>
<div class="line"><a name="l01369"></a><span class="lineno"> 1369</span>&#160;          remove_char(current, current-&gt;pos - 1);</div>
<div class="line"><a name="l01370"></a><span class="lineno"> 1370</span>&#160;          <span class="keywordflow">if</span> (c != -1) {</div>
<div class="line"><a name="l01371"></a><span class="lineno"> 1371</span>&#160;            <span class="comment">/* Insert the actual char */</span></div>
<div class="line"><a name="l01372"></a><span class="lineno"> 1372</span>&#160;            insert_char(current, current-&gt;pos, c);</div>
<div class="line"><a name="l01373"></a><span class="lineno"> 1373</span>&#160;          }</div>
<div class="line"><a name="l01374"></a><span class="lineno"> 1374</span>&#160;          refreshLine(current-&gt;prompt, current);</div>
<div class="line"><a name="l01375"></a><span class="lineno"> 1375</span>&#160;        }</div>
<div class="line"><a name="l01376"></a><span class="lineno"> 1376</span>&#160;      }</div>
<div class="line"><a name="l01377"></a><span class="lineno"> 1377</span>&#160;      <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01378"></a><span class="lineno"> 1378</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="a00269.xhtml#aa083619c8e1488f8193a592aeb59dd1c">ctrl</a>(<span class="charliteral">&#39;B&#39;</span>):</div>
<div class="line"><a name="l01379"></a><span class="lineno"> 1379</span>&#160;    case <a class="code" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2a89b836c84eef5e4ca9f3c379a2980671">SPECIAL_LEFT</a>:</div>
<div class="line"><a name="l01380"></a><span class="lineno"> 1380</span>&#160;      if (current-&gt;pos &gt; 0) {</div>
<div class="line"><a name="l01381"></a><span class="lineno"> 1381</span>&#160;        current-&gt;pos--;</div>
<div class="line"><a name="l01382"></a><span class="lineno"> 1382</span>&#160;        refreshLine(current-&gt;prompt, current);</div>
<div class="line"><a name="l01383"></a><span class="lineno"> 1383</span>&#160;      }</div>
<div class="line"><a name="l01384"></a><span class="lineno"> 1384</span>&#160;      <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01385"></a><span class="lineno"> 1385</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="a00269.xhtml#aa083619c8e1488f8193a592aeb59dd1c">ctrl</a>(<span class="charliteral">&#39;F&#39;</span>):</div>
<div class="line"><a name="l01386"></a><span class="lineno"> 1386</span>&#160;    case <a class="code" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2a566021ede71ce2379d48f3d5cfba82af">SPECIAL_RIGHT</a>:</div>
<div class="line"><a name="l01387"></a><span class="lineno"> 1387</span>&#160;      if (current-&gt;pos &lt; current-&gt;chars) {</div>
<div class="line"><a name="l01388"></a><span class="lineno"> 1388</span>&#160;        current-&gt;pos++;</div>
<div class="line"><a name="l01389"></a><span class="lineno"> 1389</span>&#160;        refreshLine(current-&gt;prompt, current);</div>
<div class="line"><a name="l01390"></a><span class="lineno"> 1390</span>&#160;      }</div>
<div class="line"><a name="l01391"></a><span class="lineno"> 1391</span>&#160;      <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01392"></a><span class="lineno"> 1392</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2ac2180577128378038c179c1312e286b3">SPECIAL_PAGE_UP</a>:</div>
<div class="line"><a name="l01393"></a><span class="lineno"> 1393</span>&#160;      dir = history_len - history_index - 1; <span class="comment">/* move to start of history */</span></div>
<div class="line"><a name="l01394"></a><span class="lineno"> 1394</span>&#160;      <span class="keywordflow">goto</span> history_navigation;</div>
<div class="line"><a name="l01395"></a><span class="lineno"> 1395</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2a7a8d9d28a3f89dddbbfd9627746fba5f">SPECIAL_PAGE_DOWN</a>:</div>
<div class="line"><a name="l01396"></a><span class="lineno"> 1396</span>&#160;      dir = -history_index; <span class="comment">/* move to 0 == end of history, i.e. current */</span></div>
<div class="line"><a name="l01397"></a><span class="lineno"> 1397</span>&#160;      <span class="keywordflow">goto</span> history_navigation;</div>
<div class="line"><a name="l01398"></a><span class="lineno"> 1398</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="a00269.xhtml#aa083619c8e1488f8193a592aeb59dd1c">ctrl</a>(<span class="charliteral">&#39;P&#39;</span>):</div>
<div class="line"><a name="l01399"></a><span class="lineno"> 1399</span>&#160;    case <a class="code" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2a9603b88584871325c356a3d426dbd4ee">SPECIAL_UP</a>:</div>
<div class="line"><a name="l01400"></a><span class="lineno"> 1400</span>&#160;      dir = 1;</div>
<div class="line"><a name="l01401"></a><span class="lineno"> 1401</span>&#160;      <span class="keywordflow">goto</span> history_navigation;</div>
<div class="line"><a name="l01402"></a><span class="lineno"> 1402</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="a00269.xhtml#aa083619c8e1488f8193a592aeb59dd1c">ctrl</a>(<span class="charliteral">&#39;N&#39;</span>):</div>
<div class="line"><a name="l01403"></a><span class="lineno"> 1403</span>&#160;    case <a class="code" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2ac1f7282ba533a5bb36627566072e1c96">SPECIAL_DOWN</a>:</div>
<div class="line"><a name="l01404"></a><span class="lineno"> 1404</span>&#160;    history_navigation :</div>
<div class="line"><a name="l01405"></a><span class="lineno"> 1405</span>&#160;      if (history_len &gt; 1) {</div>
<div class="line"><a name="l01406"></a><span class="lineno"> 1406</span>&#160;        <span class="comment">/* Update the current history entry before to</span></div>
<div class="line"><a name="l01407"></a><span class="lineno"> 1407</span>&#160;<span class="comment">        * overwrite it with tne next one. */</span></div>
<div class="line"><a name="l01408"></a><span class="lineno"> 1408</span>&#160;        free(history[history_len - 1 - history_index]);</div>
<div class="line"><a name="l01409"></a><span class="lineno"> 1409</span>&#160;        history[history_len - 1 - history_index] = strdup(current-&gt;buf);</div>
<div class="line"><a name="l01410"></a><span class="lineno"> 1410</span>&#160;        <span class="comment">/* Show the new entry */</span></div>
<div class="line"><a name="l01411"></a><span class="lineno"> 1411</span>&#160;        history_index += dir;</div>
<div class="line"><a name="l01412"></a><span class="lineno"> 1412</span>&#160;        <span class="keywordflow">if</span> (history_index &lt; 0) {</div>
<div class="line"><a name="l01413"></a><span class="lineno"> 1413</span>&#160;          history_index = 0;</div>
<div class="line"><a name="l01414"></a><span class="lineno"> 1414</span>&#160;          <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01415"></a><span class="lineno"> 1415</span>&#160;        }</div>
<div class="line"><a name="l01416"></a><span class="lineno"> 1416</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (history_index &gt;= history_len) {</div>
<div class="line"><a name="l01417"></a><span class="lineno"> 1417</span>&#160;          history_index = history_len - 1;</div>
<div class="line"><a name="l01418"></a><span class="lineno"> 1418</span>&#160;          <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01419"></a><span class="lineno"> 1419</span>&#160;        }</div>
<div class="line"><a name="l01420"></a><span class="lineno"> 1420</span>&#160;        set_current(current, history[history_len - 1 - history_index]);</div>
<div class="line"><a name="l01421"></a><span class="lineno"> 1421</span>&#160;        refreshLine(current-&gt;prompt, current);</div>
<div class="line"><a name="l01422"></a><span class="lineno"> 1422</span>&#160;      }</div>
<div class="line"><a name="l01423"></a><span class="lineno"> 1423</span>&#160;                       <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01424"></a><span class="lineno"> 1424</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="a00269.xhtml#aa083619c8e1488f8193a592aeb59dd1c">ctrl</a>(<span class="charliteral">&#39;A&#39;</span>): <span class="comment">/* Ctrl+a, go to the start of the line */</span></div>
<div class="line"><a name="l01425"></a><span class="lineno"> 1425</span>&#160;    case <a class="code" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2aca87972eab5fc7806ee15ee3e58f559c">SPECIAL_HOME</a>:</div>
<div class="line"><a name="l01426"></a><span class="lineno"> 1426</span>&#160;      current-&gt;pos = 0;</div>
<div class="line"><a name="l01427"></a><span class="lineno"> 1427</span>&#160;      refreshLine(current-&gt;prompt, current);</div>
<div class="line"><a name="l01428"></a><span class="lineno"> 1428</span>&#160;      <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01429"></a><span class="lineno"> 1429</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="a00269.xhtml#aa083619c8e1488f8193a592aeb59dd1c">ctrl</a>(<span class="charliteral">&#39;E&#39;</span>): <span class="comment">/* ctrl+e, go to the end of the line */</span></div>
<div class="line"><a name="l01430"></a><span class="lineno"> 1430</span>&#160;    case <a class="code" href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2a45a06e3e29156cc2313913928dd7aa8e">SPECIAL_END</a>:</div>
<div class="line"><a name="l01431"></a><span class="lineno"> 1431</span>&#160;      current-&gt;pos = current-&gt;chars;</div>
<div class="line"><a name="l01432"></a><span class="lineno"> 1432</span>&#160;      refreshLine(current-&gt;prompt, current);</div>
<div class="line"><a name="l01433"></a><span class="lineno"> 1433</span>&#160;      <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01434"></a><span class="lineno"> 1434</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="a00269.xhtml#aa083619c8e1488f8193a592aeb59dd1c">ctrl</a>(<span class="charliteral">&#39;U&#39;</span>): <span class="comment">/* Ctrl+u, delete to beginning of line, save deleted chars. */</span></div>
<div class="line"><a name="l01435"></a><span class="lineno"> 1435</span>&#160;      if (remove_chars(current, 0, current-&gt;pos)) {</div>
<div class="line"><a name="l01436"></a><span class="lineno"> 1436</span>&#160;        refreshLine(current-&gt;prompt, current);</div>
<div class="line"><a name="l01437"></a><span class="lineno"> 1437</span>&#160;      }</div>
<div class="line"><a name="l01438"></a><span class="lineno"> 1438</span>&#160;      <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01439"></a><span class="lineno"> 1439</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="a00269.xhtml#aa083619c8e1488f8193a592aeb59dd1c">ctrl</a>(<span class="charliteral">&#39;K&#39;</span>): <span class="comment">/* Ctrl+k, delete from current to end of line, save deleted chars. */</span></div>
<div class="line"><a name="l01440"></a><span class="lineno"> 1440</span>&#160;      if (remove_chars(current, current-&gt;pos, current-&gt;chars - current-&gt;pos)) {</div>
<div class="line"><a name="l01441"></a><span class="lineno"> 1441</span>&#160;        refreshLine(current-&gt;prompt, current);</div>
<div class="line"><a name="l01442"></a><span class="lineno"> 1442</span>&#160;      }</div>
<div class="line"><a name="l01443"></a><span class="lineno"> 1443</span>&#160;      <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01444"></a><span class="lineno"> 1444</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="a00269.xhtml#aa083619c8e1488f8193a592aeb59dd1c">ctrl</a>(<span class="charliteral">&#39;Y&#39;</span>): <span class="comment">/* Ctrl+y, insert saved chars at current position */</span></div>
<div class="line"><a name="l01445"></a><span class="lineno"> 1445</span>&#160;      if (current-&gt;capture &amp;&amp; insert_chars(current, current-&gt;pos, current-&gt;capture)) {</div>
<div class="line"><a name="l01446"></a><span class="lineno"> 1446</span>&#160;        refreshLine(current-&gt;prompt, current);</div>
<div class="line"><a name="l01447"></a><span class="lineno"> 1447</span>&#160;      }</div>
<div class="line"><a name="l01448"></a><span class="lineno"> 1448</span>&#160;      <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01449"></a><span class="lineno"> 1449</span>&#160;    <span class="keywordflow">case</span> <a class="code" href="a00269.xhtml#aa083619c8e1488f8193a592aeb59dd1c">ctrl</a>(<span class="charliteral">&#39;L&#39;</span>): <span class="comment">/* Ctrl+L, clear screen */</span></div>
<div class="line"><a name="l01450"></a><span class="lineno"> 1450</span>&#160;      clearScreen(current);</div>
<div class="line"><a name="l01451"></a><span class="lineno"> 1451</span>&#160;      <span class="comment">/* Force recalc of window size for serial terminals */</span></div>
<div class="line"><a name="l01452"></a><span class="lineno"> 1452</span>&#160;      current-&gt;cols = 0;</div>
<div class="line"><a name="l01453"></a><span class="lineno"> 1453</span>&#160;      refreshLine(current-&gt;prompt, current);</div>
<div class="line"><a name="l01454"></a><span class="lineno"> 1454</span>&#160;      <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01455"></a><span class="lineno"> 1455</span>&#160;    <span class="keywordflow">default</span>:</div>
<div class="line"><a name="l01456"></a><span class="lineno"> 1456</span>&#160;      <span class="comment">/* Only tab is allowed without ^V */</span></div>
<div class="line"><a name="l01457"></a><span class="lineno"> 1457</span>&#160;      <span class="keywordflow">if</span> (c == <span class="charliteral">&#39;\t&#39;</span> || c &gt;= <span class="charliteral">&#39; &#39;</span>) {</div>
<div class="line"><a name="l01458"></a><span class="lineno"> 1458</span>&#160;        <span class="keywordflow">if</span> (insert_char(current, current-&gt;pos, c) == 1) {</div>
<div class="line"><a name="l01459"></a><span class="lineno"> 1459</span>&#160;          refreshLine(current-&gt;prompt, current);</div>
<div class="line"><a name="l01460"></a><span class="lineno"> 1460</span>&#160;        }</div>
<div class="line"><a name="l01461"></a><span class="lineno"> 1461</span>&#160;      }</div>
<div class="line"><a name="l01462"></a><span class="lineno"> 1462</span>&#160;      <span class="keywordflow">break</span>;</div>
<div class="line"><a name="l01463"></a><span class="lineno"> 1463</span>&#160;    }</div>
<div class="line"><a name="l01464"></a><span class="lineno"> 1464</span>&#160;    }</div>
<div class="line"><a name="l01465"></a><span class="lineno"> 1465</span>&#160;  <span class="keywordflow">return</span> current-&gt;len;</div>
<div class="line"><a name="l01466"></a><span class="lineno"> 1466</span>&#160;    }</div>
<div class="line"><a name="l01467"></a><span class="lineno"> 1467</span>&#160;</div>
<div class="line"><a name="l01468"></a><span class="lineno"><a class="line" href="a00381.xhtml#a8a19ac44664c4c7d2dca70c7afd37d2a"> 1468</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="a00381.xhtml#a8a19ac44664c4c7d2dca70c7afd37d2a">linenoiseColumns</a>(<span class="keywordtype">void</span>)</div>
<div class="line"><a name="l01469"></a><span class="lineno"> 1469</span>&#160;{</div>
<div class="line"><a name="l01470"></a><span class="lineno"> 1470</span>&#160;  <span class="keyword">struct </span>current current;</div>
<div class="line"><a name="l01471"></a><span class="lineno"> 1471</span>&#160;  enableRawMode(&amp;current);</div>
<div class="line"><a name="l01472"></a><span class="lineno"> 1472</span>&#160;  getWindowSize(&amp;current);</div>
<div class="line"><a name="l01473"></a><span class="lineno"> 1473</span>&#160;  disableRawMode(&amp;current);</div>
<div class="line"><a name="l01474"></a><span class="lineno"> 1474</span>&#160;  <span class="keywordflow">return</span> current.<a class="code" href="a00033.xhtml#a9d498a46ece09f3a32949a6cd31f4d7c">cols</a>;</div>
<div class="line"><a name="l01475"></a><span class="lineno"> 1475</span>&#160;}</div>
<div class="line"><a name="l01476"></a><span class="lineno"> 1476</span>&#160;</div>
<div class="line"><a name="l01477"></a><span class="lineno"><a class="line" href="a00381.xhtml#a1a1a8da73f602e753f773163db344b47"> 1477</a></span>&#160;<span class="keywordtype">char</span> *<a class="code" href="a00381.xhtml#a1a1a8da73f602e753f773163db344b47">linenoise</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *prompt)</div>
<div class="line"><a name="l01478"></a><span class="lineno"> 1478</span>&#160;{</div>
<div class="line"><a name="l01479"></a><span class="lineno"> 1479</span>&#160;  <span class="keywordtype">int</span> <a class="code" href="a00378.xhtml#ac2abb9d1e1e9e639f1bd83f5342d44c2">count</a>;</div>
<div class="line"><a name="l01480"></a><span class="lineno"> 1480</span>&#160;  <span class="keyword">struct </span>current current;</div>
<div class="line"><a name="l01481"></a><span class="lineno"> 1481</span>&#160;  <span class="keywordtype">char</span> buf[<a class="code" href="a00269.xhtml#accd6f1b690e8e72f579a854d07018679">LINENOISE_MAX_LINE</a>];</div>
<div class="line"><a name="l01482"></a><span class="lineno"> 1482</span>&#160;</div>
<div class="line"><a name="l01483"></a><span class="lineno"> 1483</span>&#160;  <span class="keywordflow">if</span> (enableRawMode(&amp;current) == -1) {</div>
<div class="line"><a name="l01484"></a><span class="lineno"> 1484</span>&#160;    printf(<span class="stringliteral">&quot;%s&quot;</span>, prompt);</div>
<div class="line"><a name="l01485"></a><span class="lineno"> 1485</span>&#160;    fflush(stdout);</div>
<div class="line"><a name="l01486"></a><span class="lineno"> 1486</span>&#160;    <span class="keywordflow">if</span> (fgets(buf, <span class="keyword">sizeof</span>(buf), stdin) == NULL) {</div>
<div class="line"><a name="l01487"></a><span class="lineno"> 1487</span>&#160;      <span class="keywordflow">return</span> NULL;</div>
<div class="line"><a name="l01488"></a><span class="lineno"> 1488</span>&#160;    }</div>
<div class="line"><a name="l01489"></a><span class="lineno"> 1489</span>&#160;    count = strlen(buf);</div>
<div class="line"><a name="l01490"></a><span class="lineno"> 1490</span>&#160;    <span class="keywordflow">if</span> (count &amp;&amp; buf[count - 1] == <span class="charliteral">&#39;\n&#39;</span>) {</div>
<div class="line"><a name="l01491"></a><span class="lineno"> 1491</span>&#160;      count--;</div>
<div class="line"><a name="l01492"></a><span class="lineno"> 1492</span>&#160;      buf[<a class="code" href="a00378.xhtml#ac2abb9d1e1e9e639f1bd83f5342d44c2">count</a>] = <span class="charliteral">&#39;\0&#39;</span>;</div>
<div class="line"><a name="l01493"></a><span class="lineno"> 1493</span>&#160;    }</div>
<div class="line"><a name="l01494"></a><span class="lineno"> 1494</span>&#160;  }</div>
<div class="line"><a name="l01495"></a><span class="lineno"> 1495</span>&#160;  <span class="keywordflow">else</span></div>
<div class="line"><a name="l01496"></a><span class="lineno"> 1496</span>&#160;  {</div>
<div class="line"><a name="l01497"></a><span class="lineno"> 1497</span>&#160;    current.<a class="code" href="a00033.xhtml#a51f49b97ce1880f5ddc5cc21807c9c58">buf</a> = buf;</div>
<div class="line"><a name="l01498"></a><span class="lineno"> 1498</span>&#160;    current.<a class="code" href="a00033.xhtml#a297955e3d81728386e702039c83d7d12">bufmax</a> = <span class="keyword">sizeof</span>(buf);</div>
<div class="line"><a name="l01499"></a><span class="lineno"> 1499</span>&#160;    current.<a class="code" href="a00033.xhtml#a4179dbed0891845bc7d028cdb62d0625">len</a> = 0;</div>
<div class="line"><a name="l01500"></a><span class="lineno"> 1500</span>&#160;    current.<a class="code" href="a00033.xhtml#ab864e4ff893e8f3a57953ee143a9367d">chars</a> = 0;</div>
<div class="line"><a name="l01501"></a><span class="lineno"> 1501</span>&#160;    current.<a class="code" href="a00033.xhtml#a3fb374e6eeebb1ae0c63fb5c507d74d6">pos</a> = 0;</div>
<div class="line"><a name="l01502"></a><span class="lineno"> 1502</span>&#160;    current.<a class="code" href="a00033.xhtml#a4016f2265bc1f1fb2148b7ea1cc53cf8">prompt</a> = prompt;</div>
<div class="line"><a name="l01503"></a><span class="lineno"> 1503</span>&#160;    current.<a class="code" href="a00033.xhtml#a345267497c1248989f54a7ec822dc1b2">capture</a> = NULL;</div>
<div class="line"><a name="l01504"></a><span class="lineno"> 1504</span>&#160;</div>
<div class="line"><a name="l01505"></a><span class="lineno"> 1505</span>&#160;    count = linenoiseEdit(&amp;current);</div>
<div class="line"><a name="l01506"></a><span class="lineno"> 1506</span>&#160;</div>
<div class="line"><a name="l01507"></a><span class="lineno"> 1507</span>&#160;    disableRawMode(&amp;current);</div>
<div class="line"><a name="l01508"></a><span class="lineno"> 1508</span>&#160;    printf(<span class="stringliteral">&quot;\n&quot;</span>);</div>
<div class="line"><a name="l01509"></a><span class="lineno"> 1509</span>&#160;</div>
<div class="line"><a name="l01510"></a><span class="lineno"> 1510</span>&#160;    free(current.<a class="code" href="a00033.xhtml#a345267497c1248989f54a7ec822dc1b2">capture</a>);</div>
<div class="line"><a name="l01511"></a><span class="lineno"> 1511</span>&#160;    <span class="keywordflow">if</span> (count == -1) {</div>
<div class="line"><a name="l01512"></a><span class="lineno"> 1512</span>&#160;      <span class="keywordflow">return</span> NULL;</div>
<div class="line"><a name="l01513"></a><span class="lineno"> 1513</span>&#160;    }</div>
<div class="line"><a name="l01514"></a><span class="lineno"> 1514</span>&#160;  }</div>
<div class="line"><a name="l01515"></a><span class="lineno"> 1515</span>&#160;  <span class="keywordflow">return</span> strdup(buf);</div>
<div class="line"><a name="l01516"></a><span class="lineno"> 1516</span>&#160;}</div>
<div class="line"><a name="l01517"></a><span class="lineno"> 1517</span>&#160;</div>
<div class="line"><a name="l01518"></a><span class="lineno"> 1518</span>&#160;<span class="comment">/* Using a circular buffer is smarter, but a bit more complex to handle. */</span></div>
<div class="line"><a name="l01519"></a><span class="lineno"><a class="line" href="a00381.xhtml#ae0d170e5b6e0ea50d5f722551cb09ec5"> 1519</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="a00381.xhtml#ae0d170e5b6e0ea50d5f722551cb09ec5">linenoiseHistoryAdd</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *line) {</div>
<div class="line"><a name="l01520"></a><span class="lineno"> 1520</span>&#160;  <span class="keywordtype">char</span> *linecopy;</div>
<div class="line"><a name="l01521"></a><span class="lineno"> 1521</span>&#160;</div>
<div class="line"><a name="l01522"></a><span class="lineno"> 1522</span>&#160;  <span class="keywordflow">if</span> (history_max_len == 0) <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l01523"></a><span class="lineno"> 1523</span>&#160;  <span class="keywordflow">if</span> (history == NULL) {</div>
<div class="line"><a name="l01524"></a><span class="lineno"> 1524</span>&#160;    history = (<span class="keywordtype">char</span> **)malloc(<span class="keyword">sizeof</span>(<span class="keywordtype">char</span>*)*history_max_len);</div>
<div class="line"><a name="l01525"></a><span class="lineno"> 1525</span>&#160;    <span class="keywordflow">if</span> (history == NULL) <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l01526"></a><span class="lineno"> 1526</span>&#160;    memset(history, 0, (<span class="keyword">sizeof</span>(<span class="keywordtype">char</span>*)*history_max_len));</div>
<div class="line"><a name="l01527"></a><span class="lineno"> 1527</span>&#160;  }</div>
<div class="line"><a name="l01528"></a><span class="lineno"> 1528</span>&#160;</div>
<div class="line"><a name="l01529"></a><span class="lineno"> 1529</span>&#160;  <span class="comment">/* do not insert duplicate lines into history */</span></div>
<div class="line"><a name="l01530"></a><span class="lineno"> 1530</span>&#160;  <span class="keywordflow">if</span> (history_len &gt; 0 &amp;&amp; strcmp(line, history[history_len - 1]) == 0) {</div>
<div class="line"><a name="l01531"></a><span class="lineno"> 1531</span>&#160;    <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l01532"></a><span class="lineno"> 1532</span>&#160;  }</div>
<div class="line"><a name="l01533"></a><span class="lineno"> 1533</span>&#160;</div>
<div class="line"><a name="l01534"></a><span class="lineno"> 1534</span>&#160;  linecopy = strdup(line);</div>
<div class="line"><a name="l01535"></a><span class="lineno"> 1535</span>&#160;  <span class="keywordflow">if</span> (!linecopy) <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l01536"></a><span class="lineno"> 1536</span>&#160;  <span class="keywordflow">if</span> (history_len == history_max_len) {</div>
<div class="line"><a name="l01537"></a><span class="lineno"> 1537</span>&#160;    free(history[0]);</div>
<div class="line"><a name="l01538"></a><span class="lineno"> 1538</span>&#160;    memmove(history, history + 1, <span class="keyword">sizeof</span>(<span class="keywordtype">char</span>*)*(history_max_len - 1));</div>
<div class="line"><a name="l01539"></a><span class="lineno"> 1539</span>&#160;    history_len--;</div>
<div class="line"><a name="l01540"></a><span class="lineno"> 1540</span>&#160;  }</div>
<div class="line"><a name="l01541"></a><span class="lineno"> 1541</span>&#160;  history[history_len] = linecopy;</div>
<div class="line"><a name="l01542"></a><span class="lineno"> 1542</span>&#160;  history_len++;</div>
<div class="line"><a name="l01543"></a><span class="lineno"> 1543</span>&#160;  <span class="keywordflow">return</span> 1;</div>
<div class="line"><a name="l01544"></a><span class="lineno"> 1544</span>&#160;}</div>
<div class="line"><a name="l01545"></a><span class="lineno"> 1545</span>&#160;</div>
<div class="line"><a name="l01546"></a><span class="lineno"><a class="line" href="a00381.xhtml#a44c060c4782bda76577a0627c62f2204"> 1546</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="a00381.xhtml#a44c060c4782bda76577a0627c62f2204">linenoiseHistoryGetMaxLen</a>(<span class="keywordtype">void</span>) {</div>
<div class="line"><a name="l01547"></a><span class="lineno"> 1547</span>&#160;  <span class="keywordflow">return</span> history_max_len;</div>
<div class="line"><a name="l01548"></a><span class="lineno"> 1548</span>&#160;}</div>
<div class="line"><a name="l01549"></a><span class="lineno"> 1549</span>&#160;</div>
<div class="line"><a name="l01550"></a><span class="lineno"><a class="line" href="a00381.xhtml#ae3fa94e62f15b4f0d105753027521dcf"> 1550</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="a00381.xhtml#ae3fa94e62f15b4f0d105753027521dcf">linenoiseHistorySetMaxLen</a>(<span class="keywordtype">int</span> len) {</div>
<div class="line"><a name="l01551"></a><span class="lineno"> 1551</span>&#160;  <span class="keywordtype">char</span> **newHistory;</div>
<div class="line"><a name="l01552"></a><span class="lineno"> 1552</span>&#160;</div>
<div class="line"><a name="l01553"></a><span class="lineno"> 1553</span>&#160;  <span class="keywordflow">if</span> (len &lt; 1) <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l01554"></a><span class="lineno"> 1554</span>&#160;  <span class="keywordflow">if</span> (history) {</div>
<div class="line"><a name="l01555"></a><span class="lineno"> 1555</span>&#160;    <span class="keywordtype">int</span> tocopy = history_len;</div>
<div class="line"><a name="l01556"></a><span class="lineno"> 1556</span>&#160;</div>
<div class="line"><a name="l01557"></a><span class="lineno"> 1557</span>&#160;    newHistory = (<span class="keywordtype">char</span> **)malloc(<span class="keyword">sizeof</span>(<span class="keywordtype">char</span>*)*len);</div>
<div class="line"><a name="l01558"></a><span class="lineno"> 1558</span>&#160;    <span class="keywordflow">if</span> (newHistory == NULL) <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l01559"></a><span class="lineno"> 1559</span>&#160;</div>
<div class="line"><a name="l01560"></a><span class="lineno"> 1560</span>&#160;    <span class="comment">/* If we can&#39;t copy everything, free the elements we&#39;ll not use. */</span></div>
<div class="line"><a name="l01561"></a><span class="lineno"> 1561</span>&#160;    <span class="keywordflow">if</span> (len &lt; tocopy) {</div>
<div class="line"><a name="l01562"></a><span class="lineno"> 1562</span>&#160;      <span class="keywordtype">int</span> j;</div>
<div class="line"><a name="l01563"></a><span class="lineno"> 1563</span>&#160;</div>
<div class="line"><a name="l01564"></a><span class="lineno"> 1564</span>&#160;      <span class="keywordflow">for</span> (j = 0; j &lt; tocopy - len; j++) free(history[j]);</div>
<div class="line"><a name="l01565"></a><span class="lineno"> 1565</span>&#160;      tocopy = len;</div>
<div class="line"><a name="l01566"></a><span class="lineno"> 1566</span>&#160;    }</div>
<div class="line"><a name="l01567"></a><span class="lineno"> 1567</span>&#160;    memset(newHistory, 0, <span class="keyword">sizeof</span>(<span class="keywordtype">char</span>*)*len);</div>
<div class="line"><a name="l01568"></a><span class="lineno"> 1568</span>&#160;    memcpy(newHistory, history + (history_len - tocopy), <span class="keyword">sizeof</span>(<span class="keywordtype">char</span>*)*tocopy);</div>
<div class="line"><a name="l01569"></a><span class="lineno"> 1569</span>&#160;    free(history);</div>
<div class="line"><a name="l01570"></a><span class="lineno"> 1570</span>&#160;    history = newHistory;</div>
<div class="line"><a name="l01571"></a><span class="lineno"> 1571</span>&#160;  }</div>
<div class="line"><a name="l01572"></a><span class="lineno"> 1572</span>&#160;  history_max_len = len;</div>
<div class="line"><a name="l01573"></a><span class="lineno"> 1573</span>&#160;  <span class="keywordflow">if</span> (history_len &gt; history_max_len)</div>
<div class="line"><a name="l01574"></a><span class="lineno"> 1574</span>&#160;    history_len = history_max_len;</div>
<div class="line"><a name="l01575"></a><span class="lineno"> 1575</span>&#160;  <span class="keywordflow">return</span> 1;</div>
<div class="line"><a name="l01576"></a><span class="lineno"> 1576</span>&#160;}</div>
<div class="line"><a name="l01577"></a><span class="lineno"> 1577</span>&#160;</div>
<div class="line"><a name="l01578"></a><span class="lineno"> 1578</span>&#160;<span class="comment">/* Save the history in the specified file. On success 0 is returned</span></div>
<div class="line"><a name="l01579"></a><span class="lineno"> 1579</span>&#160;<span class="comment">* otherwise -1 is returned. */</span></div>
<div class="line"><a name="l01580"></a><span class="lineno"><a class="line" href="a00381.xhtml#a238647bb456e72d40b364b093758aafc"> 1580</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="a00381.xhtml#a238647bb456e72d40b364b093758aafc">linenoiseHistorySave</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *filename) {</div>
<div class="line"><a name="l01581"></a><span class="lineno"> 1581</span>&#160;  FILE *fp = fopen(filename, <span class="stringliteral">&quot;w&quot;</span>);</div>
<div class="line"><a name="l01582"></a><span class="lineno"> 1582</span>&#160;  <span class="keywordtype">int</span> j;</div>
<div class="line"><a name="l01583"></a><span class="lineno"> 1583</span>&#160;</div>
<div class="line"><a name="l01584"></a><span class="lineno"> 1584</span>&#160;  <span class="keywordflow">if</span> (fp == NULL) <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l01585"></a><span class="lineno"> 1585</span>&#160;  <span class="keywordflow">for</span> (j = 0; j &lt; history_len; j++) {</div>
<div class="line"><a name="l01586"></a><span class="lineno"> 1586</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">char</span> *str = history[j];</div>
<div class="line"><a name="l01587"></a><span class="lineno"> 1587</span>&#160;    <span class="comment">/* Need to encode backslash, nl and cr */</span></div>
<div class="line"><a name="l01588"></a><span class="lineno"> 1588</span>&#160;    <span class="keywordflow">while</span> (*str) {</div>
<div class="line"><a name="l01589"></a><span class="lineno"> 1589</span>&#160;      <span class="keywordflow">if</span> (*str == <span class="charliteral">&#39;\\&#39;</span>) {</div>
<div class="line"><a name="l01590"></a><span class="lineno"> 1590</span>&#160;        fputs(<span class="stringliteral">&quot;\\\\&quot;</span>, fp);</div>
<div class="line"><a name="l01591"></a><span class="lineno"> 1591</span>&#160;      }</div>
<div class="line"><a name="l01592"></a><span class="lineno"> 1592</span>&#160;      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (*str == <span class="charliteral">&#39;\n&#39;</span>) {</div>
<div class="line"><a name="l01593"></a><span class="lineno"> 1593</span>&#160;        fputs(<span class="stringliteral">&quot;\\n&quot;</span>, fp);</div>
<div class="line"><a name="l01594"></a><span class="lineno"> 1594</span>&#160;      }</div>
<div class="line"><a name="l01595"></a><span class="lineno"> 1595</span>&#160;      <span class="keywordflow">else</span> <span class="keywordflow">if</span> (*str == <span class="charliteral">&#39;\r&#39;</span>) {</div>
<div class="line"><a name="l01596"></a><span class="lineno"> 1596</span>&#160;        fputs(<span class="stringliteral">&quot;\\r&quot;</span>, fp);</div>
<div class="line"><a name="l01597"></a><span class="lineno"> 1597</span>&#160;      }</div>
<div class="line"><a name="l01598"></a><span class="lineno"> 1598</span>&#160;      <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01599"></a><span class="lineno"> 1599</span>&#160;        fputc(*str, fp);</div>
<div class="line"><a name="l01600"></a><span class="lineno"> 1600</span>&#160;      }</div>
<div class="line"><a name="l01601"></a><span class="lineno"> 1601</span>&#160;      str++;</div>
<div class="line"><a name="l01602"></a><span class="lineno"> 1602</span>&#160;    }</div>
<div class="line"><a name="l01603"></a><span class="lineno"> 1603</span>&#160;    fputc(<span class="charliteral">&#39;\n&#39;</span>, fp);</div>
<div class="line"><a name="l01604"></a><span class="lineno"> 1604</span>&#160;  }</div>
<div class="line"><a name="l01605"></a><span class="lineno"> 1605</span>&#160;</div>
<div class="line"><a name="l01606"></a><span class="lineno"> 1606</span>&#160;  fclose(fp);</div>
<div class="line"><a name="l01607"></a><span class="lineno"> 1607</span>&#160;  <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l01608"></a><span class="lineno"> 1608</span>&#160;}</div>
<div class="line"><a name="l01609"></a><span class="lineno"> 1609</span>&#160;</div>
<div class="line"><a name="l01610"></a><span class="lineno"> 1610</span>&#160;<span class="comment">/* Load the history from the specified file. If the file does not exist</span></div>
<div class="line"><a name="l01611"></a><span class="lineno"> 1611</span>&#160;<span class="comment">* zero is returned and no operation is performed.</span></div>
<div class="line"><a name="l01612"></a><span class="lineno"> 1612</span>&#160;<span class="comment">*</span></div>
<div class="line"><a name="l01613"></a><span class="lineno"> 1613</span>&#160;<span class="comment">* If the file exists and the operation succeeded 0 is returned, otherwise</span></div>
<div class="line"><a name="l01614"></a><span class="lineno"> 1614</span>&#160;<span class="comment">* on error -1 is returned. */</span></div>
<div class="line"><a name="l01615"></a><span class="lineno"><a class="line" href="a00381.xhtml#ab0652a666cb260a0b487bc9df5638c7a"> 1615</a></span>&#160;<span class="keywordtype">int</span> <a class="code" href="a00381.xhtml#ab0652a666cb260a0b487bc9df5638c7a">linenoiseHistoryLoad</a>(<span class="keyword">const</span> <span class="keywordtype">char</span> *filename) {</div>
<div class="line"><a name="l01616"></a><span class="lineno"> 1616</span>&#160;  FILE *fp = fopen(filename, <span class="stringliteral">&quot;r&quot;</span>);</div>
<div class="line"><a name="l01617"></a><span class="lineno"> 1617</span>&#160;  <span class="keywordtype">char</span> buf[<a class="code" href="a00269.xhtml#accd6f1b690e8e72f579a854d07018679">LINENOISE_MAX_LINE</a>];</div>
<div class="line"><a name="l01618"></a><span class="lineno"> 1618</span>&#160;</div>
<div class="line"><a name="l01619"></a><span class="lineno"> 1619</span>&#160;  <span class="keywordflow">if</span> (fp == NULL) <span class="keywordflow">return</span> -1;</div>
<div class="line"><a name="l01620"></a><span class="lineno"> 1620</span>&#160;</div>
<div class="line"><a name="l01621"></a><span class="lineno"> 1621</span>&#160;  <span class="keywordflow">while</span> (fgets(buf, <a class="code" href="a00269.xhtml#accd6f1b690e8e72f579a854d07018679">LINENOISE_MAX_LINE</a>, fp) != NULL) {</div>
<div class="line"><a name="l01622"></a><span class="lineno"> 1622</span>&#160;    <span class="keywordtype">char</span> *src, *dest;</div>
<div class="line"><a name="l01623"></a><span class="lineno"> 1623</span>&#160;</div>
<div class="line"><a name="l01624"></a><span class="lineno"> 1624</span>&#160;    <span class="comment">/* Decode backslash escaped values */</span></div>
<div class="line"><a name="l01625"></a><span class="lineno"> 1625</span>&#160;    <span class="keywordflow">for</span> (src = dest = buf; *src; src++) {</div>
<div class="line"><a name="l01626"></a><span class="lineno"> 1626</span>&#160;      <span class="keywordtype">char</span> ch = *src;</div>
<div class="line"><a name="l01627"></a><span class="lineno"> 1627</span>&#160;</div>
<div class="line"><a name="l01628"></a><span class="lineno"> 1628</span>&#160;      <span class="keywordflow">if</span> (ch == <span class="charliteral">&#39;\\&#39;</span>) {</div>
<div class="line"><a name="l01629"></a><span class="lineno"> 1629</span>&#160;        src++;</div>
<div class="line"><a name="l01630"></a><span class="lineno"> 1630</span>&#160;        <span class="keywordflow">if</span> (*src == <span class="charliteral">&#39;n&#39;</span>) {</div>
<div class="line"><a name="l01631"></a><span class="lineno"> 1631</span>&#160;          ch = <span class="charliteral">&#39;\n&#39;</span>;</div>
<div class="line"><a name="l01632"></a><span class="lineno"> 1632</span>&#160;        }</div>
<div class="line"><a name="l01633"></a><span class="lineno"> 1633</span>&#160;        <span class="keywordflow">else</span> <span class="keywordflow">if</span> (*src == <span class="charliteral">&#39;r&#39;</span>) {</div>
<div class="line"><a name="l01634"></a><span class="lineno"> 1634</span>&#160;          ch = <span class="charliteral">&#39;\r&#39;</span>;</div>
<div class="line"><a name="l01635"></a><span class="lineno"> 1635</span>&#160;        }</div>
<div class="line"><a name="l01636"></a><span class="lineno"> 1636</span>&#160;        <span class="keywordflow">else</span> {</div>
<div class="line"><a name="l01637"></a><span class="lineno"> 1637</span>&#160;          ch = *src;</div>
<div class="line"><a name="l01638"></a><span class="lineno"> 1638</span>&#160;        }</div>
<div class="line"><a name="l01639"></a><span class="lineno"> 1639</span>&#160;      }</div>
<div class="line"><a name="l01640"></a><span class="lineno"> 1640</span>&#160;      *dest++ = ch;</div>
<div class="line"><a name="l01641"></a><span class="lineno"> 1641</span>&#160;    }</div>
<div class="line"><a name="l01642"></a><span class="lineno"> 1642</span>&#160;    <span class="comment">/* Remove trailing newline */</span></div>
<div class="line"><a name="l01643"></a><span class="lineno"> 1643</span>&#160;    <span class="keywordflow">if</span> (dest != buf &amp;&amp; (dest[-1] == <span class="charliteral">&#39;\n&#39;</span> || dest[-1] == <span class="charliteral">&#39;\r&#39;</span>)) {</div>
<div class="line"><a name="l01644"></a><span class="lineno"> 1644</span>&#160;      dest--;</div>
<div class="line"><a name="l01645"></a><span class="lineno"> 1645</span>&#160;    }</div>
<div class="line"><a name="l01646"></a><span class="lineno"> 1646</span>&#160;    *dest = 0;</div>
<div class="line"><a name="l01647"></a><span class="lineno"> 1647</span>&#160;</div>
<div class="line"><a name="l01648"></a><span class="lineno"> 1648</span>&#160;    <a class="code" href="a00381.xhtml#ae0d170e5b6e0ea50d5f722551cb09ec5">linenoiseHistoryAdd</a>(buf);</div>
<div class="line"><a name="l01649"></a><span class="lineno"> 1649</span>&#160;  }</div>
<div class="line"><a name="l01650"></a><span class="lineno"> 1650</span>&#160;  fclose(fp);</div>
<div class="line"><a name="l01651"></a><span class="lineno"> 1651</span>&#160;  <span class="keywordflow">return</span> 0;</div>
<div class="line"><a name="l01652"></a><span class="lineno"> 1652</span>&#160;}</div>
<div class="line"><a name="l01653"></a><span class="lineno"> 1653</span>&#160;</div>
<div class="line"><a name="l01654"></a><span class="lineno"> 1654</span>&#160;<span class="comment">/* Provide access to the history buffer.</span></div>
<div class="line"><a name="l01655"></a><span class="lineno"> 1655</span>&#160;<span class="comment">*</span></div>
<div class="line"><a name="l01656"></a><span class="lineno"> 1656</span>&#160;<span class="comment">* If &#39;len&#39; is not NULL, the length is stored in *len.</span></div>
<div class="line"><a name="l01657"></a><span class="lineno"> 1657</span>&#160;<span class="comment">*/</span></div>
<div class="line"><a name="l01658"></a><span class="lineno"><a class="line" href="a00381.xhtml#a05116514ca58a46e45aed7fc911fbf05"> 1658</a></span>&#160;<span class="keywordtype">char</span> **<a class="code" href="a00381.xhtml#a05116514ca58a46e45aed7fc911fbf05">linenoiseHistory</a>(<span class="keywordtype">int</span> *len) {</div>
<div class="line"><a name="l01659"></a><span class="lineno"> 1659</span>&#160;  <span class="keywordflow">if</span> (len) {</div>
<div class="line"><a name="l01660"></a><span class="lineno"> 1660</span>&#160;    *len = history_len;</div>
<div class="line"><a name="l01661"></a><span class="lineno"> 1661</span>&#160;  }</div>
<div class="line"><a name="l01662"></a><span class="lineno"> 1662</span>&#160;  <span class="keywordflow">return</span> history;</div>
<div class="line"><a name="l01663"></a><span class="lineno"> 1663</span>&#160;}</div>
<div class="line"><a name="l01664"></a><span class="lineno"> 1664</span>&#160;</div>
<div class="line"><a name="l01665"></a><span class="lineno"> 1665</span>&#160;}</div>
<div class="ttc" id="a00381_xhtml_a58016ed3fa33a3f13ad8ccde522cf8c2ab579d28f9865e6813569cbf1929ce340"><div class="ttname"><a href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2ab579d28f9865e6813569cbf1929ce340">LineNoise::SPECIAL_NONE</a></div><div class="ttdef"><b>Definition:</b> <a href="a00269_source.xhtml#l00154">LineNoise.cpp:154</a></div></div>
<div class="ttc" id="a00272_xhtml_a5f1b837144a2b5142285c69352281325"><div class="ttname"><a href="a00272.xhtml#a5f1b837144a2b5142285c69352281325">utf8_charlen</a></div><div class="ttdeci">#define utf8_charlen(C)</div><div class="ttdef"><b>Definition:</b> <a href="a00272_source.xhtml#l00026">LineNoiseUTF8.h:26</a></div></div>
<div class="ttc" id="a00380_xhtml_ade47a6ce7eff19ce3db4cda734e62f1d"><div class="ttname"><a href="a00380.xhtml#ade47a6ce7eff19ce3db4cda734e62f1d">LensCalibrationTest.y</a></div><div class="ttdeci">int y</div><div class="ttdef"><b>Definition:</b> <a href="a00268_source.xhtml#l00022">LensCalibrationTest.py:22</a></div></div>
<div class="ttc" id="a00381_xhtml_a8a19ac44664c4c7d2dca70c7afd37d2a"><div class="ttname"><a href="a00381.xhtml#a8a19ac44664c4c7d2dca70c7afd37d2a">LineNoise::linenoiseColumns</a></div><div class="ttdeci">int linenoiseColumns(void)</div><div class="ttdef"><b>Definition:</b> <a href="a00269_source.xhtml#l01468">LineNoise.cpp:1468</a></div></div>
<div class="ttc" id="a00033_xhtml"><div class="ttname"><a href="a00033.xhtml">LineNoise::current</a></div><div class="ttdef"><b>Definition:</b> <a href="a00269_source.xhtml#l00172">LineNoise.cpp:172</a></div></div>
<div class="ttc" id="a00381_xhtml_aea501da450221e00896c8b9897022241"><div class="ttname"><a href="a00381.xhtml#aea501da450221e00896c8b9897022241">LineNoise::linenoiseHistoryFree</a></div><div class="ttdeci">void linenoiseHistoryFree(void)</div><div class="ttdef"><b>Definition:</b> <a href="a00269_source.xhtml#l00195">LineNoise.cpp:195</a></div></div>
<div class="ttc" id="a00381_xhtml_a238647bb456e72d40b364b093758aafc"><div class="ttname"><a href="a00381.xhtml#a238647bb456e72d40b364b093758aafc">LineNoise::linenoiseHistorySave</a></div><div class="ttdeci">int linenoiseHistorySave(const char *filename)</div><div class="ttdef"><b>Definition:</b> <a href="a00269_source.xhtml#l01580">LineNoise.cpp:1580</a></div></div>
<div class="ttc" id="a00381_xhtml_ae3fa94e62f15b4f0d105753027521dcf"><div class="ttname"><a href="a00381.xhtml#ae3fa94e62f15b4f0d105753027521dcf">LineNoise::linenoiseHistorySetMaxLen</a></div><div class="ttdeci">int linenoiseHistorySetMaxLen(int len)</div><div class="ttdef"><b>Definition:</b> <a href="a00269_source.xhtml#l01550">LineNoise.cpp:1550</a></div></div>
<div class="ttc" id="a00272_xhtml"><div class="ttname"><a href="a00272.xhtml">LineNoiseUTF8.h</a></div></div>
<div class="ttc" id="a00270_xhtml"><div class="ttname"><a href="a00270.xhtml">LineNoise.h</a></div></div>
<div class="ttc" id="a00381_xhtml_ae0d170e5b6e0ea50d5f722551cb09ec5"><div class="ttname"><a href="a00381.xhtml#ae0d170e5b6e0ea50d5f722551cb09ec5">LineNoise::linenoiseHistoryAdd</a></div><div class="ttdeci">int linenoiseHistoryAdd(const char *line)</div><div class="ttdef"><b>Definition:</b> <a href="a00269_source.xhtml#l01519">LineNoise.cpp:1519</a></div></div>
<div class="ttc" id="a00269_xhtml_aa083619c8e1488f8193a592aeb59dd1c"><div class="ttname"><a href="a00269.xhtml#aa083619c8e1488f8193a592aeb59dd1c">ctrl</a></div><div class="ttdeci">#define ctrl(C)</div><div class="ttdef"><b>Definition:</b> <a href="a00269_source.xhtml#l00147">LineNoise.cpp:147</a></div></div>
<div class="ttc" id="a00381_xhtml_ab0652a666cb260a0b487bc9df5638c7a"><div class="ttname"><a href="a00381.xhtml#ab0652a666cb260a0b487bc9df5638c7a">LineNoise::linenoiseHistoryLoad</a></div><div class="ttdeci">int linenoiseHistoryLoad(const char *filename)</div><div class="ttdef"><b>Definition:</b> <a href="a00269_source.xhtml#l01615">LineNoise.cpp:1615</a></div></div>
<div class="ttc" id="a00033_xhtml_a570921803e6f75abe3330f30e166b518"><div class="ttname"><a href="a00033.xhtml#a570921803e6f75abe3330f30e166b518">LineNoise::current::fd</a></div><div class="ttdeci">int fd</div><div class="ttdef"><b>Definition:</b> <a href="a00269_source.xhtml#l00182">LineNoise.cpp:182</a></div></div>
<div class="ttc" id="a00381_xhtml_a58016ed3fa33a3f13ad8ccde522cf8c2a0fb03698c4a730460b623322a542edd6"><div class="ttname"><a href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2a0fb03698c4a730460b623322a542edd6">LineNoise::SPECIAL_INSERT</a></div><div class="ttdef"><b>Definition:</b> <a href="a00269_source.xhtml#l00162">LineNoise.cpp:162</a></div></div>
<div class="ttc" id="a00380_xhtml_a7709843a973932e0b1313ac1628ece59"><div class="ttname"><a href="a00380.xhtml#a7709843a973932e0b1313ac1628ece59">LensCalibrationTest.p1</a></div><div class="ttdeci">float p1</div><div class="ttdef"><b>Definition:</b> <a href="a00268_source.xhtml#l00018">LensCalibrationTest.py:18</a></div></div>
<div class="ttc" id="a00033_xhtml_a297955e3d81728386e702039c83d7d12"><div class="ttname"><a href="a00033.xhtml#a297955e3d81728386e702039c83d7d12">LineNoise::current::bufmax</a></div><div class="ttdeci">int bufmax</div><div class="ttdef"><b>Definition:</b> <a href="a00269_source.xhtml#l00174">LineNoise.cpp:174</a></div></div>
<div class="ttc" id="a00091_xhtml_a53f6ecb8ec9812f5d1089b92cf17c69b"><div class="ttname"><a href="a00091.xhtml#a53f6ecb8ec9812f5d1089b92cf17c69b">LineNoise::linenoiseCompletions::len</a></div><div class="ttdeci">size_t len</div><div class="ttdef"><b>Definition:</b> <a href="a00270_source.xhtml#l00054">LineNoise.h:54</a></div></div>
<div class="ttc" id="a00033_xhtml_a4179dbed0891845bc7d028cdb62d0625"><div class="ttname"><a href="a00033.xhtml#a4179dbed0891845bc7d028cdb62d0625">LineNoise::current::len</a></div><div class="ttdeci">int len</div><div class="ttdef"><b>Definition:</b> <a href="a00269_source.xhtml#l00175">LineNoise.cpp:175</a></div></div>
<div class="ttc" id="a00381_xhtml_a58016ed3fa33a3f13ad8ccde522cf8c2a7a8d9d28a3f89dddbbfd9627746fba5f"><div class="ttname"><a href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2a7a8d9d28a3f89dddbbfd9627746fba5f">LineNoise::SPECIAL_PAGE_DOWN</a></div><div class="ttdef"><b>Definition:</b> <a href="a00269_source.xhtml#l00164">LineNoise.cpp:164</a></div></div>
<div class="ttc" id="a00381_xhtml_a58016ed3fa33a3f13ad8ccde522cf8c2a7e5e00feb2b8d9baad18b63aeba41d88"><div class="ttname"><a href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2a7e5e00feb2b8d9baad18b63aeba41d88">LineNoise::SPECIAL_DELETE</a></div><div class="ttdef"><b>Definition:</b> <a href="a00269_source.xhtml#l00159">LineNoise.cpp:159</a></div></div>
<div class="ttc" id="a00392_xhtml_ga21dc16e4a3028a99c0be8f3943bfb699"><div class="ttname"><a href="a00392.xhtml#ga21dc16e4a3028a99c0be8f3943bfb699">Voxel::DWORD</a></div><div class="ttdeci">unsigned long DWORD</div><div class="ttdef"><b>Definition:</b> <a href="a00347_source.xhtml#l00031">USBSystemPrivateWindows.h:31</a></div></div>
<div class="ttc" id="a00091_xhtml"><div class="ttname"><a href="a00091.xhtml">LineNoise::linenoiseCompletions</a></div><div class="ttdef"><b>Definition:</b> <a href="a00270_source.xhtml#l00053">LineNoise.h:53</a></div></div>
<div class="ttc" id="a00381_xhtml_a1a1a8da73f602e753f773163db344b47"><div class="ttname"><a href="a00381.xhtml#a1a1a8da73f602e753f773163db344b47">LineNoise::linenoise</a></div><div class="ttdeci">char * linenoise(const char *prompt)</div><div class="ttdef"><b>Definition:</b> <a href="a00269_source.xhtml#l01477">LineNoise.cpp:1477</a></div></div>
<div class="ttc" id="a00381_xhtml_a58016ed3fa33a3f13ad8ccde522cf8c2a89b836c84eef5e4ca9f3c379a2980671"><div class="ttname"><a href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2a89b836c84eef5e4ca9f3c379a2980671">LineNoise::SPECIAL_LEFT</a></div><div class="ttdef"><b>Definition:</b> <a href="a00269_source.xhtml#l00157">LineNoise.cpp:157</a></div></div>
<div class="ttc" id="a00381_xhtml_a58016ed3fa33a3f13ad8ccde522cf8c2ac2180577128378038c179c1312e286b3"><div class="ttname"><a href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2ac2180577128378038c179c1312e286b3">LineNoise::SPECIAL_PAGE_UP</a></div><div class="ttdef"><b>Definition:</b> <a href="a00269_source.xhtml#l00163">LineNoise.cpp:163</a></div></div>
<div class="ttc" id="a00272_xhtml_a6e220f61f15dae8999af352902c47889"><div class="ttname"><a href="a00272.xhtml#a6e220f61f15dae8999af352902c47889">utf8_tounicode</a></div><div class="ttdeci">#define utf8_tounicode(S, CP)</div><div class="ttdef"><b>Definition:</b> <a href="a00272_source.xhtml#l00024">LineNoiseUTF8.h:24</a></div></div>
<div class="ttc" id="a00381_xhtml_a5648e21adbd7aa937a3e50c32961ade4"><div class="ttname"><a href="a00381.xhtml#a5648e21adbd7aa937a3e50c32961ade4">LineNoise::linenoiseAddCompletion</a></div><div class="ttdeci">void linenoiseAddCompletion(linenoiseCompletions *lc, const char *str)</div><div class="ttdef"><b>Definition:</b> <a href="a00269_source.xhtml#l01158">LineNoise.cpp:1158</a></div></div>
<div class="ttc" id="a00091_xhtml_a13b6a173b84d31b627fce502951d643b"><div class="ttname"><a href="a00091.xhtml#a13b6a173b84d31b627fce502951d643b">LineNoise::linenoiseCompletions::cvec</a></div><div class="ttdeci">char ** cvec</div><div class="ttdef"><b>Definition:</b> <a href="a00270_source.xhtml#l00055">LineNoise.h:55</a></div></div>
<div class="ttc" id="a00272_xhtml_a5527a901abff4a6ec627bede6bd4ff87"><div class="ttname"><a href="a00272.xhtml#a5527a901abff4a6ec627bede6bd4ff87">utf8_strlen</a></div><div class="ttdeci">#define utf8_strlen(S, B)</div><div class="ttdef"><b>Definition:</b> <a href="a00272_source.xhtml#l00023">LineNoiseUTF8.h:23</a></div></div>
<div class="ttc" id="a00381_xhtml_a77ae76b19f91154937daaf925e725a44"><div class="ttname"><a href="a00381.xhtml#a77ae76b19f91154937daaf925e725a44">LineNoise::linenoiseSetCompletionCallback</a></div><div class="ttdeci">LinenoiseCompletionCallback linenoiseSetCompletionCallback(LinenoiseCompletionCallback fn)</div><div class="ttdef"><b>Definition:</b> <a href="a00269_source.xhtml#l01152">LineNoise.cpp:1152</a></div></div>
<div class="ttc" id="a00381_xhtml_a58016ed3fa33a3f13ad8ccde522cf8c2a45a06e3e29156cc2313913928dd7aa8e"><div class="ttname"><a href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2a45a06e3e29156cc2313913928dd7aa8e">LineNoise::SPECIAL_END</a></div><div class="ttdef"><b>Definition:</b> <a href="a00269_source.xhtml#l00161">LineNoise.cpp:161</a></div></div>
<div class="ttc" id="a00033_xhtml_a51f49b97ce1880f5ddc5cc21807c9c58"><div class="ttname"><a href="a00033.xhtml#a51f49b97ce1880f5ddc5cc21807c9c58">LineNoise::current::buf</a></div><div class="ttdeci">char * buf</div><div class="ttdef"><b>Definition:</b> <a href="a00269_source.xhtml#l00173">LineNoise.cpp:173</a></div></div>
<div class="ttc" id="a00269_xhtml_a217d6c3c0088a81dce63a5f13d67c6f8"><div class="ttname"><a href="a00269.xhtml#a217d6c3c0088a81dce63a5f13d67c6f8">IGNORE_RC</a></div><div class="ttdeci">#define IGNORE_RC(EXPR)</div><div class="ttdef"><b>Definition:</b> <a href="a00269_source.xhtml#l00308">LineNoise.cpp:308</a></div></div>
<div class="ttc" id="a00033_xhtml_a3fb374e6eeebb1ae0c63fb5c507d74d6"><div class="ttname"><a href="a00033.xhtml#a3fb374e6eeebb1ae0c63fb5c507d74d6">LineNoise::current::pos</a></div><div class="ttdeci">int pos</div><div class="ttdef"><b>Definition:</b> <a href="a00269_source.xhtml#l00177">LineNoise.cpp:177</a></div></div>
<div class="ttc" id="a00381_xhtml_a58016ed3fa33a3f13ad8ccde522cf8c2a566021ede71ce2379d48f3d5cfba82af"><div class="ttname"><a href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2a566021ede71ce2379d48f3d5cfba82af">LineNoise::SPECIAL_RIGHT</a></div><div class="ttdef"><b>Definition:</b> <a href="a00269_source.xhtml#l00158">LineNoise.cpp:158</a></div></div>
<div class="ttc" id="a00033_xhtml_a345267497c1248989f54a7ec822dc1b2"><div class="ttname"><a href="a00033.xhtml#a345267497c1248989f54a7ec822dc1b2">LineNoise::current::capture</a></div><div class="ttdeci">char * capture</div><div class="ttdef"><b>Definition:</b> <a href="a00269_source.xhtml#l00180">LineNoise.cpp:180</a></div></div>
<div class="ttc" id="a00378_xhtml_ac2abb9d1e1e9e639f1bd83f5342d44c2"><div class="ttname"><a href="a00378.xhtml#ac2abb9d1e1e9e639f1bd83f5342d44c2">CameraSystemIQFrameTest.count</a></div><div class="ttdeci">tuple count</div><div class="ttdef"><b>Definition:</b> <a href="a00215_source.xhtml#l00030">CameraSystemIQFrameTest.py:30</a></div></div>
<div class="ttc" id="a00033_xhtml_a9d498a46ece09f3a32949a6cd31f4d7c"><div class="ttname"><a href="a00033.xhtml#a9d498a46ece09f3a32949a6cd31f4d7c">LineNoise::current::cols</a></div><div class="ttdeci">int cols</div><div class="ttdef"><b>Definition:</b> <a href="a00269_source.xhtml#l00178">LineNoise.cpp:178</a></div></div>
<div class="ttc" id="a00269_xhtml_a366c77abc06b106f49ff210eaf67e11b"><div class="ttname"><a href="a00269.xhtml#a366c77abc06b106f49ff210eaf67e11b">LINENOISE_DEFAULT_HISTORY_MAX_LEN</a></div><div class="ttdeci">#define LINENOISE_DEFAULT_HISTORY_MAX_LEN</div><div class="ttdef"><b>Definition:</b> <a href="a00269_source.xhtml#l00144">LineNoise.cpp:144</a></div></div>
<div class="ttc" id="a00381_xhtml_a58016ed3fa33a3f13ad8ccde522cf8c2ac1f7282ba533a5bb36627566072e1c96"><div class="ttname"><a href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2ac1f7282ba533a5bb36627566072e1c96">LineNoise::SPECIAL_DOWN</a></div><div class="ttdef"><b>Definition:</b> <a href="a00269_source.xhtml#l00156">LineNoise.cpp:156</a></div></div>
<div class="ttc" id="a00380_xhtml_a8cd39b525ac87092acb7f7bd4be6911a"><div class="ttname"><a href="a00380.xhtml#a8cd39b525ac87092acb7f7bd4be6911a">LensCalibrationTest.p2</a></div><div class="ttdeci">float p2</div><div class="ttdef"><b>Definition:</b> <a href="a00268_source.xhtml#l00019">LensCalibrationTest.py:19</a></div></div>
<div class="ttc" id="a00381_xhtml_a58016ed3fa33a3f13ad8ccde522cf8c2aca87972eab5fc7806ee15ee3e58f559c"><div class="ttname"><a href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2aca87972eab5fc7806ee15ee3e58f559c">LineNoise::SPECIAL_HOME</a></div><div class="ttdef"><b>Definition:</b> <a href="a00269_source.xhtml#l00160">LineNoise.cpp:160</a></div></div>
<div class="ttc" id="a00269_xhtml_accd6f1b690e8e72f579a854d07018679"><div class="ttname"><a href="a00269.xhtml#accd6f1b690e8e72f579a854d07018679">LINENOISE_MAX_LINE</a></div><div class="ttdeci">#define LINENOISE_MAX_LINE</div><div class="ttdef"><b>Definition:</b> <a href="a00269_source.xhtml#l00145">LineNoise.cpp:145</a></div></div>
<div class="ttc" id="a00381_xhtml_a4153292143f94d6f2960c3dabcfa4982"><div class="ttname"><a href="a00381.xhtml#a4153292143f94d6f2960c3dabcfa4982">LineNoise::LinenoiseCompletionCallback</a></div><div class="ttdeci">std::function&lt; void(const char *, linenoiseCompletions *)&gt; LinenoiseCompletionCallback</div><div class="ttdef"><b>Definition:</b> <a href="a00270_source.xhtml#l00061">LineNoise.h:61</a></div></div>
<div class="ttc" id="a00392_xhtml_ga6758195ba2a8511818a354eab109583f"><div class="ttname"><a href="a00392.xhtml#ga6758195ba2a8511818a354eab109583f">Voxel::HANDLE</a></div><div class="ttdeci">void * HANDLE</div><div class="ttdef"><b>Definition:</b> <a href="a00347_source.xhtml#l00028">USBSystemPrivateWindows.h:28</a></div></div>
<div class="ttc" id="a00381_xhtml_a05116514ca58a46e45aed7fc911fbf05"><div class="ttname"><a href="a00381.xhtml#a05116514ca58a46e45aed7fc911fbf05">LineNoise::linenoiseHistory</a></div><div class="ttdeci">char ** linenoiseHistory(int *len)</div><div class="ttdef"><b>Definition:</b> <a href="a00269_source.xhtml#l01658">LineNoise.cpp:1658</a></div></div>
<div class="ttc" id="a00272_xhtml_a8b9f26938d197fd630506367718c8f8d"><div class="ttname"><a href="a00272.xhtml#a8b9f26938d197fd630506367718c8f8d">utf8_index</a></div><div class="ttdeci">#define utf8_index(C, I)</div><div class="ttdef"><b>Definition:</b> <a href="a00272_source.xhtml#l00025">LineNoiseUTF8.h:25</a></div></div>
<div class="ttc" id="a00381_xhtml_a58016ed3fa33a3f13ad8ccde522cf8c2a9603b88584871325c356a3d426dbd4ee"><div class="ttname"><a href="a00381.xhtml#a58016ed3fa33a3f13ad8ccde522cf8c2a9603b88584871325c356a3d426dbd4ee">LineNoise::SPECIAL_UP</a></div><div class="ttdef"><b>Definition:</b> <a href="a00269_source.xhtml#l00155">LineNoise.cpp:155</a></div></div>
<div class="ttc" id="a00033_xhtml_ab864e4ff893e8f3a57953ee143a9367d"><div class="ttname"><a href="a00033.xhtml#ab864e4ff893e8f3a57953ee143a9367d">LineNoise::current::chars</a></div><div class="ttdeci">int chars</div><div class="ttdef"><b>Definition:</b> <a href="a00269_source.xhtml#l00176">LineNoise.cpp:176</a></div></div>
<div class="ttc" id="a00380_xhtml_a0013363a9b9db12e50b9307b3d8be7cb"><div class="ttname"><a href="a00380.xhtml#a0013363a9b9db12e50b9307b3d8be7cb">LensCalibrationTest.x</a></div><div class="ttdeci">tuple x</div><div class="ttdef"><b>Definition:</b> <a href="a00268_source.xhtml#l00021">LensCalibrationTest.py:21</a></div></div>
<div class="ttc" id="a00378_xhtml_ae4da4ba6a6d81881d77c675b1e9ec8e7"><div class="ttname"><a href="a00378.xhtml#ae4da4ba6a6d81881d77c675b1e9ec8e7">CameraSystemIQFrameTest.args</a></div><div class="ttdeci">tuple args</div><div class="ttdef"><b>Definition:</b> <a href="a00215_source.xhtml#l00013">CameraSystemIQFrameTest.py:13</a></div></div>
<div class="ttc" id="a00381_xhtml_a44c060c4782bda76577a0627c62f2204"><div class="ttname"><a href="a00381.xhtml#a44c060c4782bda76577a0627c62f2204">LineNoise::linenoiseHistoryGetMaxLen</a></div><div class="ttdeci">int linenoiseHistoryGetMaxLen(void)</div><div class="ttdef"><b>Definition:</b> <a href="a00269_source.xhtml#l01546">LineNoise.cpp:1546</a></div></div>
<div class="ttc" id="a00033_xhtml_a4016f2265bc1f1fb2148b7ea1cc53cf8"><div class="ttname"><a href="a00033.xhtml#a4016f2265bc1f1fb2148b7ea1cc53cf8">LineNoise::current::prompt</a></div><div class="ttdeci">const char * prompt</div><div class="ttdef"><b>Definition:</b> <a href="a00269_source.xhtml#l00179">LineNoise.cpp:179</a></div></div>
</div><!-- fragment --></div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Sun Jul 12 2015 21:49:55 for Voxel by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.6
</small></address>
</body>
</html>
